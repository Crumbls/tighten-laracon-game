/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("{// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjs7QUFFbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0Isc0JBQXNCO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7O0FBRUEsa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLE9BQU87QUFDekI7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUyx5QkFBeUI7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOERBQThELFlBQVk7QUFDMUU7QUFDQSw4REFBOEQsWUFBWTtBQUMxRTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFlBQVk7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzP2I5MTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHtcbiAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZXIoKSB7XG4gICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgaWYgKG5hbWUgIT09ICdlcnJvcicpIHtcbiAgICAgIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGVycm9yTGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBoYW5kbGVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCBsaXN0ZW5lciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgIGVtaXR0ZXIub25jZShuYW1lLCBsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGVcbiAgICAvLyBFdmVudEVtaXR0ZXJzLCB3ZSBkbyBub3QgbGlzdGVuIGZvciBgZXJyb3JgIGV2ZW50cyBoZXJlLlxuICAgIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBmdW5jdGlvbiB3cmFwTGlzdGVuZXIoYXJnKSB7XG4gICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlXG4gICAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5LlxuICAgICAgaWYgKGZsYWdzLm9uY2UpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lcihhcmcpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImVtaXR0ZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgZW1pdHRlcik7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/events/events.js\n\n}");

/***/ }),

/***/ "./node_modules/heap/index.js":
/*!************************************!*\
  !*** ./node_modules/heap/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{module.exports = __webpack_require__(/*! ./lib/heap */ \"./node_modules/heap/lib/heap.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGVhcC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSx5RkFBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL2hlYXAvaW5kZXguanM/YTlmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2hlYXAnKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/heap/index.js\n\n}");

/***/ }),

/***/ "./node_modules/heap/lib/heap.js":
/*!***************************************!*\
  !*** ./node_modules/heap/lib/heap.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("{/* module decorator */ module = __webpack_require__.nmd(module);\n// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  if ( true && module !== null ? module.exports : void 0) {\n    module.exports = Heap;\n  } else {\n    window.Heap = Heap;\n  }\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/heap/lib/heap.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/index.js":
/*!*******************************************!*\
  !*** ./node_modules/pathfinding/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{module.exports = __webpack_require__(/*! ./src/PathFinding */ \"./node_modules/pathfinding/src/PathFinding.js\");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsOEdBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL25vZGVfbW9kdWxlcy9wYXRoZmluZGluZy9pbmRleC5qcz84MDBlIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvUGF0aEZpbmRpbmcnKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/index.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/PathFinding.js":
/*!*****************************************************!*\
  !*** ./node_modules/pathfinding/src/PathFinding.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{module.exports = {\r\n    'Heap'                      : __webpack_require__(/*! heap */ \"./node_modules/heap/index.js\"),\r\n    'Node'                      : __webpack_require__(/*! ./core/Node */ \"./node_modules/pathfinding/src/core/Node.js\"),\r\n    'Grid'                      : __webpack_require__(/*! ./core/Grid */ \"./node_modules/pathfinding/src/core/Grid.js\"),\r\n    'Util'                      : __webpack_require__(/*! ./core/Util */ \"./node_modules/pathfinding/src/core/Util.js\"),\r\n    'DiagonalMovement'          : __webpack_require__(/*! ./core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\"),\r\n    'Heuristic'                 : __webpack_require__(/*! ./core/Heuristic */ \"./node_modules/pathfinding/src/core/Heuristic.js\"),\r\n    'AStarFinder'               : __webpack_require__(/*! ./finders/AStarFinder */ \"./node_modules/pathfinding/src/finders/AStarFinder.js\"),\r\n    'BestFirstFinder'           : __webpack_require__(/*! ./finders/BestFirstFinder */ \"./node_modules/pathfinding/src/finders/BestFirstFinder.js\"),\r\n    'BreadthFirstFinder'        : __webpack_require__(/*! ./finders/BreadthFirstFinder */ \"./node_modules/pathfinding/src/finders/BreadthFirstFinder.js\"),\r\n    'DijkstraFinder'            : __webpack_require__(/*! ./finders/DijkstraFinder */ \"./node_modules/pathfinding/src/finders/DijkstraFinder.js\"),\r\n    'BiAStarFinder'             : __webpack_require__(/*! ./finders/BiAStarFinder */ \"./node_modules/pathfinding/src/finders/BiAStarFinder.js\"),\r\n    'BiBestFirstFinder'         : __webpack_require__(/*! ./finders/BiBestFirstFinder */ \"./node_modules/pathfinding/src/finders/BiBestFirstFinder.js\"),\r\n    'BiBreadthFirstFinder'      : __webpack_require__(/*! ./finders/BiBreadthFirstFinder */ \"./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js\"),\r\n    'BiDijkstraFinder'          : __webpack_require__(/*! ./finders/BiDijkstraFinder */ \"./node_modules/pathfinding/src/finders/BiDijkstraFinder.js\"),\r\n    'IDAStarFinder'             : __webpack_require__(/*! ./finders/IDAStarFinder */ \"./node_modules/pathfinding/src/finders/IDAStarFinder.js\"),\r\n    'JumpPointFinder'           : __webpack_require__(/*! ./finders/JumpPointFinder */ \"./node_modules/pathfinding/src/finders/JumpPointFinder.js\"),\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL1BhdGhGaW5kaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0NBQWtDLG1CQUFPLENBQUMsMENBQU07QUFDaEQsa0NBQWtDLG1CQUFPLENBQUMsZ0VBQWE7QUFDdkQsa0NBQWtDLG1CQUFPLENBQUMsZ0VBQWE7QUFDdkQsa0NBQWtDLG1CQUFPLENBQUMsZ0VBQWE7QUFDdkQsa0NBQWtDLG1CQUFPLENBQUMsd0ZBQXlCO0FBQ25FLGtDQUFrQyxtQkFBTyxDQUFDLDBFQUFrQjtBQUM1RCxrQ0FBa0MsbUJBQU8sQ0FBQyxvRkFBdUI7QUFDakUsa0NBQWtDLG1CQUFPLENBQUMsNEZBQTJCO0FBQ3JFLGtDQUFrQyxtQkFBTyxDQUFDLGtHQUE4QjtBQUN4RSxrQ0FBa0MsbUJBQU8sQ0FBQywwRkFBMEI7QUFDcEUsa0NBQWtDLG1CQUFPLENBQUMsd0ZBQXlCO0FBQ25FLGtDQUFrQyxtQkFBTyxDQUFDLGdHQUE2QjtBQUN2RSxrQ0FBa0MsbUJBQU8sQ0FBQyxzR0FBZ0M7QUFDMUUsa0NBQWtDLG1CQUFPLENBQUMsOEZBQTRCO0FBQ3RFLGtDQUFrQyxtQkFBTyxDQUFDLHdGQUF5QjtBQUNuRSxrQ0FBa0MsbUJBQU8sQ0FBQyw0RkFBMkI7QUFDckUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9QYXRoRmluZGluZy5qcz83NTg3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgJ0hlYXAnICAgICAgICAgICAgICAgICAgICAgIDogcmVxdWlyZSgnaGVhcCcpLFxyXG4gICAgJ05vZGUnICAgICAgICAgICAgICAgICAgICAgIDogcmVxdWlyZSgnLi9jb3JlL05vZGUnKSxcclxuICAgICdHcmlkJyAgICAgICAgICAgICAgICAgICAgICA6IHJlcXVpcmUoJy4vY29yZS9HcmlkJyksXHJcbiAgICAnVXRpbCcgICAgICAgICAgICAgICAgICAgICAgOiByZXF1aXJlKCcuL2NvcmUvVXRpbCcpLFxyXG4gICAgJ0RpYWdvbmFsTW92ZW1lbnQnICAgICAgICAgIDogcmVxdWlyZSgnLi9jb3JlL0RpYWdvbmFsTW92ZW1lbnQnKSxcclxuICAgICdIZXVyaXN0aWMnICAgICAgICAgICAgICAgICA6IHJlcXVpcmUoJy4vY29yZS9IZXVyaXN0aWMnKSxcclxuICAgICdBU3RhckZpbmRlcicgICAgICAgICAgICAgICA6IHJlcXVpcmUoJy4vZmluZGVycy9BU3RhckZpbmRlcicpLFxyXG4gICAgJ0Jlc3RGaXJzdEZpbmRlcicgICAgICAgICAgIDogcmVxdWlyZSgnLi9maW5kZXJzL0Jlc3RGaXJzdEZpbmRlcicpLFxyXG4gICAgJ0JyZWFkdGhGaXJzdEZpbmRlcicgICAgICAgIDogcmVxdWlyZSgnLi9maW5kZXJzL0JyZWFkdGhGaXJzdEZpbmRlcicpLFxyXG4gICAgJ0RpamtzdHJhRmluZGVyJyAgICAgICAgICAgIDogcmVxdWlyZSgnLi9maW5kZXJzL0RpamtzdHJhRmluZGVyJyksXHJcbiAgICAnQmlBU3RhckZpbmRlcicgICAgICAgICAgICAgOiByZXF1aXJlKCcuL2ZpbmRlcnMvQmlBU3RhckZpbmRlcicpLFxyXG4gICAgJ0JpQmVzdEZpcnN0RmluZGVyJyAgICAgICAgIDogcmVxdWlyZSgnLi9maW5kZXJzL0JpQmVzdEZpcnN0RmluZGVyJyksXHJcbiAgICAnQmlCcmVhZHRoRmlyc3RGaW5kZXInICAgICAgOiByZXF1aXJlKCcuL2ZpbmRlcnMvQmlCcmVhZHRoRmlyc3RGaW5kZXInKSxcclxuICAgICdCaURpamtzdHJhRmluZGVyJyAgICAgICAgICA6IHJlcXVpcmUoJy4vZmluZGVycy9CaURpamtzdHJhRmluZGVyJyksXHJcbiAgICAnSURBU3RhckZpbmRlcicgICAgICAgICAgICAgOiByZXF1aXJlKCcuL2ZpbmRlcnMvSURBU3RhckZpbmRlcicpLFxyXG4gICAgJ0p1bXBQb2ludEZpbmRlcicgICAgICAgICAgIDogcmVxdWlyZSgnLi9maW5kZXJzL0p1bXBQb2ludEZpbmRlcicpLFxyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/PathFinding.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/core/DiagonalMovement.js":
/*!***************************************************************!*\
  !*** ./node_modules/pathfinding/src/core/DiagonalMovement.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("{var DiagonalMovement = {\r\n    Always: 1,\r\n    Never: 2,\r\n    IfAtMostOneObstacle: 3,\r\n    OnlyWhenNoObstacles: 4\r\n};\r\n\r\nmodule.exports = DiagonalMovement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2NvcmUvRGlhZ29uYWxNb3ZlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL25vZGVfbW9kdWxlcy9wYXRoZmluZGluZy9zcmMvY29yZS9EaWFnb25hbE1vdmVtZW50LmpzPzM5ZTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIERpYWdvbmFsTW92ZW1lbnQgPSB7XHJcbiAgICBBbHdheXM6IDEsXHJcbiAgICBOZXZlcjogMixcclxuICAgIElmQXRNb3N0T25lT2JzdGFjbGU6IDMsXHJcbiAgICBPbmx5V2hlbk5vT2JzdGFjbGVzOiA0XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IERpYWdvbmFsTW92ZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/core/DiagonalMovement.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/core/Grid.js":
/*!***************************************************!*\
  !*** ./node_modules/pathfinding/src/core/Grid.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Node = __webpack_require__(/*! ./Node */ \"./node_modules/pathfinding/src/core/Node.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ./DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\r\nfunction Grid(width_or_matrix, height, matrix) {\r\n    var width;\r\n\r\n    if (typeof width_or_matrix !== 'object') {\r\n        width = width_or_matrix;\r\n    } else {\r\n        height = width_or_matrix.length;\r\n        width = width_or_matrix[0].length;\r\n        matrix = width_or_matrix;\r\n    }\r\n\r\n    /**\r\n     * The number of columns of the grid.\r\n     * @type number\r\n     */\r\n    this.width = width;\r\n    /**\r\n     * The number of rows of the grid.\r\n     * @type number\r\n     */\r\n    this.height = height;\r\n\r\n    /**\r\n     * A 2D array of nodes.\r\n     */\r\n    this.nodes = this._buildNodes(width, height, matrix);\r\n}\r\n\r\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\r\nGrid.prototype._buildNodes = function(width, height, matrix) {\r\n    var i, j,\r\n        nodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        nodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            nodes[i][j] = new Node(j, i);\r\n        }\r\n    }\r\n\r\n\r\n    if (matrix === undefined) {\r\n        return nodes;\r\n    }\r\n\r\n    if (matrix.length !== height || matrix[0].length !== width) {\r\n        throw new Error('Matrix size does not fit');\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        for (j = 0; j < width; ++j) {\r\n            if (matrix[i][j]) {\r\n                // 0, false, null will be walkable\r\n                // while others will be un-walkable\r\n                nodes[i][j].walkable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n};\r\n\r\n\r\nGrid.prototype.getNodeAt = function(x, y) {\r\n    return this.nodes[y][x];\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\r\nGrid.prototype.isWalkableAt = function(x, y) {\r\n    return this.isInside(x, y) && this.nodes[y][x].walkable;\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isInside = function(x, y) {\r\n    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);\r\n};\r\n\r\n\r\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\r\nGrid.prototype.setWalkableAt = function(x, y, walkable) {\r\n    this.nodes[y][x].walkable = walkable;\r\n};\r\n\r\n\r\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\r\nGrid.prototype.getNeighbors = function(node, diagonalMovement) {\r\n    var x = node.x,\r\n        y = node.y,\r\n        neighbors = [],\r\n        s0 = false, d0 = false,\r\n        s1 = false, d1 = false,\r\n        s2 = false, d2 = false,\r\n        s3 = false, d3 = false,\r\n        nodes = this.nodes;\r\n\r\n    // ↑\r\n    if (this.isWalkableAt(x, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x]);\r\n        s0 = true;\r\n    }\r\n    // →\r\n    if (this.isWalkableAt(x + 1, y)) {\r\n        neighbors.push(nodes[y][x + 1]);\r\n        s1 = true;\r\n    }\r\n    // ↓\r\n    if (this.isWalkableAt(x, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x]);\r\n        s2 = true;\r\n    }\r\n    // ←\r\n    if (this.isWalkableAt(x - 1, y)) {\r\n        neighbors.push(nodes[y][x - 1]);\r\n        s3 = true;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.Never) {\r\n        return neighbors;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        d0 = s3 && s0;\r\n        d1 = s0 && s1;\r\n        d2 = s1 && s2;\r\n        d3 = s2 && s3;\r\n    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\r\n        d0 = s3 || s0;\r\n        d1 = s0 || s1;\r\n        d2 = s1 || s2;\r\n        d3 = s2 || s3;\r\n    } else if (diagonalMovement === DiagonalMovement.Always) {\r\n        d0 = true;\r\n        d1 = true;\r\n        d2 = true;\r\n        d3 = true;\r\n    } else {\r\n        throw new Error('Incorrect value of diagonalMovement');\r\n    }\r\n\r\n    // ↖\r\n    if (d0 && this.isWalkableAt(x - 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x - 1]);\r\n    }\r\n    // ↗\r\n    if (d1 && this.isWalkableAt(x + 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x + 1]);\r\n    }\r\n    // ↘\r\n    if (d2 && this.isWalkableAt(x + 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x + 1]);\r\n    }\r\n    // ↙\r\n    if (d3 && this.isWalkableAt(x - 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x - 1]);\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\n\r\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\r\nGrid.prototype.clone = function() {\r\n    var i, j,\r\n\r\n        width = this.width,\r\n        height = this.height,\r\n        thisNodes = this.nodes,\r\n\r\n        newGrid = new Grid(width, height),\r\n        newNodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        newNodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\r\n        }\r\n    }\r\n\r\n    newGrid.nodes = newNodes;\r\n\r\n    return newGrid;\r\n};\r\n\r\nmodule.exports = Grid;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/core/Grid.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/core/Heuristic.js":
/*!********************************************************!*\
  !*** ./node_modules/pathfinding/src/core/Heuristic.js ***!
  \********************************************************/
/***/ ((module) => {

eval("{/**\r\n * @namespace PF.Heuristic\r\n * @description A collection of heuristic functions.\r\n */\r\nmodule.exports = {\r\n\r\n  /**\r\n   * Manhattan distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} dx + dy\r\n   */\r\n  manhattan: function(dx, dy) {\r\n      return dx + dy;\r\n  },\r\n\r\n  /**\r\n   * Euclidean distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy)\r\n   */\r\n  euclidean: function(dx, dy) {\r\n      return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n\r\n  /**\r\n   * Octile distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy) for grids\r\n   */\r\n  octile: function(dx, dy) {\r\n      var F = Math.SQRT2 - 1;\r\n      return (dx < dy) ? F * dx + dy : F * dy + dx;\r\n  },\r\n\r\n  /**\r\n   * Chebyshev distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} max(dx, dy)\r\n   */\r\n  chebyshev: function(dx, dy) {\r\n      return Math.max(dx, dy);\r\n  }\r\n\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2NvcmUvSGV1cmlzdGljLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2NvcmUvSGV1cmlzdGljLmpzPzAwYzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lc3BhY2UgUEYuSGV1cmlzdGljXHJcbiAqIEBkZXNjcmlwdGlvbiBBIGNvbGxlY3Rpb24gb2YgaGV1cmlzdGljIGZ1bmN0aW9ucy5cclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICAvKipcclxuICAgKiBNYW5oYXR0YW4gZGlzdGFuY2UuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR4IC0gRGlmZmVyZW5jZSBpbiB4LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkeSAtIERpZmZlcmVuY2UgaW4geS5cclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGR4ICsgZHlcclxuICAgKi9cclxuICBtYW5oYXR0YW46IGZ1bmN0aW9uKGR4LCBkeSkge1xyXG4gICAgICByZXR1cm4gZHggKyBkeTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBFdWNsaWRlYW4gZGlzdGFuY2UuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR4IC0gRGlmZmVyZW5jZSBpbiB4LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkeSAtIERpZmZlcmVuY2UgaW4geS5cclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHNxcnQoZHggKiBkeCArIGR5ICogZHkpXHJcbiAgICovXHJcbiAgZXVjbGlkZWFuOiBmdW5jdGlvbihkeCwgZHkpIHtcclxuICAgICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogT2N0aWxlIGRpc3RhbmNlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkeCAtIERpZmZlcmVuY2UgaW4geC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHkgLSBEaWZmZXJlbmNlIGluIHkuXHJcbiAgICogQHJldHVybiB7bnVtYmVyfSBzcXJ0KGR4ICogZHggKyBkeSAqIGR5KSBmb3IgZ3JpZHNcclxuICAgKi9cclxuICBvY3RpbGU6IGZ1bmN0aW9uKGR4LCBkeSkge1xyXG4gICAgICB2YXIgRiA9IE1hdGguU1FSVDIgLSAxO1xyXG4gICAgICByZXR1cm4gKGR4IDwgZHkpID8gRiAqIGR4ICsgZHkgOiBGICogZHkgKyBkeDtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBDaGVieXNoZXYgZGlzdGFuY2UuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR4IC0gRGlmZmVyZW5jZSBpbiB4LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkeSAtIERpZmZlcmVuY2UgaW4geS5cclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IG1heChkeCwgZHkpXHJcbiAgICovXHJcbiAgY2hlYnlzaGV2OiBmdW5jdGlvbihkeCwgZHkpIHtcclxuICAgICAgcmV0dXJuIE1hdGgubWF4KGR4LCBkeSk7XHJcbiAgfVxyXG5cclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/core/Heuristic.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/core/Node.js":
/*!***************************************************!*\
  !*** ./node_modules/pathfinding/src/core/Node.js ***!
  \***************************************************/
/***/ ((module) => {

eval("{/**\r\n * A node in grid. \r\n * This class holds some basic information about a node and custom \r\n * attributes may be added, depending on the algorithms' needs.\r\n * @constructor\r\n * @param {number} x - The x coordinate of the node on the grid.\r\n * @param {number} y - The y coordinate of the node on the grid.\r\n * @param {boolean} [walkable] - Whether this node is walkable.\r\n */\r\nfunction Node(x, y, walkable) {\r\n    /**\r\n     * The x coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.x = x;\r\n    /**\r\n     * The y coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.y = y;\r\n    /**\r\n     * Whether this node can be walked through.\r\n     * @type boolean\r\n     */\r\n    this.walkable = (walkable === undefined ? true : walkable);\r\n}\r\n\r\nmodule.exports = Node;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2NvcmUvTm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2NvcmUvTm9kZS5qcz80ZDY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBBIG5vZGUgaW4gZ3JpZC4gXHJcbiAqIFRoaXMgY2xhc3MgaG9sZHMgc29tZSBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBhIG5vZGUgYW5kIGN1c3RvbSBcclxuICogYXR0cmlidXRlcyBtYXkgYmUgYWRkZWQsIGRlcGVuZGluZyBvbiB0aGUgYWxnb3JpdGhtcycgbmVlZHMuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG5vZGUgb24gdGhlIGdyaWQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgbm9kZSBvbiB0aGUgZ3JpZC5cclxuICogQHBhcmFtIHtib29sZWFufSBbd2Fsa2FibGVdIC0gV2hldGhlciB0aGlzIG5vZGUgaXMgd2Fsa2FibGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBOb2RlKHgsIHksIHdhbGthYmxlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG5vZGUgb24gdGhlIGdyaWQuXHJcbiAgICAgKiBAdHlwZSBudW1iZXJcclxuICAgICAqL1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgbm9kZSBvbiB0aGUgZ3JpZC5cclxuICAgICAqIEB0eXBlIG51bWJlclxyXG4gICAgICovXHJcbiAgICB0aGlzLnkgPSB5O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoaXMgbm9kZSBjYW4gYmUgd2Fsa2VkIHRocm91Z2guXHJcbiAgICAgKiBAdHlwZSBib29sZWFuXHJcbiAgICAgKi9cclxuICAgIHRoaXMud2Fsa2FibGUgPSAod2Fsa2FibGUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiB3YWxrYWJsZSk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTm9kZTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/core/Node.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/core/Util.js":
/*!***************************************************!*\
  !*** ./node_modules/pathfinding/src/core/Util.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{/**\r\n * Backtrace according to the parent records and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node} node End node\r\n * @return {Array<Array<number>>} the path\r\n */\r\nfunction backtrace(node) {\r\n    var path = [[node.x, node.y]];\r\n    while (node.parent) {\r\n        node = node.parent;\r\n        path.push([node.x, node.y]);\r\n    }\r\n    return path.reverse();\r\n}\r\nexports.backtrace = backtrace;\r\n\r\n/**\r\n * Backtrace from start and end node, and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node}\r\n * @param {Node}\r\n */\r\nfunction biBacktrace(nodeA, nodeB) {\r\n    var pathA = backtrace(nodeA),\r\n        pathB = backtrace(nodeB);\r\n    return pathA.concat(pathB.reverse());\r\n}\r\nexports.biBacktrace = biBacktrace;\r\n\r\n/**\r\n * Compute the length of the path.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {number} The length of the path\r\n */\r\nfunction pathLength(path) {\r\n    var i, sum = 0, a, b, dx, dy;\r\n    for (i = 1; i < path.length; ++i) {\r\n        a = path[i - 1];\r\n        b = path[i];\r\n        dx = a[0] - b[0];\r\n        dy = a[1] - b[1];\r\n        sum += Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    return sum;\r\n}\r\nexports.pathLength = pathLength;\r\n\r\n\r\n/**\r\n * Given the start and end coordinates, return all the coordinates lying\r\n * on the line formed by these coordinates, based on Bresenham's algorithm.\r\n * http://en.wikipedia.org/wiki/Bresenham's_line_algorithm#Simplification\r\n * @param {number} x0 Start x coordinate\r\n * @param {number} y0 Start y coordinate\r\n * @param {number} x1 End x coordinate\r\n * @param {number} y1 End y coordinate\r\n * @return {Array<Array<number>>} The coordinates on the line\r\n */\r\nfunction interpolate(x0, y0, x1, y1) {\r\n    var abs = Math.abs,\r\n        line = [],\r\n        sx, sy, dx, dy, err, e2;\r\n\r\n    dx = abs(x1 - x0);\r\n    dy = abs(y1 - y0);\r\n\r\n    sx = (x0 < x1) ? 1 : -1;\r\n    sy = (y0 < y1) ? 1 : -1;\r\n\r\n    err = dx - dy;\r\n\r\n    while (true) {\r\n        line.push([x0, y0]);\r\n\r\n        if (x0 === x1 && y0 === y1) {\r\n            break;\r\n        }\r\n        \r\n        e2 = 2 * err;\r\n        if (e2 > -dy) {\r\n            err = err - dy;\r\n            x0 = x0 + sx;\r\n        }\r\n        if (e2 < dx) {\r\n            err = err + dx;\r\n            y0 = y0 + sy;\r\n        }\r\n    }\r\n\r\n    return line;\r\n}\r\nexports.interpolate = interpolate;\r\n\r\n\r\n/**\r\n * Given a compressed path, return a new path that has all the segments\r\n * in it interpolated.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} expanded path\r\n */\r\nfunction expandPath(path) {\r\n    var expanded = [],\r\n        len = path.length,\r\n        coord0, coord1,\r\n        interpolated,\r\n        interpolatedLen,\r\n        i, j;\r\n\r\n    if (len < 2) {\r\n        return expanded;\r\n    }\r\n\r\n    for (i = 0; i < len - 1; ++i) {\r\n        coord0 = path[i];\r\n        coord1 = path[i + 1];\r\n\r\n        interpolated = interpolate(coord0[0], coord0[1], coord1[0], coord1[1]);\r\n        interpolatedLen = interpolated.length;\r\n        for (j = 0; j < interpolatedLen - 1; ++j) {\r\n            expanded.push(interpolated[j]);\r\n        }\r\n    }\r\n    expanded.push(path[len - 1]);\r\n\r\n    return expanded;\r\n}\r\nexports.expandPath = expandPath;\r\n\r\n\r\n/**\r\n * Smoothen the give path.\r\n * The original path will not be modified; a new path will be returned.\r\n * @param {PF.Grid} grid\r\n * @param {Array<Array<number>>} path The path\r\n */\r\nfunction smoothenPath(grid, path) {\r\n    var len = path.length,\r\n        x0 = path[0][0],        // path start x\r\n        y0 = path[0][1],        // path start y\r\n        x1 = path[len - 1][0],  // path end x\r\n        y1 = path[len - 1][1],  // path end y\r\n        sx, sy,                 // current start coordinate\r\n        ex, ey,                 // current end coordinate\r\n        newPath,\r\n        i, j, coord, line, testCoord, blocked;\r\n\r\n    sx = x0;\r\n    sy = y0;\r\n    newPath = [[sx, sy]];\r\n\r\n    for (i = 2; i < len; ++i) {\r\n        coord = path[i];\r\n        ex = coord[0];\r\n        ey = coord[1];\r\n        line = interpolate(sx, sy, ex, ey);\r\n\r\n        blocked = false;\r\n        for (j = 1; j < line.length; ++j) {\r\n            testCoord = line[j];\r\n\r\n            if (!grid.isWalkableAt(testCoord[0], testCoord[1])) {\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (blocked) {\r\n            lastValidCoord = path[i - 1];\r\n            newPath.push(lastValidCoord);\r\n            sx = lastValidCoord[0];\r\n            sy = lastValidCoord[1];\r\n        }\r\n    }\r\n    newPath.push([x1, y1]);\r\n\r\n    return newPath;\r\n}\r\nexports.smoothenPath = smoothenPath;\r\n\r\n\r\n/**\r\n * Compress a path, remove redundant nodes without altering the shape\r\n * The original path is not modified\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} The compressed path\r\n */\r\nfunction compressPath(path) {\r\n\r\n    // nothing to compress\r\n    if(path.length < 3) {\r\n        return path;\r\n    }\r\n\r\n    var compressed = [],\r\n        sx = path[0][0], // start x\r\n        sy = path[0][1], // start y\r\n        px = path[1][0], // second point x\r\n        py = path[1][1], // second point y\r\n        dx = px - sx, // direction between the two points\r\n        dy = py - sy, // direction between the two points\r\n        lx, ly,\r\n        ldx, ldy,\r\n        sq, i;\r\n\r\n    // normalize the direction\r\n    sq = Math.sqrt(dx*dx + dy*dy);\r\n    dx /= sq;\r\n    dy /= sq;\r\n\r\n    // start the new path\r\n    compressed.push([sx,sy]);\r\n\r\n    for(i = 2; i < path.length; i++) {\r\n\r\n        // store the last point\r\n        lx = px;\r\n        ly = py;\r\n\r\n        // store the last direction\r\n        ldx = dx;\r\n        ldy = dy;\r\n\r\n        // next point\r\n        px = path[i][0];\r\n        py = path[i][1];\r\n\r\n        // next direction\r\n        dx = px - lx;\r\n        dy = py - ly;\r\n\r\n        // normalize\r\n        sq = Math.sqrt(dx*dx + dy*dy);\r\n        dx /= sq;\r\n        dy /= sq;\r\n\r\n        // if the direction has changed, store the point\r\n        if ( dx !== ldx || dy !== ldy ) {\r\n            compressed.push([lx,ly]);\r\n        }\r\n    }\r\n\r\n    // store the last point\r\n    compressed.push([px,py]);\r\n\r\n    return compressed;\r\n}\r\nexports.compressPath = compressPath;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/core/Util.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/AStarFinder.js":
/*!*************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/AStarFinder.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Heap       = __webpack_require__(/*! heap */ \"./node_modules/heap/index.js\");\r\nvar Util       = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar Heuristic  = __webpack_require__(/*! ../core/Heuristic */ \"./node_modules/pathfinding/src/core/Heuristic.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction AStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    //admissible. It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        // if reached the end position, construct the path and return it\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    openList.push(neighbor);\r\n                    neighbor.opened = true;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    openList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = AStarFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/AStarFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BestFirstFinder.js":
/*!*****************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BestFirstFinder.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var AStarFinder = __webpack_require__(/*! ./AStarFinder */ \"./node_modules/pathfinding/src/finders/AStarFinder.js\");\r\n\r\n/**\r\n * Best-First-Search path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BestFirstFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBestFirstFinder.prototype = new AStarFinder();\r\nBestFirstFinder.prototype.constructor = BestFirstFinder;\r\n\r\nmodule.exports = BestFirstFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmVzdEZpcnN0RmluZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLDRFQUFlO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0IsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmVzdEZpcnN0RmluZGVyLmpzPzU1ZDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEFTdGFyRmluZGVyID0gcmVxdWlyZSgnLi9BU3RhckZpbmRlcicpO1xyXG5cclxuLyoqXHJcbiAqIEJlc3QtRmlyc3QtU2VhcmNoIHBhdGgtZmluZGVyLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMgQVN0YXJGaW5kZXJcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdC5hbGxvd0RpYWdvbmFsIFdoZXRoZXIgZGlhZ29uYWwgbW92ZW1lbnQgaXMgYWxsb3dlZC5cclxuICogICAgIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0LmRvbnRDcm9zc0Nvcm5lcnMgRGlzYWxsb3cgZGlhZ29uYWwgbW92ZW1lbnQgdG91Y2hpbmdcclxuICogICAgIGJsb2NrIGNvcm5lcnMuIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7RGlhZ29uYWxNb3ZlbWVudH0gb3B0LmRpYWdvbmFsTW92ZW1lbnQgQWxsb3dlZCBkaWFnb25hbCBtb3ZlbWVudC5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0LmhldXJpc3RpYyBIZXVyaXN0aWMgZnVuY3Rpb24gdG8gZXN0aW1hdGUgdGhlIGRpc3RhbmNlXHJcbiAqICAgICAoZGVmYXVsdHMgdG8gbWFuaGF0dGFuKS5cclxuICovXHJcbmZ1bmN0aW9uIEJlc3RGaXJzdEZpbmRlcihvcHQpIHtcclxuICAgIEFTdGFyRmluZGVyLmNhbGwodGhpcywgb3B0KTtcclxuXHJcbiAgICB2YXIgb3JpZyA9IHRoaXMuaGV1cmlzdGljO1xyXG4gICAgdGhpcy5oZXVyaXN0aWMgPSBmdW5jdGlvbihkeCwgZHkpIHtcclxuICAgICAgICByZXR1cm4gb3JpZyhkeCwgZHkpICogMTAwMDAwMDtcclxuICAgIH07XHJcbn1cclxuXHJcbkJlc3RGaXJzdEZpbmRlci5wcm90b3R5cGUgPSBuZXcgQVN0YXJGaW5kZXIoKTtcclxuQmVzdEZpcnN0RmluZGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJlc3RGaXJzdEZpbmRlcjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmVzdEZpcnN0RmluZGVyO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BestFirstFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BiAStarFinder.js":
/*!***************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BiAStarFinder.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Heap       = __webpack_require__(/*! heap */ \"./node_modules/heap/index.js\");\r\nvar Util       = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar Heuristic  = __webpack_require__(/*! ../core/Heuristic */ \"./node_modules/pathfinding/src/core/Heuristic.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * A* path-finder.\r\n * based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction BiAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    //When diagonal movement is allowed the manhattan heuristic is not admissible\r\n    //It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var cmp = function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        },\r\n        startOpenList = new Heap(cmp),\r\n        endOpenList = new Heap(cmp),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng,\r\n        BY_START = 1, BY_END = 2;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    // and push it into the start open list\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n    startOpenList.push(startNode);\r\n    startNode.opened = BY_START;\r\n\r\n    // set the `g` and `f` value of the end node to be 0\r\n    // and push it into the open open list\r\n    endNode.g = 0;\r\n    endNode.f = 0;\r\n    endOpenList.push(endNode);\r\n    endNode.opened = BY_END;\r\n\r\n    // while both the open lists are not empty\r\n    while (!startOpenList.empty() && !endOpenList.empty()) {\r\n\r\n        // pop the position of start node which has the minimum `f` value.\r\n        node = startOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_END) {\r\n                return Util.biBacktrace(node, neighbor);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    startOpenList.push(neighbor);\r\n                    neighbor.opened = BY_START;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    startOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n\r\n\r\n        // pop the position of end node which has the minimum `f` value.\r\n        node = endOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_START) {\r\n                return Util.biBacktrace(neighbor, node);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - startX), abs(y - startY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    endOpenList.push(neighbor);\r\n                    neighbor.opened = BY_END;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    endOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiAStarFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BiAStarFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BiBestFirstFinder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BiBestFirstFinder.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var BiAStarFinder = __webpack_require__(/*! ./BiAStarFinder */ \"./node_modules/pathfinding/src/finders/BiAStarFinder.js\");\r\n\r\n/**\r\n * Bi-direcitional Best-First-Search path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BiBestFirstFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBiBestFirstFinder.prototype = new BiAStarFinder();\r\nBiBestFirstFinder.prototype.constructor = BiBestFirstFinder;\r\n\r\nmodule.exports = BiBestFirstFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmlCZXN0Rmlyc3RGaW5kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CLG1CQUFPLENBQUMsZ0ZBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0IsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmlCZXN0Rmlyc3RGaW5kZXIuanM/NDc1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQmlBU3RhckZpbmRlciA9IHJlcXVpcmUoJy4vQmlBU3RhckZpbmRlcicpO1xyXG5cclxuLyoqXHJcbiAqIEJpLWRpcmVjaXRpb25hbCBCZXN0LUZpcnN0LVNlYXJjaCBwYXRoLWZpbmRlci5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBleHRlbmRzIEJpQVN0YXJGaW5kZXJcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdC5hbGxvd0RpYWdvbmFsIFdoZXRoZXIgZGlhZ29uYWwgbW92ZW1lbnQgaXMgYWxsb3dlZC5cclxuICogICAgIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0LmRvbnRDcm9zc0Nvcm5lcnMgRGlzYWxsb3cgZGlhZ29uYWwgbW92ZW1lbnQgdG91Y2hpbmdcclxuICogICAgIGJsb2NrIGNvcm5lcnMuIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7RGlhZ29uYWxNb3ZlbWVudH0gb3B0LmRpYWdvbmFsTW92ZW1lbnQgQWxsb3dlZCBkaWFnb25hbCBtb3ZlbWVudC5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0LmhldXJpc3RpYyBIZXVyaXN0aWMgZnVuY3Rpb24gdG8gZXN0aW1hdGUgdGhlIGRpc3RhbmNlXHJcbiAqICAgICAoZGVmYXVsdHMgdG8gbWFuaGF0dGFuKS5cclxuICovXHJcbmZ1bmN0aW9uIEJpQmVzdEZpcnN0RmluZGVyKG9wdCkge1xyXG4gICAgQmlBU3RhckZpbmRlci5jYWxsKHRoaXMsIG9wdCk7XHJcblxyXG4gICAgdmFyIG9yaWcgPSB0aGlzLmhldXJpc3RpYztcclxuICAgIHRoaXMuaGV1cmlzdGljID0gZnVuY3Rpb24oZHgsIGR5KSB7XHJcbiAgICAgICAgcmV0dXJuIG9yaWcoZHgsIGR5KSAqIDEwMDAwMDA7XHJcbiAgICB9O1xyXG59XHJcblxyXG5CaUJlc3RGaXJzdEZpbmRlci5wcm90b3R5cGUgPSBuZXcgQmlBU3RhckZpbmRlcigpO1xyXG5CaUJlc3RGaXJzdEZpbmRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCaUJlc3RGaXJzdEZpbmRlcjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmlCZXN0Rmlyc3RGaW5kZXI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BiBestFirstFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Util = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Bi-directional Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiBreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        startOpenList = [], endOpenList = [],\r\n        neighbors, neighbor, node,\r\n        diagonalMovement = this.diagonalMovement,\r\n        BY_START = 0, BY_END = 1,\r\n        i, l;\r\n\r\n    // push the start and end nodes into the queues\r\n    startOpenList.push(startNode);\r\n    startNode.opened = true;\r\n    startNode.by = BY_START;\r\n\r\n    endOpenList.push(endNode);\r\n    endNode.opened = true;\r\n    endNode.by = BY_END;\r\n\r\n    // while both the queues are not empty\r\n    while (startOpenList.length && endOpenList.length) {\r\n\r\n        // expand start open list\r\n\r\n        node = startOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                // if this node has been inspected by the reversed search,\r\n                // then a path is found.\r\n                if (neighbor.by === BY_END) {\r\n                    return Util.biBacktrace(node, neighbor);\r\n                }\r\n                continue;\r\n            }\r\n            startOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_START;\r\n        }\r\n\r\n        // expand end open list\r\n\r\n        node = endOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                if (neighbor.by === BY_START) {\r\n                    return Util.biBacktrace(neighbor, node);\r\n                }\r\n                continue;\r\n            }\r\n            endOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_END;\r\n        }\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiBreadthFirstFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmlCcmVhZHRoRmlyc3RGaW5kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLGlFQUFjO0FBQ2pDLHVCQUF1QixtQkFBTyxDQUFDLHlGQUEwQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0JBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxPQUFPO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0JpQnJlYWR0aEZpcnN0RmluZGVyLmpzPzIwMTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFV0aWwgPSByZXF1aXJlKCcuLi9jb3JlL1V0aWwnKTtcclxudmFyIERpYWdvbmFsTW92ZW1lbnQgPSByZXF1aXJlKCcuLi9jb3JlL0RpYWdvbmFsTW92ZW1lbnQnKTtcclxuXHJcbi8qKlxyXG4gKiBCaS1kaXJlY3Rpb25hbCBCcmVhZHRoLUZpcnN0LVNlYXJjaCBwYXRoIGZpbmRlci5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRcclxuICogQHBhcmFtIHtib29sZWFufSBvcHQuYWxsb3dEaWFnb25hbCBXaGV0aGVyIGRpYWdvbmFsIG1vdmVtZW50IGlzIGFsbG93ZWQuXHJcbiAqICAgICBEZXByZWNhdGVkLCB1c2UgZGlhZ29uYWxNb3ZlbWVudCBpbnN0ZWFkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdC5kb250Q3Jvc3NDb3JuZXJzIERpc2FsbG93IGRpYWdvbmFsIG1vdmVtZW50IHRvdWNoaW5nXHJcbiAqICAgICBibG9jayBjb3JuZXJzLiBEZXByZWNhdGVkLCB1c2UgZGlhZ29uYWxNb3ZlbWVudCBpbnN0ZWFkLlxyXG4gKiBAcGFyYW0ge0RpYWdvbmFsTW92ZW1lbnR9IG9wdC5kaWFnb25hbE1vdmVtZW50IEFsbG93ZWQgZGlhZ29uYWwgbW92ZW1lbnQuXHJcbiAqL1xyXG5mdW5jdGlvbiBCaUJyZWFkdGhGaXJzdEZpbmRlcihvcHQpIHtcclxuICAgIG9wdCA9IG9wdCB8fCB7fTtcclxuICAgIHRoaXMuYWxsb3dEaWFnb25hbCA9IG9wdC5hbGxvd0RpYWdvbmFsO1xyXG4gICAgdGhpcy5kb250Q3Jvc3NDb3JuZXJzID0gb3B0LmRvbnRDcm9zc0Nvcm5lcnM7XHJcbiAgICB0aGlzLmRpYWdvbmFsTW92ZW1lbnQgPSBvcHQuZGlhZ29uYWxNb3ZlbWVudDtcclxuXHJcbiAgICBpZiAoIXRoaXMuZGlhZ29uYWxNb3ZlbWVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5hbGxvd0RpYWdvbmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlhZ29uYWxNb3ZlbWVudCA9IERpYWdvbmFsTW92ZW1lbnQuTmV2ZXI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZG9udENyb3NzQ29ybmVycykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFnb25hbE1vdmVtZW50ID0gRGlhZ29uYWxNb3ZlbWVudC5Pbmx5V2hlbk5vT2JzdGFjbGVzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFnb25hbE1vdmVtZW50ID0gRGlhZ29uYWxNb3ZlbWVudC5JZkF0TW9zdE9uZU9ic3RhY2xlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEZpbmQgYW5kIHJldHVybiB0aGUgdGhlIHBhdGguXHJcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fSBUaGUgcGF0aCwgaW5jbHVkaW5nIGJvdGggc3RhcnQgYW5kXHJcbiAqICAgICBlbmQgcG9zaXRpb25zLlxyXG4gKi9cclxuQmlCcmVhZHRoRmlyc3RGaW5kZXIucHJvdG90eXBlLmZpbmRQYXRoID0gZnVuY3Rpb24oc3RhcnRYLCBzdGFydFksIGVuZFgsIGVuZFksIGdyaWQpIHtcclxuICAgIHZhciBzdGFydE5vZGUgPSBncmlkLmdldE5vZGVBdChzdGFydFgsIHN0YXJ0WSksXHJcbiAgICAgICAgZW5kTm9kZSA9IGdyaWQuZ2V0Tm9kZUF0KGVuZFgsIGVuZFkpLFxyXG4gICAgICAgIHN0YXJ0T3Blbkxpc3QgPSBbXSwgZW5kT3Blbkxpc3QgPSBbXSxcclxuICAgICAgICBuZWlnaGJvcnMsIG5laWdoYm9yLCBub2RlLFxyXG4gICAgICAgIGRpYWdvbmFsTW92ZW1lbnQgPSB0aGlzLmRpYWdvbmFsTW92ZW1lbnQsXHJcbiAgICAgICAgQllfU1RBUlQgPSAwLCBCWV9FTkQgPSAxLFxyXG4gICAgICAgIGksIGw7XHJcblxyXG4gICAgLy8gcHVzaCB0aGUgc3RhcnQgYW5kIGVuZCBub2RlcyBpbnRvIHRoZSBxdWV1ZXNcclxuICAgIHN0YXJ0T3Blbkxpc3QucHVzaChzdGFydE5vZGUpO1xyXG4gICAgc3RhcnROb2RlLm9wZW5lZCA9IHRydWU7XHJcbiAgICBzdGFydE5vZGUuYnkgPSBCWV9TVEFSVDtcclxuXHJcbiAgICBlbmRPcGVuTGlzdC5wdXNoKGVuZE5vZGUpO1xyXG4gICAgZW5kTm9kZS5vcGVuZWQgPSB0cnVlO1xyXG4gICAgZW5kTm9kZS5ieSA9IEJZX0VORDtcclxuXHJcbiAgICAvLyB3aGlsZSBib3RoIHRoZSBxdWV1ZXMgYXJlIG5vdCBlbXB0eVxyXG4gICAgd2hpbGUgKHN0YXJ0T3Blbkxpc3QubGVuZ3RoICYmIGVuZE9wZW5MaXN0Lmxlbmd0aCkge1xyXG5cclxuICAgICAgICAvLyBleHBhbmQgc3RhcnQgb3BlbiBsaXN0XHJcblxyXG4gICAgICAgIG5vZGUgPSBzdGFydE9wZW5MaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgbm9kZS5jbG9zZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICBuZWlnaGJvcnMgPSBncmlkLmdldE5laWdoYm9ycyhub2RlLCBkaWFnb25hbE1vdmVtZW50KTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gbmVpZ2hib3JzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICBuZWlnaGJvciA9IG5laWdoYm9yc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZWlnaGJvci5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuZWlnaGJvci5vcGVuZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgbm9kZSBoYXMgYmVlbiBpbnNwZWN0ZWQgYnkgdGhlIHJldmVyc2VkIHNlYXJjaCxcclxuICAgICAgICAgICAgICAgIC8vIHRoZW4gYSBwYXRoIGlzIGZvdW5kLlxyXG4gICAgICAgICAgICAgICAgaWYgKG5laWdoYm9yLmJ5ID09PSBCWV9FTkQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbC5iaUJhY2t0cmFjZShub2RlLCBuZWlnaGJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGFydE9wZW5MaXN0LnB1c2gobmVpZ2hib3IpO1xyXG4gICAgICAgICAgICBuZWlnaGJvci5wYXJlbnQgPSBub2RlO1xyXG4gICAgICAgICAgICBuZWlnaGJvci5vcGVuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBuZWlnaGJvci5ieSA9IEJZX1NUQVJUO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZXhwYW5kIGVuZCBvcGVuIGxpc3RcclxuXHJcbiAgICAgICAgbm9kZSA9IGVuZE9wZW5MaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgbm9kZS5jbG9zZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICBuZWlnaGJvcnMgPSBncmlkLmdldE5laWdoYm9ycyhub2RlLCBkaWFnb25hbE1vdmVtZW50KTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gbmVpZ2hib3JzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICBuZWlnaGJvciA9IG5laWdoYm9yc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZWlnaGJvci5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuZWlnaGJvci5vcGVuZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZWlnaGJvci5ieSA9PT0gQllfU1RBUlQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbC5iaUJhY2t0cmFjZShuZWlnaGJvciwgbm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbmRPcGVuTGlzdC5wdXNoKG5laWdoYm9yKTtcclxuICAgICAgICAgICAgbmVpZ2hib3IucGFyZW50ID0gbm9kZTtcclxuICAgICAgICAgICAgbmVpZ2hib3Iub3BlbmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgbmVpZ2hib3IuYnkgPSBCWV9FTkQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGZhaWwgdG8gZmluZCB0aGUgcGF0aFxyXG4gICAgcmV0dXJuIFtdO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCaUJyZWFkdGhGaXJzdEZpbmRlcjtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BiDijkstraFinder.js":
/*!******************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BiDijkstraFinder.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var BiAStarFinder = __webpack_require__(/*! ./BiAStarFinder */ \"./node_modules/pathfinding/src/finders/BiAStarFinder.js\");\r\n\r\n/**\r\n * Bi-directional Dijkstra path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiDijkstraFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nBiDijkstraFinder.prototype = new BiAStarFinder();\r\nBiDijkstraFinder.prototype.constructor = BiDijkstraFinder;\r\n\r\nmodule.exports = BiDijkstraFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmlEaWprc3RyYUZpbmRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0IsbUJBQU8sQ0FBQyxnRkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0JpRGlqa3N0cmFGaW5kZXIuanM/NDlhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQmlBU3RhckZpbmRlciA9IHJlcXVpcmUoJy4vQmlBU3RhckZpbmRlcicpO1xyXG5cclxuLyoqXHJcbiAqIEJpLWRpcmVjdGlvbmFsIERpamtzdHJhIHBhdGgtZmluZGVyLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMgQmlBU3RhckZpbmRlclxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0XHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0LmFsbG93RGlhZ29uYWwgV2hldGhlciBkaWFnb25hbCBtb3ZlbWVudCBpcyBhbGxvd2VkLlxyXG4gKiAgICAgRGVwcmVjYXRlZCwgdXNlIGRpYWdvbmFsTW92ZW1lbnQgaW5zdGVhZC5cclxuICogQHBhcmFtIHtib29sZWFufSBvcHQuZG9udENyb3NzQ29ybmVycyBEaXNhbGxvdyBkaWFnb25hbCBtb3ZlbWVudCB0b3VjaGluZ1xyXG4gKiAgICAgYmxvY2sgY29ybmVycy4gRGVwcmVjYXRlZCwgdXNlIGRpYWdvbmFsTW92ZW1lbnQgaW5zdGVhZC5cclxuICogQHBhcmFtIHtEaWFnb25hbE1vdmVtZW50fSBvcHQuZGlhZ29uYWxNb3ZlbWVudCBBbGxvd2VkIGRpYWdvbmFsIG1vdmVtZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gQmlEaWprc3RyYUZpbmRlcihvcHQpIHtcclxuICAgIEJpQVN0YXJGaW5kZXIuY2FsbCh0aGlzLCBvcHQpO1xyXG4gICAgdGhpcy5oZXVyaXN0aWMgPSBmdW5jdGlvbihkeCwgZHkpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbn1cclxuXHJcbkJpRGlqa3N0cmFGaW5kZXIucHJvdG90eXBlID0gbmV3IEJpQVN0YXJGaW5kZXIoKTtcclxuQmlEaWprc3RyYUZpbmRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCaURpamtzdHJhRmluZGVyO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCaURpamtzdHJhRmluZGVyO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BiDijkstraFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BreadthFirstFinder.js":
/*!********************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BreadthFirstFinder.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Util = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = [],\r\n        diagonalMovement = this.diagonalMovement,\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        neighbors, neighbor, node, i, l;\r\n\r\n    // push the start pos into the queue\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the queue is not empty\r\n    while (openList.length) {\r\n        // take the front node from the queue\r\n        node = openList.shift();\r\n        node.closed = true;\r\n\r\n        // reached the end position\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            // skip this neighbor if it has been inspected before\r\n            if (neighbor.closed || neighbor.opened) {\r\n                continue;\r\n            }\r\n\r\n            openList.push(neighbor);\r\n            neighbor.opened = true;\r\n            neighbor.parent = node;\r\n        }\r\n    }\r\n    \r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BreadthFirstFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQnJlYWR0aEZpcnN0RmluZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyxpRUFBYztBQUNqQyx1QkFBdUIsbUJBQU8sQ0FBQyx5RkFBMEI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0JyZWFkdGhGaXJzdEZpbmRlci5qcz81OGM0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBVdGlsID0gcmVxdWlyZSgnLi4vY29yZS9VdGlsJyk7XHJcbnZhciBEaWFnb25hbE1vdmVtZW50ID0gcmVxdWlyZSgnLi4vY29yZS9EaWFnb25hbE1vdmVtZW50Jyk7XHJcblxyXG4vKipcclxuICogQnJlYWR0aC1GaXJzdC1TZWFyY2ggcGF0aCBmaW5kZXIuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0XHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0LmFsbG93RGlhZ29uYWwgV2hldGhlciBkaWFnb25hbCBtb3ZlbWVudCBpcyBhbGxvd2VkLlxyXG4gKiAgICAgRGVwcmVjYXRlZCwgdXNlIGRpYWdvbmFsTW92ZW1lbnQgaW5zdGVhZC5cclxuICogQHBhcmFtIHtib29sZWFufSBvcHQuZG9udENyb3NzQ29ybmVycyBEaXNhbGxvdyBkaWFnb25hbCBtb3ZlbWVudCB0b3VjaGluZ1xyXG4gKiAgICAgYmxvY2sgY29ybmVycy4gRGVwcmVjYXRlZCwgdXNlIGRpYWdvbmFsTW92ZW1lbnQgaW5zdGVhZC5cclxuICogQHBhcmFtIHtEaWFnb25hbE1vdmVtZW50fSBvcHQuZGlhZ29uYWxNb3ZlbWVudCBBbGxvd2VkIGRpYWdvbmFsIG1vdmVtZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gQnJlYWR0aEZpcnN0RmluZGVyKG9wdCkge1xyXG4gICAgb3B0ID0gb3B0IHx8IHt9O1xyXG4gICAgdGhpcy5hbGxvd0RpYWdvbmFsID0gb3B0LmFsbG93RGlhZ29uYWw7XHJcbiAgICB0aGlzLmRvbnRDcm9zc0Nvcm5lcnMgPSBvcHQuZG9udENyb3NzQ29ybmVycztcclxuICAgIHRoaXMuZGlhZ29uYWxNb3ZlbWVudCA9IG9wdC5kaWFnb25hbE1vdmVtZW50O1xyXG5cclxuICAgIGlmICghdGhpcy5kaWFnb25hbE1vdmVtZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFsbG93RGlhZ29uYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5kaWFnb25hbE1vdmVtZW50ID0gRGlhZ29uYWxNb3ZlbWVudC5OZXZlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kb250Q3Jvc3NDb3JuZXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWdvbmFsTW92ZW1lbnQgPSBEaWFnb25hbE1vdmVtZW50Lk9ubHlXaGVuTm9PYnN0YWNsZXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWdvbmFsTW92ZW1lbnQgPSBEaWFnb25hbE1vdmVtZW50LklmQXRNb3N0T25lT2JzdGFjbGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaW5kIGFuZCByZXR1cm4gdGhlIHRoZSBwYXRoLlxyXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gVGhlIHBhdGgsIGluY2x1ZGluZyBib3RoIHN0YXJ0IGFuZFxyXG4gKiAgICAgZW5kIHBvc2l0aW9ucy5cclxuICovXHJcbkJyZWFkdGhGaXJzdEZpbmRlci5wcm90b3R5cGUuZmluZFBhdGggPSBmdW5jdGlvbihzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSwgZ3JpZCkge1xyXG4gICAgdmFyIG9wZW5MaXN0ID0gW10sXHJcbiAgICAgICAgZGlhZ29uYWxNb3ZlbWVudCA9IHRoaXMuZGlhZ29uYWxNb3ZlbWVudCxcclxuICAgICAgICBzdGFydE5vZGUgPSBncmlkLmdldE5vZGVBdChzdGFydFgsIHN0YXJ0WSksXHJcbiAgICAgICAgZW5kTm9kZSA9IGdyaWQuZ2V0Tm9kZUF0KGVuZFgsIGVuZFkpLFxyXG4gICAgICAgIG5laWdoYm9ycywgbmVpZ2hib3IsIG5vZGUsIGksIGw7XHJcblxyXG4gICAgLy8gcHVzaCB0aGUgc3RhcnQgcG9zIGludG8gdGhlIHF1ZXVlXHJcbiAgICBvcGVuTGlzdC5wdXNoKHN0YXJ0Tm9kZSk7XHJcbiAgICBzdGFydE5vZGUub3BlbmVkID0gdHJ1ZTtcclxuXHJcbiAgICAvLyB3aGlsZSB0aGUgcXVldWUgaXMgbm90IGVtcHR5XHJcbiAgICB3aGlsZSAob3Blbkxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gdGFrZSB0aGUgZnJvbnQgbm9kZSBmcm9tIHRoZSBxdWV1ZVxyXG4gICAgICAgIG5vZGUgPSBvcGVuTGlzdC5zaGlmdCgpO1xyXG4gICAgICAgIG5vZGUuY2xvc2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gcmVhY2hlZCB0aGUgZW5kIHBvc2l0aW9uXHJcbiAgICAgICAgaWYgKG5vZGUgPT09IGVuZE5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFV0aWwuYmFja3RyYWNlKGVuZE5vZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbmVpZ2hib3JzID0gZ3JpZC5nZXROZWlnaGJvcnMobm9kZSwgZGlhZ29uYWxNb3ZlbWVudCk7XHJcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IG5laWdoYm9ycy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgbmVpZ2hib3IgPSBuZWlnaGJvcnNbaV07XHJcblxyXG4gICAgICAgICAgICAvLyBza2lwIHRoaXMgbmVpZ2hib3IgaWYgaXQgaGFzIGJlZW4gaW5zcGVjdGVkIGJlZm9yZVxyXG4gICAgICAgICAgICBpZiAobmVpZ2hib3IuY2xvc2VkIHx8IG5laWdoYm9yLm9wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9wZW5MaXN0LnB1c2gobmVpZ2hib3IpO1xyXG4gICAgICAgICAgICBuZWlnaGJvci5vcGVuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBuZWlnaGJvci5wYXJlbnQgPSBub2RlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gZmFpbCB0byBmaW5kIHRoZSBwYXRoXHJcbiAgICByZXR1cm4gW107XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJyZWFkdGhGaXJzdEZpbmRlcjtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BreadthFirstFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/DijkstraFinder.js":
/*!****************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/DijkstraFinder.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var AStarFinder = __webpack_require__(/*! ./AStarFinder */ \"./node_modules/pathfinding/src/finders/AStarFinder.js\");\r\n\r\n/**\r\n * Dijkstra path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction DijkstraFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nDijkstraFinder.prototype = new AStarFinder();\r\nDijkstraFinder.prototype.constructor = DijkstraFinder;\r\n\r\nmodule.exports = DijkstraFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvRGlqa3N0cmFGaW5kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLG1CQUFPLENBQUMsNEVBQWU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0RpamtzdHJhRmluZGVyLmpzP2E1OTEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEFTdGFyRmluZGVyID0gcmVxdWlyZSgnLi9BU3RhckZpbmRlcicpO1xyXG5cclxuLyoqXHJcbiAqIERpamtzdHJhIHBhdGgtZmluZGVyLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMgQVN0YXJGaW5kZXJcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdC5hbGxvd0RpYWdvbmFsIFdoZXRoZXIgZGlhZ29uYWwgbW92ZW1lbnQgaXMgYWxsb3dlZC5cclxuICogICAgIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0LmRvbnRDcm9zc0Nvcm5lcnMgRGlzYWxsb3cgZGlhZ29uYWwgbW92ZW1lbnQgdG91Y2hpbmdcclxuICogICAgIGJsb2NrIGNvcm5lcnMuIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7RGlhZ29uYWxNb3ZlbWVudH0gb3B0LmRpYWdvbmFsTW92ZW1lbnQgQWxsb3dlZCBkaWFnb25hbCBtb3ZlbWVudC5cclxuICovXHJcbmZ1bmN0aW9uIERpamtzdHJhRmluZGVyKG9wdCkge1xyXG4gICAgQVN0YXJGaW5kZXIuY2FsbCh0aGlzLCBvcHQpO1xyXG4gICAgdGhpcy5oZXVyaXN0aWMgPSBmdW5jdGlvbihkeCwgZHkpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbn1cclxuXHJcbkRpamtzdHJhRmluZGVyLnByb3RvdHlwZSA9IG5ldyBBU3RhckZpbmRlcigpO1xyXG5EaWprc3RyYUZpbmRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEaWprc3RyYUZpbmRlcjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRGlqa3N0cmFGaW5kZXI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/DijkstraFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/IDAStarFinder.js":
/*!***************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/IDAStarFinder.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Util       = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar Heuristic  = __webpack_require__(/*! ../core/Heuristic */ \"./node_modules/pathfinding/src/core/Heuristic.js\");\r\nvar Node       = __webpack_require__(/*! ../core/Node */ \"./node_modules/pathfinding/src/core/Node.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Iterative Deeping A Star (IDA*) path-finder.\r\n *\r\n * Recursion based on:\r\n *   http://www.apl.jhu.edu/~hall/AI-Programming/IDA-Star.html\r\n *\r\n * Path retracing based on:\r\n *  V. Nageshwara Rao, Vipin Kumar and K. Ramesh\r\n *  \"A Parallel Implementation of Iterative-Deeping-A*\", January 1987.\r\n *  ftp://ftp.cs.utexas.edu/.snapshot/hourly.1/pub/AI-Lab/tech-reports/UT-AI-TR-87-46.pdf\r\n *\r\n * @author Gerard Meier (www.gerardmeier.com)\r\n *\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n * @param {boolean} opt.trackRecursion Whether to track recursion for\r\n *     statistical purposes.\r\n * @param {number} opt.timeLimit Maximum execution time. Use <= 0 for infinite.\r\n */\r\nfunction IDAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.trackRecursion = opt.trackRecursion || false;\r\n    this.timeLimit = opt.timeLimit || Infinity; // Default: no time limit.\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    // admissible, it should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path. When an empty array is returned, either\r\n * no path is possible, or the maximum execution time is reached.\r\n *\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nIDAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    // Used for statistics:\r\n    var nodesVisited = 0;\r\n\r\n    // Execution time limitation:\r\n    var startTime = new Date().getTime();\r\n\r\n    // Heuristic helper:\r\n    var h = function(a, b) {\r\n        return this.heuristic(Math.abs(b.x - a.x), Math.abs(b.y - a.y));\r\n    }.bind(this);\r\n\r\n    // Step cost from a to b:\r\n    var cost = function(a, b) {\r\n        return (a.x === b.x || a.y === b.y) ? 1 : Math.SQRT2;\r\n    };\r\n\r\n    /**\r\n     * IDA* search implementation.\r\n     *\r\n     * @param {Node} The node currently expanding from.\r\n     * @param {number} Cost to reach the given node.\r\n     * @param {number} Maximum search depth (cut-off value).\r\n     * @param {Array<Array<number>>} The found route.\r\n     * @param {number} Recursion depth.\r\n     *\r\n     * @return {Object} either a number with the new optimal cut-off depth,\r\n     * or a valid node instance, in which case a path was found.\r\n     */\r\n    var search = function(node, g, cutoff, route, depth) {\r\n        nodesVisited++;\r\n\r\n        // Enforce timelimit:\r\n        if (this.timeLimit > 0 &&\r\n            new Date().getTime() - startTime > this.timeLimit * 1000) {\r\n            // Enforced as \"path-not-found\".\r\n            return Infinity;\r\n        }\r\n\r\n        var f = g + h(node, end) * this.weight;\r\n\r\n        // We've searched too deep for this iteration.\r\n        if (f > cutoff) {\r\n            return f;\r\n        }\r\n\r\n        if (node == end) {\r\n            route[depth] = [node.x, node.y];\r\n            return node;\r\n        }\r\n\r\n        var min, t, k, neighbour;\r\n\r\n        var neighbours = grid.getNeighbors(node, this.diagonalMovement);\r\n\r\n        // Sort the neighbours, gives nicer paths. But, this deviates\r\n        // from the original algorithm - so I left it out.\r\n        //neighbours.sort(function(a, b){\r\n        //    return h(a, end) - h(b, end);\r\n        //});\r\n\r\n        \r\n        /*jshint -W084 *///Disable warning: Expected a conditional expression and instead saw an assignment\r\n        for (k = 0, min = Infinity; neighbour = neighbours[k]; ++k) {\r\n        /*jshint +W084 *///Enable warning: Expected a conditional expression and instead saw an assignment\r\n            if (this.trackRecursion) {\r\n                // Retain a copy for visualisation. Due to recursion, this\r\n                // node may be part of other paths too.\r\n                neighbour.retainCount = neighbour.retainCount + 1 || 1;\r\n\r\n                if(neighbour.tested !== true) {\r\n                    neighbour.tested = true;\r\n                }\r\n            }\r\n\r\n            t = search(neighbour, g + cost(node, neighbour), cutoff, route, depth + 1);\r\n\r\n            if (t instanceof Node) {\r\n                route[depth] = [node.x, node.y];\r\n\r\n                // For a typical A* linked list, this would work:\r\n                // neighbour.parent = node;\r\n                return t;\r\n            }\r\n\r\n            // Decrement count, then determine whether it's actually closed.\r\n            if (this.trackRecursion && (--neighbour.retainCount) === 0) {\r\n                neighbour.tested = false;\r\n            }\r\n\r\n            if (t < min) {\r\n                min = t;\r\n            }\r\n        }\r\n\r\n        return min;\r\n\r\n    }.bind(this);\r\n\r\n    // Node instance lookups:\r\n    var start = grid.getNodeAt(startX, startY);\r\n    var end   = grid.getNodeAt(endX, endY);\r\n\r\n    // Initial search depth, given the typical heuristic contraints,\r\n    // there should be no cheaper route possible.\r\n    var cutOff = h(start, end);\r\n\r\n    var j, route, t;\r\n\r\n    // With an overflow protection.\r\n    for (j = 0; true; ++j) {\r\n\r\n        route = [];\r\n\r\n        // Search till cut-off depth:\r\n        t = search(start, 0, cutOff, route, 0);\r\n\r\n        // Route not possible, or not found in time limit.\r\n        if (t === Infinity) {\r\n            return [];\r\n        }\r\n\r\n        // If t is a node, it's also the end node. Route is now\r\n        // populated with a valid path to the end node.\r\n        if (t instanceof Node) {\r\n            return route;\r\n        }\r\n\r\n        // Try again, this time with a deeper cut-off. The t score\r\n        // is the closest we got to the end node.\r\n        cutOff = t;\r\n    }\r\n\r\n    // This _should_ never to be reached.\r\n    return [];\r\n};\r\n\r\nmodule.exports = IDAStarFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/IDAStarFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js":
/*!*************************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = __webpack_require__(/*! ./JumpPointFinderBase */ \"./node_modules/pathfinding/src/finders/JumpPointFinderBase.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which always moves\r\n * diagonally irrespective of the number of obstacles.\r\n */\r\nfunction JPFAlwaysMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFAlwaysMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFAlwaysMoveDiagonally.prototype.constructor = JPFAlwaysMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y + dy)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x + 1, y)) {\r\n                    neighbors.push([x + 1, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x - 1, y)) {\r\n                    neighbors.push([x - 1, y + dy]);\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y + 1)) {\r\n                    neighbors.push([x + dx, y + 1]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y - 1)) {\r\n                    neighbors.push([x + dx, y - 1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Always);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFAlwaysMoveDiagonally;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = __webpack_require__(/*! ./JumpPointFinderBase */ \"./node_modules/pathfinding/src/finders/JumpPointFinderBase.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there is at most one obstacle.\r\n */\r\nfunction JPFMoveDiagonallyIfAtMostOneObstacle(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype.constructor = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) || grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) || grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (!grid.isWalkableAt(x + 1, y)) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x - 1, y)) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (!grid.isWalkableAt(x, y + 1)) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x, y - 1)) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.IfAtMostOneObstacle);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js":
/*!********************************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = __webpack_require__(/*! ./JumpPointFinderBase */ \"./node_modules/pathfinding/src/finders/JumpPointFinderBase.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there are no obstacles.\r\n */\r\nfunction JPFMoveDiagonallyIfNoObstacles(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfNoObstacles.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfNoObstacles.prototype.constructor = JPFMoveDiagonallyIfNoObstacles;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        // if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            // (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            // return [x, y];\r\n        // }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if (dx !== 0) {\r\n            if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n                (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n                (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n                return [x, y];\r\n            }\r\n            // When moving vertically, must check for horizontal jump points\r\n            // if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n                // return [x, y];\r\n            // }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            var isNextWalkable;\r\n            if (dx !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x + dx, y);\r\n                var isTopWalkable = grid.isWalkableAt(x, y + 1);\r\n                var isBottomWalkable = grid.isWalkableAt(x, y - 1);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (isTopWalkable) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (isBottomWalkable) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n                if (isTopWalkable) {\r\n                    neighbors.push([x, y + 1]);\r\n                }\r\n                if (isBottomWalkable) {\r\n                    neighbors.push([x, y - 1]);\r\n                }\r\n            }\r\n            else if (dy !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x, y + dy);\r\n                var isRightWalkable = grid.isWalkableAt(x + 1, y);\r\n                var isLeftWalkable = grid.isWalkableAt(x - 1, y);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (isRightWalkable) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (isLeftWalkable) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n                if (isRightWalkable) {\r\n                    neighbors.push([x + 1, y]);\r\n                }\r\n                if (isLeftWalkable) {\r\n                    neighbors.push([x - 1, y]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.OnlyWhenNoObstacles);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfNoObstacles;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSlBGTW92ZURpYWdvbmFsbHlJZk5vT2JzdGFjbGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixtQkFBTyxDQUFDLDRGQUF1QjtBQUN6RCx1QkFBdUIsbUJBQU8sQ0FBQyx5RkFBMEI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0JBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxPQUFPO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSlBGTW92ZURpYWdvbmFsbHlJZk5vT2JzdGFjbGVzLmpzPzAwMjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBhdXRob3IgaW1vciAvIGh0dHBzOi8vZ2l0aHViLmNvbS9pbW9yXHJcbiAqL1xyXG52YXIgSnVtcFBvaW50RmluZGVyQmFzZSA9IHJlcXVpcmUoJy4vSnVtcFBvaW50RmluZGVyQmFzZScpO1xyXG52YXIgRGlhZ29uYWxNb3ZlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvRGlhZ29uYWxNb3ZlbWVudCcpO1xyXG5cclxuLyoqXHJcbiAqIFBhdGggZmluZGVyIHVzaW5nIHRoZSBKdW1wIFBvaW50IFNlYXJjaCBhbGdvcml0aG0gd2hpY2ggbW92ZXNcclxuICogZGlhZ29uYWxseSBvbmx5IHdoZW4gdGhlcmUgYXJlIG5vIG9ic3RhY2xlcy5cclxuICovXHJcbmZ1bmN0aW9uIEpQRk1vdmVEaWFnb25hbGx5SWZOb09ic3RhY2xlcyhvcHQpIHtcclxuICAgIEp1bXBQb2ludEZpbmRlckJhc2UuY2FsbCh0aGlzLCBvcHQpO1xyXG59XHJcblxyXG5KUEZNb3ZlRGlhZ29uYWxseUlmTm9PYnN0YWNsZXMucHJvdG90eXBlID0gbmV3IEp1bXBQb2ludEZpbmRlckJhc2UoKTtcclxuSlBGTW92ZURpYWdvbmFsbHlJZk5vT2JzdGFjbGVzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEpQRk1vdmVEaWFnb25hbGx5SWZOb09ic3RhY2xlcztcclxuXHJcbi8qKlxyXG4gKiBTZWFyY2ggcmVjdXJzaXZlbHkgaW4gdGhlIGRpcmVjdGlvbiAocGFyZW50IC0+IGNoaWxkKSwgc3RvcHBpbmcgb25seSB3aGVuIGFcclxuICoganVtcCBwb2ludCBpcyBmb3VuZC5cclxuICogQHByb3RlY3RlZFxyXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gVGhlIHgsIHkgY29vcmRpbmF0ZSBvZiB0aGUganVtcCBwb2ludFxyXG4gKiAgICAgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXHJcbiAqL1xyXG5KUEZNb3ZlRGlhZ29uYWxseUlmTm9PYnN0YWNsZXMucHJvdG90eXBlLl9qdW1wID0gZnVuY3Rpb24oeCwgeSwgcHgsIHB5KSB7XHJcbiAgICB2YXIgZ3JpZCA9IHRoaXMuZ3JpZCxcclxuICAgICAgICBkeCA9IHggLSBweCwgZHkgPSB5IC0gcHk7XHJcblxyXG4gICAgaWYgKCFncmlkLmlzV2Fsa2FibGVBdCh4LCB5KSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHRoaXMudHJhY2tKdW1wUmVjdXJzaW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgZ3JpZC5nZXROb2RlQXQoeCwgeSkudGVzdGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZ3JpZC5nZXROb2RlQXQoeCwgeSkgPT09IHRoaXMuZW5kTm9kZSkge1xyXG4gICAgICAgIHJldHVybiBbeCwgeV07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2hlY2sgZm9yIGZvcmNlZCBuZWlnaGJvcnNcclxuICAgIC8vIGFsb25nIHRoZSBkaWFnb25hbFxyXG4gICAgaWYgKGR4ICE9PSAwICYmIGR5ICE9PSAwKSB7XHJcbiAgICAgICAgLy8gaWYgKChncmlkLmlzV2Fsa2FibGVBdCh4IC0gZHgsIHkgKyBkeSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHggLSBkeCwgeSkpIHx8XHJcbiAgICAgICAgICAgIC8vIChncmlkLmlzV2Fsa2FibGVBdCh4ICsgZHgsIHkgLSBkeSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgLSBkeSkpKSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBbeCwgeV07XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIHdoZW4gbW92aW5nIGRpYWdvbmFsbHksIG11c3QgY2hlY2sgZm9yIHZlcnRpY2FsL2hvcml6b250YWwganVtcCBwb2ludHNcclxuICAgICAgICBpZiAodGhpcy5fanVtcCh4ICsgZHgsIHksIHgsIHkpIHx8IHRoaXMuX2p1bXAoeCwgeSArIGR5LCB4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGhvcml6b250YWxseS92ZXJ0aWNhbGx5XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoZHggIT09IDApIHtcclxuICAgICAgICAgICAgaWYgKChncmlkLmlzV2Fsa2FibGVBdCh4LCB5IC0gMSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHggLSBkeCwgeSAtIDEpKSB8fFxyXG4gICAgICAgICAgICAgICAgKGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgKyAxKSAmJiAhZ3JpZC5pc1dhbGthYmxlQXQoeCAtIGR4LCB5ICsgMSkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGR5ICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICgoZ3JpZC5pc1dhbGthYmxlQXQoeCAtIDEsIHkpICYmICFncmlkLmlzV2Fsa2FibGVBdCh4IC0gMSwgeSAtIGR5KSkgfHxcclxuICAgICAgICAgICAgICAgIChncmlkLmlzV2Fsa2FibGVBdCh4ICsgMSwgeSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHggKyAxLCB5IC0gZHkpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXaGVuIG1vdmluZyB2ZXJ0aWNhbGx5LCBtdXN0IGNoZWNrIGZvciBob3Jpem9udGFsIGp1bXAgcG9pbnRzXHJcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLl9qdW1wKHggKyAxLCB5LCB4LCB5KSB8fCB0aGlzLl9qdW1wKHggLSAxLCB5LCB4LCB5KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIFt4LCB5XTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBtb3ZpbmcgZGlhZ29uYWxseSwgbXVzdCBtYWtlIHN1cmUgb25lIG9mIHRoZSB2ZXJ0aWNhbC9ob3Jpem9udGFsXHJcbiAgICAvLyBuZWlnaGJvcnMgaXMgb3BlbiB0byBhbGxvdyB0aGUgcGF0aFxyXG4gICAgaWYgKGdyaWQuaXNXYWxrYWJsZUF0KHggKyBkeCwgeSkgJiYgZ3JpZC5pc1dhbGthYmxlQXQoeCwgeSArIGR5KSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9qdW1wKHggKyBkeCwgeSArIGR5LCB4LCB5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogRmluZCB0aGUgbmVpZ2hib3JzIGZvciB0aGUgZ2l2ZW4gbm9kZS4gSWYgdGhlIG5vZGUgaGFzIGEgcGFyZW50LFxyXG4gKiBwcnVuZSB0aGUgbmVpZ2hib3JzIGJhc2VkIG9uIHRoZSBqdW1wIHBvaW50IHNlYXJjaCBhbGdvcml0aG0sIG90aGVyd2lzZVxyXG4gKiByZXR1cm4gYWxsIGF2YWlsYWJsZSBuZWlnaGJvcnMuXHJcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fSBUaGUgbmVpZ2hib3JzIGZvdW5kLlxyXG4gKi9cclxuSlBGTW92ZURpYWdvbmFsbHlJZk5vT2JzdGFjbGVzLnByb3RvdHlwZS5fZmluZE5laWdoYm9ycyA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCxcclxuICAgICAgICB4ID0gbm9kZS54LCB5ID0gbm9kZS55LFxyXG4gICAgICAgIGdyaWQgPSB0aGlzLmdyaWQsXHJcbiAgICAgICAgcHgsIHB5LCBueCwgbnksIGR4LCBkeSxcclxuICAgICAgICBuZWlnaGJvcnMgPSBbXSwgbmVpZ2hib3JOb2RlcywgbmVpZ2hib3JOb2RlLCBpLCBsO1xyXG5cclxuICAgIC8vIGRpcmVjdGVkIHBydW5pbmc6IGNhbiBpZ25vcmUgbW9zdCBuZWlnaGJvcnMsIHVubGVzcyBmb3JjZWQuXHJcbiAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgcHggPSBwYXJlbnQueDtcclxuICAgICAgICBweSA9IHBhcmVudC55O1xyXG4gICAgICAgIC8vIGdldCB0aGUgbm9ybWFsaXplZCBkaXJlY3Rpb24gb2YgdHJhdmVsXHJcbiAgICAgICAgZHggPSAoeCAtIHB4KSAvIE1hdGgubWF4KE1hdGguYWJzKHggLSBweCksIDEpO1xyXG4gICAgICAgIGR5ID0gKHkgLSBweSkgLyBNYXRoLm1heChNYXRoLmFicyh5IC0gcHkpLCAxKTtcclxuXHJcbiAgICAgICAgLy8gc2VhcmNoIGRpYWdvbmFsbHlcclxuICAgICAgICBpZiAoZHggIT09IDAgJiYgZHkgIT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgKyBkeSkpIHtcclxuICAgICAgICAgICAgICAgIG5laWdoYm9ycy5wdXNoKFt4LCB5ICsgZHldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZ3JpZC5pc1dhbGthYmxlQXQoeCArIGR4LCB5KSkge1xyXG4gICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3ggKyBkeCwgeV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChncmlkLmlzV2Fsa2FibGVBdCh4LCB5ICsgZHkpICYmIGdyaWQuaXNXYWxrYWJsZUF0KHggKyBkeCwgeSkpIHtcclxuICAgICAgICAgICAgICAgIG5laWdoYm9ycy5wdXNoKFt4ICsgZHgsIHkgKyBkeV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNlYXJjaCBob3Jpem9udGFsbHkvdmVydGljYWxseVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgaXNOZXh0V2Fsa2FibGU7XHJcbiAgICAgICAgICAgIGlmIChkeCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaXNOZXh0V2Fsa2FibGUgPSBncmlkLmlzV2Fsa2FibGVBdCh4ICsgZHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzVG9wV2Fsa2FibGUgPSBncmlkLmlzV2Fsa2FibGVBdCh4LCB5ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNCb3R0b21XYWxrYWJsZSA9IGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgLSAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOZXh0V2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCArIGR4LCB5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVG9wV2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3ggKyBkeCwgeSArIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQm90dG9tV2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3ggKyBkeCwgeSAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNUb3BXYWxrYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5laWdoYm9ycy5wdXNoKFt4LCB5ICsgMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzQm90dG9tV2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCwgeSAtIDFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkeSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaXNOZXh0V2Fsa2FibGUgPSBncmlkLmlzV2Fsa2FibGVBdCh4LCB5ICsgZHkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzUmlnaHRXYWxrYWJsZSA9IGdyaWQuaXNXYWxrYWJsZUF0KHggKyAxLCB5KTtcclxuICAgICAgICAgICAgICAgIHZhciBpc0xlZnRXYWxrYWJsZSA9IGdyaWQuaXNXYWxrYWJsZUF0KHggLSAxLCB5KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOZXh0V2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCwgeSArIGR5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmlnaHRXYWxrYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCArIDEsIHkgKyBkeV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNMZWZ0V2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3ggLSAxLCB5ICsgZHldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNSaWdodFdhbGthYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3ggKyAxLCB5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNMZWZ0V2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCAtIDEsIHldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHJldHVybiBhbGwgbmVpZ2hib3JzXHJcbiAgICBlbHNlIHtcclxuICAgICAgICBuZWlnaGJvck5vZGVzID0gZ3JpZC5nZXROZWlnaGJvcnMobm9kZSwgRGlhZ29uYWxNb3ZlbWVudC5Pbmx5V2hlbk5vT2JzdGFjbGVzKTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gbmVpZ2hib3JOb2Rlcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgbmVpZ2hib3JOb2RlID0gbmVpZ2hib3JOb2Rlc1tpXTtcclxuICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW25laWdoYm9yTm9kZS54LCBuZWlnaGJvck5vZGUueV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmVpZ2hib3JzO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBKUEZNb3ZlRGlhZ29uYWxseUlmTm9PYnN0YWNsZXM7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js":
/*!************************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = __webpack_require__(/*! ./JumpPointFinderBase */ \"./node_modules/pathfinding/src/finders/JumpPointFinderBase.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm allowing only horizontal\r\n * or vertical movements.\r\n */\r\nfunction JPFNeverMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFNeverMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFNeverMoveDiagonally.prototype.constructor = JPFNeverMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFNeverMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    if (dx !== 0) {\r\n        if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n            (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else if (dy !== 0) {\r\n        if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n            (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        //When moving vertically, must check for horizontal jump points\r\n        if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Only horizontal and vertical movements are allowed\");\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFNeverMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        if (dx !== 0) {\r\n            if (grid.isWalkableAt(x, y - 1)) {\r\n                neighbors.push([x, y - 1]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + 1)) {\r\n                neighbors.push([x, y + 1]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if (grid.isWalkableAt(x - 1, y)) {\r\n                neighbors.push([x - 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + 1, y)) {\r\n                neighbors.push([x + 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Never);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFNeverMoveDiagonally;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSlBGTmV2ZXJNb3ZlRGlhZ29uYWxseS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUJBQU8sQ0FBQyw0RkFBdUI7QUFDekQsdUJBQXVCLG1CQUFPLENBQUMseUZBQTBCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLE9BQU87QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL25vZGVfbW9kdWxlcy9wYXRoZmluZGluZy9zcmMvZmluZGVycy9KUEZOZXZlck1vdmVEaWFnb25hbGx5LmpzP2I2MzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBhdXRob3IgaW1vciAvIGh0dHBzOi8vZ2l0aHViLmNvbS9pbW9yXHJcbiAqL1xyXG52YXIgSnVtcFBvaW50RmluZGVyQmFzZSA9IHJlcXVpcmUoJy4vSnVtcFBvaW50RmluZGVyQmFzZScpO1xyXG52YXIgRGlhZ29uYWxNb3ZlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvRGlhZ29uYWxNb3ZlbWVudCcpO1xyXG5cclxuLyoqXHJcbiAqIFBhdGggZmluZGVyIHVzaW5nIHRoZSBKdW1wIFBvaW50IFNlYXJjaCBhbGdvcml0aG0gYWxsb3dpbmcgb25seSBob3Jpem9udGFsXHJcbiAqIG9yIHZlcnRpY2FsIG1vdmVtZW50cy5cclxuICovXHJcbmZ1bmN0aW9uIEpQRk5ldmVyTW92ZURpYWdvbmFsbHkob3B0KSB7XHJcbiAgICBKdW1wUG9pbnRGaW5kZXJCYXNlLmNhbGwodGhpcywgb3B0KTtcclxufVxyXG5cclxuSlBGTmV2ZXJNb3ZlRGlhZ29uYWxseS5wcm90b3R5cGUgPSBuZXcgSnVtcFBvaW50RmluZGVyQmFzZSgpO1xyXG5KUEZOZXZlck1vdmVEaWFnb25hbGx5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEpQRk5ldmVyTW92ZURpYWdvbmFsbHk7XHJcblxyXG4vKipcclxuICogU2VhcmNoIHJlY3Vyc2l2ZWx5IGluIHRoZSBkaXJlY3Rpb24gKHBhcmVudCAtPiBjaGlsZCksIHN0b3BwaW5nIG9ubHkgd2hlbiBhXHJcbiAqIGp1bXAgcG9pbnQgaXMgZm91bmQuXHJcbiAqIEBwcm90ZWN0ZWRcclxuICogQHJldHVybiB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IFRoZSB4LCB5IGNvb3JkaW5hdGUgb2YgdGhlIGp1bXAgcG9pbnRcclxuICogICAgIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxyXG4gKi9cclxuSlBGTmV2ZXJNb3ZlRGlhZ29uYWxseS5wcm90b3R5cGUuX2p1bXAgPSBmdW5jdGlvbih4LCB5LCBweCwgcHkpIHtcclxuICAgIHZhciBncmlkID0gdGhpcy5ncmlkLFxyXG4gICAgICAgIGR4ID0geCAtIHB4LCBkeSA9IHkgLSBweTtcclxuXHJcbiAgICBpZiAoIWdyaWQuaXNXYWxrYWJsZUF0KHgsIHkpKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgaWYodGhpcy50cmFja0p1bXBSZWN1cnNpb24gPT09IHRydWUpIHtcclxuICAgICAgICBncmlkLmdldE5vZGVBdCh4LCB5KS50ZXN0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChncmlkLmdldE5vZGVBdCh4LCB5KSA9PT0gdGhpcy5lbmROb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZHggIT09IDApIHtcclxuICAgICAgICBpZiAoKGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgLSAxKSAmJiAhZ3JpZC5pc1dhbGthYmxlQXQoeCAtIGR4LCB5IC0gMSkpIHx8XHJcbiAgICAgICAgICAgIChncmlkLmlzV2Fsa2FibGVBdCh4LCB5ICsgMSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHggLSBkeCwgeSArIDEpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGR5ICE9PSAwKSB7XHJcbiAgICAgICAgaWYgKChncmlkLmlzV2Fsa2FibGVBdCh4IC0gMSwgeSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHggLSAxLCB5IC0gZHkpKSB8fFxyXG4gICAgICAgICAgICAoZ3JpZC5pc1dhbGthYmxlQXQoeCArIDEsIHkpICYmICFncmlkLmlzV2Fsa2FibGVBdCh4ICsgMSwgeSAtIGR5KSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9XaGVuIG1vdmluZyB2ZXJ0aWNhbGx5LCBtdXN0IGNoZWNrIGZvciBob3Jpem9udGFsIGp1bXAgcG9pbnRzXHJcbiAgICAgICAgaWYgKHRoaXMuX2p1bXAoeCArIDEsIHksIHgsIHkpIHx8IHRoaXMuX2p1bXAoeCAtIDEsIHksIHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbeCwgeV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT25seSBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBtb3ZlbWVudHMgYXJlIGFsbG93ZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2p1bXAoeCArIGR4LCB5ICsgZHksIHgsIHkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEZpbmQgdGhlIG5laWdoYm9ycyBmb3IgdGhlIGdpdmVuIG5vZGUuIElmIHRoZSBub2RlIGhhcyBhIHBhcmVudCxcclxuICogcHJ1bmUgdGhlIG5laWdoYm9ycyBiYXNlZCBvbiB0aGUganVtcCBwb2ludCBzZWFyY2ggYWxnb3JpdGhtLCBvdGhlcndpc2VcclxuICogcmV0dXJuIGFsbCBhdmFpbGFibGUgbmVpZ2hib3JzLlxyXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gVGhlIG5laWdoYm9ycyBmb3VuZC5cclxuICovXHJcbkpQRk5ldmVyTW92ZURpYWdvbmFsbHkucHJvdG90eXBlLl9maW5kTmVpZ2hib3JzID0gZnVuY3Rpb24obm9kZSkge1xyXG4gICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50LFxyXG4gICAgICAgIHggPSBub2RlLngsIHkgPSBub2RlLnksXHJcbiAgICAgICAgZ3JpZCA9IHRoaXMuZ3JpZCxcclxuICAgICAgICBweCwgcHksIG54LCBueSwgZHgsIGR5LFxyXG4gICAgICAgIG5laWdoYm9ycyA9IFtdLCBuZWlnaGJvck5vZGVzLCBuZWlnaGJvck5vZGUsIGksIGw7XHJcblxyXG4gICAgLy8gZGlyZWN0ZWQgcHJ1bmluZzogY2FuIGlnbm9yZSBtb3N0IG5laWdoYm9ycywgdW5sZXNzIGZvcmNlZC5cclxuICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICBweCA9IHBhcmVudC54O1xyXG4gICAgICAgIHB5ID0gcGFyZW50Lnk7XHJcbiAgICAgICAgLy8gZ2V0IHRoZSBub3JtYWxpemVkIGRpcmVjdGlvbiBvZiB0cmF2ZWxcclxuICAgICAgICBkeCA9ICh4IC0gcHgpIC8gTWF0aC5tYXgoTWF0aC5hYnMoeCAtIHB4KSwgMSk7XHJcbiAgICAgICAgZHkgPSAoeSAtIHB5KSAvIE1hdGgubWF4KE1hdGguYWJzKHkgLSBweSksIDEpO1xyXG5cclxuICAgICAgICBpZiAoZHggIT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgLSAxKSkge1xyXG4gICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3gsIHkgLSAxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgKyAxKSkge1xyXG4gICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3gsIHkgKyAxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGdyaWQuaXNXYWxrYWJsZUF0KHggKyBkeCwgeSkpIHtcclxuICAgICAgICAgICAgICAgIG5laWdoYm9ycy5wdXNoKFt4ICsgZHgsIHldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkeSAhPT0gMCkge1xyXG4gICAgICAgICAgICBpZiAoZ3JpZC5pc1dhbGthYmxlQXQoeCAtIDEsIHkpKSB7XHJcbiAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCAtIDEsIHldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZ3JpZC5pc1dhbGthYmxlQXQoeCArIDEsIHkpKSB7XHJcbiAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCArIDEsIHldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZ3JpZC5pc1dhbGthYmxlQXQoeCwgeSArIGR5KSkge1xyXG4gICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3gsIHkgKyBkeV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gcmV0dXJuIGFsbCBuZWlnaGJvcnNcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIG5laWdoYm9yTm9kZXMgPSBncmlkLmdldE5laWdoYm9ycyhub2RlLCBEaWFnb25hbE1vdmVtZW50Lk5ldmVyKTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gbmVpZ2hib3JOb2Rlcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgbmVpZ2hib3JOb2RlID0gbmVpZ2hib3JOb2Rlc1tpXTtcclxuICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW25laWdoYm9yTm9kZS54LCBuZWlnaGJvck5vZGUueV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmVpZ2hib3JzO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBKUEZOZXZlck1vdmVEaWFnb25hbGx5O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JumpPointFinder.js":
/*!*****************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JumpPointFinder.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author aniero / https://github.com/aniero\r\n */\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\nvar JPFNeverMoveDiagonally = __webpack_require__(/*! ./JPFNeverMoveDiagonally */ \"./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js\");\r\nvar JPFAlwaysMoveDiagonally = __webpack_require__(/*! ./JPFAlwaysMoveDiagonally */ \"./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js\");\r\nvar JPFMoveDiagonallyIfNoObstacles = __webpack_require__(/*! ./JPFMoveDiagonallyIfNoObstacles */ \"./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js\");\r\nvar JPFMoveDiagonallyIfAtMostOneObstacle = __webpack_require__(/*! ./JPFMoveDiagonallyIfAtMostOneObstacle */ \"./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js\");\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm\r\n * @param {Object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {DiagonalMovement} opt.diagonalMovement Condition under which diagonal\r\n *      movement will be allowed.\r\n */\r\nfunction JumpPointFinder(opt) {\r\n    opt = opt || {};\r\n    if (opt.diagonalMovement === DiagonalMovement.Never) {\r\n        return new JPFNeverMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.Always) {\r\n        return new JPFAlwaysMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        return new JPFMoveDiagonallyIfNoObstacles(opt);\r\n    } else {\r\n        return new JPFMoveDiagonallyIfAtMostOneObstacle(opt);\r\n    }\r\n}\r\n\r\nmodule.exports = JumpPointFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSnVtcFBvaW50RmluZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLHlGQUEwQjtBQUN6RCw2QkFBNkIsbUJBQU8sQ0FBQyxrR0FBMEI7QUFDL0QsOEJBQThCLG1CQUFPLENBQUMsb0dBQTJCO0FBQ2pFLHFDQUFxQyxtQkFBTyxDQUFDLGtIQUFrQztBQUMvRSwyQ0FBMkMsbUJBQU8sQ0FBQyw4SEFBd0M7QUFDM0Y7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQjtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL25vZGVfbW9kdWxlcy9wYXRoZmluZGluZy9zcmMvZmluZGVycy9KdW1wUG9pbnRGaW5kZXIuanM/NGM2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGF1dGhvciBhbmllcm8gLyBodHRwczovL2dpdGh1Yi5jb20vYW5pZXJvXHJcbiAqL1xyXG52YXIgRGlhZ29uYWxNb3ZlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvRGlhZ29uYWxNb3ZlbWVudCcpO1xyXG52YXIgSlBGTmV2ZXJNb3ZlRGlhZ29uYWxseSA9IHJlcXVpcmUoJy4vSlBGTmV2ZXJNb3ZlRGlhZ29uYWxseScpO1xyXG52YXIgSlBGQWx3YXlzTW92ZURpYWdvbmFsbHkgPSByZXF1aXJlKCcuL0pQRkFsd2F5c01vdmVEaWFnb25hbGx5Jyk7XHJcbnZhciBKUEZNb3ZlRGlhZ29uYWxseUlmTm9PYnN0YWNsZXMgPSByZXF1aXJlKCcuL0pQRk1vdmVEaWFnb25hbGx5SWZOb09ic3RhY2xlcycpO1xyXG52YXIgSlBGTW92ZURpYWdvbmFsbHlJZkF0TW9zdE9uZU9ic3RhY2xlID0gcmVxdWlyZSgnLi9KUEZNb3ZlRGlhZ29uYWxseUlmQXRNb3N0T25lT2JzdGFjbGUnKTtcclxuXHJcbi8qKlxyXG4gKiBQYXRoIGZpbmRlciB1c2luZyB0aGUgSnVtcCBQb2ludCBTZWFyY2ggYWxnb3JpdGhtXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0LmhldXJpc3RpYyBIZXVyaXN0aWMgZnVuY3Rpb24gdG8gZXN0aW1hdGUgdGhlIGRpc3RhbmNlXHJcbiAqICAgICAoZGVmYXVsdHMgdG8gbWFuaGF0dGFuKS5cclxuICogQHBhcmFtIHtEaWFnb25hbE1vdmVtZW50fSBvcHQuZGlhZ29uYWxNb3ZlbWVudCBDb25kaXRpb24gdW5kZXIgd2hpY2ggZGlhZ29uYWxcclxuICogICAgICBtb3ZlbWVudCB3aWxsIGJlIGFsbG93ZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBKdW1wUG9pbnRGaW5kZXIob3B0KSB7XHJcbiAgICBvcHQgPSBvcHQgfHwge307XHJcbiAgICBpZiAob3B0LmRpYWdvbmFsTW92ZW1lbnQgPT09IERpYWdvbmFsTW92ZW1lbnQuTmV2ZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEpQRk5ldmVyTW92ZURpYWdvbmFsbHkob3B0KTtcclxuICAgIH0gZWxzZSBpZiAob3B0LmRpYWdvbmFsTW92ZW1lbnQgPT09IERpYWdvbmFsTW92ZW1lbnQuQWx3YXlzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBKUEZBbHdheXNNb3ZlRGlhZ29uYWxseShvcHQpO1xyXG4gICAgfSBlbHNlIGlmIChvcHQuZGlhZ29uYWxNb3ZlbWVudCA9PT0gRGlhZ29uYWxNb3ZlbWVudC5Pbmx5V2hlbk5vT2JzdGFjbGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBKUEZNb3ZlRGlhZ29uYWxseUlmTm9PYnN0YWNsZXMob3B0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBKUEZNb3ZlRGlhZ29uYWxseUlmQXRNb3N0T25lT2JzdGFjbGUob3B0KTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBKdW1wUG9pbnRGaW5kZXI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JumpPointFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JumpPointFinderBase.js":
/*!*********************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JumpPointFinderBase.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar Heap       = __webpack_require__(/*! heap */ \"./node_modules/heap/index.js\");\r\nvar Util       = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar Heuristic  = __webpack_require__(/*! ../core/Heuristic */ \"./node_modules/pathfinding/src/core/Heuristic.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Base class for the Jump Point Search algorithm\r\n * @param {object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction JumpPointFinderBase(opt) {\r\n    opt = opt || {};\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.trackJumpRecursion = opt.trackJumpRecursion || false;\r\n}\r\n\r\n/**\r\n * Find and return the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nJumpPointFinderBase.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = this.openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = this.startNode = grid.getNodeAt(startX, startY),\r\n        endNode = this.endNode = grid.getNodeAt(endX, endY), node;\r\n\r\n    this.grid = grid;\r\n\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        if (node === endNode) {\r\n            return Util.expandPath(Util.backtrace(endNode));\r\n        }\r\n\r\n        this._identifySuccessors(node);\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\n/**\r\n * Identify successors for the given node. Runs a jump point search in the\r\n * direction of each available neighbor, adding any points found to the open\r\n * list.\r\n * @protected\r\n */\r\nJumpPointFinderBase.prototype._identifySuccessors = function(node) {\r\n    var grid = this.grid,\r\n        heuristic = this.heuristic,\r\n        openList = this.openList,\r\n        endX = this.endNode.x,\r\n        endY = this.endNode.y,\r\n        neighbors, neighbor,\r\n        jumpPoint, i, l,\r\n        x = node.x, y = node.y,\r\n        jx, jy, dx, dy, d, ng, jumpNode,\r\n        abs = Math.abs, max = Math.max;\r\n\r\n    neighbors = this._findNeighbors(node);\r\n    for(i = 0, l = neighbors.length; i < l; ++i) {\r\n        neighbor = neighbors[i];\r\n        jumpPoint = this._jump(neighbor[0], neighbor[1], x, y);\r\n        if (jumpPoint) {\r\n\r\n            jx = jumpPoint[0];\r\n            jy = jumpPoint[1];\r\n            jumpNode = grid.getNodeAt(jx, jy);\r\n\r\n            if (jumpNode.closed) {\r\n                continue;\r\n            }\r\n\r\n            // include distance, as parent may not be immediately adjacent:\r\n            d = Heuristic.octile(abs(jx - x), abs(jy - y));\r\n            ng = node.g + d; // next `g` value\r\n\r\n            if (!jumpNode.opened || ng < jumpNode.g) {\r\n                jumpNode.g = ng;\r\n                jumpNode.h = jumpNode.h || heuristic(abs(jx - endX), abs(jy - endY));\r\n                jumpNode.f = jumpNode.g + jumpNode.h;\r\n                jumpNode.parent = node;\r\n\r\n                if (!jumpNode.opened) {\r\n                    openList.push(jumpNode);\r\n                    jumpNode.opened = true;\r\n                } else {\r\n                    openList.updateItem(jumpNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = JumpPointFinderBase;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSnVtcFBvaW50RmluZGVyQmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQywwQ0FBTTtBQUMvQixpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBYztBQUN2QyxpQkFBaUIsbUJBQU8sQ0FBQywyRUFBbUI7QUFDNUMsdUJBQXVCLG1CQUFPLENBQUMseUZBQTBCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsT0FBTztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0p1bXBQb2ludEZpbmRlckJhc2UuanM/MzA0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGF1dGhvciBpbW9yIC8gaHR0cHM6Ly9naXRodWIuY29tL2ltb3JcclxuICovXHJcbnZhciBIZWFwICAgICAgID0gcmVxdWlyZSgnaGVhcCcpO1xyXG52YXIgVXRpbCAgICAgICA9IHJlcXVpcmUoJy4uL2NvcmUvVXRpbCcpO1xyXG52YXIgSGV1cmlzdGljICA9IHJlcXVpcmUoJy4uL2NvcmUvSGV1cmlzdGljJyk7XHJcbnZhciBEaWFnb25hbE1vdmVtZW50ID0gcmVxdWlyZSgnLi4vY29yZS9EaWFnb25hbE1vdmVtZW50Jyk7XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgdGhlIEp1bXAgUG9pbnQgU2VhcmNoIGFsZ29yaXRobVxyXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0XHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wdC5oZXVyaXN0aWMgSGV1cmlzdGljIGZ1bmN0aW9uIHRvIGVzdGltYXRlIHRoZSBkaXN0YW5jZVxyXG4gKiAgICAgKGRlZmF1bHRzIHRvIG1hbmhhdHRhbikuXHJcbiAqL1xyXG5mdW5jdGlvbiBKdW1wUG9pbnRGaW5kZXJCYXNlKG9wdCkge1xyXG4gICAgb3B0ID0gb3B0IHx8IHt9O1xyXG4gICAgdGhpcy5oZXVyaXN0aWMgPSBvcHQuaGV1cmlzdGljIHx8IEhldXJpc3RpYy5tYW5oYXR0YW47XHJcbiAgICB0aGlzLnRyYWNrSnVtcFJlY3Vyc2lvbiA9IG9wdC50cmFja0p1bXBSZWN1cnNpb24gfHwgZmFsc2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaW5kIGFuZCByZXR1cm4gdGhlIHBhdGguXHJcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fSBUaGUgcGF0aCwgaW5jbHVkaW5nIGJvdGggc3RhcnQgYW5kXHJcbiAqICAgICBlbmQgcG9zaXRpb25zLlxyXG4gKi9cclxuSnVtcFBvaW50RmluZGVyQmFzZS5wcm90b3R5cGUuZmluZFBhdGggPSBmdW5jdGlvbihzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSwgZ3JpZCkge1xyXG4gICAgdmFyIG9wZW5MaXN0ID0gdGhpcy5vcGVuTGlzdCA9IG5ldyBIZWFwKGZ1bmN0aW9uKG5vZGVBLCBub2RlQikge1xyXG4gICAgICAgICAgICByZXR1cm4gbm9kZUEuZiAtIG5vZGVCLmY7XHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgc3RhcnROb2RlID0gdGhpcy5zdGFydE5vZGUgPSBncmlkLmdldE5vZGVBdChzdGFydFgsIHN0YXJ0WSksXHJcbiAgICAgICAgZW5kTm9kZSA9IHRoaXMuZW5kTm9kZSA9IGdyaWQuZ2V0Tm9kZUF0KGVuZFgsIGVuZFkpLCBub2RlO1xyXG5cclxuICAgIHRoaXMuZ3JpZCA9IGdyaWQ7XHJcblxyXG5cclxuICAgIC8vIHNldCB0aGUgYGdgIGFuZCBgZmAgdmFsdWUgb2YgdGhlIHN0YXJ0IG5vZGUgdG8gYmUgMFxyXG4gICAgc3RhcnROb2RlLmcgPSAwO1xyXG4gICAgc3RhcnROb2RlLmYgPSAwO1xyXG5cclxuICAgIC8vIHB1c2ggdGhlIHN0YXJ0IG5vZGUgaW50byB0aGUgb3BlbiBsaXN0XHJcbiAgICBvcGVuTGlzdC5wdXNoKHN0YXJ0Tm9kZSk7XHJcbiAgICBzdGFydE5vZGUub3BlbmVkID0gdHJ1ZTtcclxuXHJcbiAgICAvLyB3aGlsZSB0aGUgb3BlbiBsaXN0IGlzIG5vdCBlbXB0eVxyXG4gICAgd2hpbGUgKCFvcGVuTGlzdC5lbXB0eSgpKSB7XHJcbiAgICAgICAgLy8gcG9wIHRoZSBwb3NpdGlvbiBvZiBub2RlIHdoaWNoIGhhcyB0aGUgbWluaW11bSBgZmAgdmFsdWUuXHJcbiAgICAgICAgbm9kZSA9IG9wZW5MaXN0LnBvcCgpO1xyXG4gICAgICAgIG5vZGUuY2xvc2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKG5vZGUgPT09IGVuZE5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFV0aWwuZXhwYW5kUGF0aChVdGlsLmJhY2t0cmFjZShlbmROb2RlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pZGVudGlmeVN1Y2Nlc3NvcnMobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZmFpbCB0byBmaW5kIHRoZSBwYXRoXHJcbiAgICByZXR1cm4gW107XHJcbn07XHJcblxyXG4vKipcclxuICogSWRlbnRpZnkgc3VjY2Vzc29ycyBmb3IgdGhlIGdpdmVuIG5vZGUuIFJ1bnMgYSBqdW1wIHBvaW50IHNlYXJjaCBpbiB0aGVcclxuICogZGlyZWN0aW9uIG9mIGVhY2ggYXZhaWxhYmxlIG5laWdoYm9yLCBhZGRpbmcgYW55IHBvaW50cyBmb3VuZCB0byB0aGUgb3BlblxyXG4gKiBsaXN0LlxyXG4gKiBAcHJvdGVjdGVkXHJcbiAqL1xyXG5KdW1wUG9pbnRGaW5kZXJCYXNlLnByb3RvdHlwZS5faWRlbnRpZnlTdWNjZXNzb3JzID0gZnVuY3Rpb24obm9kZSkge1xyXG4gICAgdmFyIGdyaWQgPSB0aGlzLmdyaWQsXHJcbiAgICAgICAgaGV1cmlzdGljID0gdGhpcy5oZXVyaXN0aWMsXHJcbiAgICAgICAgb3Blbkxpc3QgPSB0aGlzLm9wZW5MaXN0LFxyXG4gICAgICAgIGVuZFggPSB0aGlzLmVuZE5vZGUueCxcclxuICAgICAgICBlbmRZID0gdGhpcy5lbmROb2RlLnksXHJcbiAgICAgICAgbmVpZ2hib3JzLCBuZWlnaGJvcixcclxuICAgICAgICBqdW1wUG9pbnQsIGksIGwsXHJcbiAgICAgICAgeCA9IG5vZGUueCwgeSA9IG5vZGUueSxcclxuICAgICAgICBqeCwganksIGR4LCBkeSwgZCwgbmcsIGp1bXBOb2RlLFxyXG4gICAgICAgIGFicyA9IE1hdGguYWJzLCBtYXggPSBNYXRoLm1heDtcclxuXHJcbiAgICBuZWlnaGJvcnMgPSB0aGlzLl9maW5kTmVpZ2hib3JzKG5vZGUpO1xyXG4gICAgZm9yKGkgPSAwLCBsID0gbmVpZ2hib3JzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgIG5laWdoYm9yID0gbmVpZ2hib3JzW2ldO1xyXG4gICAgICAgIGp1bXBQb2ludCA9IHRoaXMuX2p1bXAobmVpZ2hib3JbMF0sIG5laWdoYm9yWzFdLCB4LCB5KTtcclxuICAgICAgICBpZiAoanVtcFBvaW50KSB7XHJcblxyXG4gICAgICAgICAgICBqeCA9IGp1bXBQb2ludFswXTtcclxuICAgICAgICAgICAgankgPSBqdW1wUG9pbnRbMV07XHJcbiAgICAgICAgICAgIGp1bXBOb2RlID0gZ3JpZC5nZXROb2RlQXQoangsIGp5KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChqdW1wTm9kZS5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBpbmNsdWRlIGRpc3RhbmNlLCBhcyBwYXJlbnQgbWF5IG5vdCBiZSBpbW1lZGlhdGVseSBhZGphY2VudDpcclxuICAgICAgICAgICAgZCA9IEhldXJpc3RpYy5vY3RpbGUoYWJzKGp4IC0geCksIGFicyhqeSAtIHkpKTtcclxuICAgICAgICAgICAgbmcgPSBub2RlLmcgKyBkOyAvLyBuZXh0IGBnYCB2YWx1ZVxyXG5cclxuICAgICAgICAgICAgaWYgKCFqdW1wTm9kZS5vcGVuZWQgfHwgbmcgPCBqdW1wTm9kZS5nKSB7XHJcbiAgICAgICAgICAgICAgICBqdW1wTm9kZS5nID0gbmc7XHJcbiAgICAgICAgICAgICAgICBqdW1wTm9kZS5oID0ganVtcE5vZGUuaCB8fCBoZXVyaXN0aWMoYWJzKGp4IC0gZW5kWCksIGFicyhqeSAtIGVuZFkpKTtcclxuICAgICAgICAgICAgICAgIGp1bXBOb2RlLmYgPSBqdW1wTm9kZS5nICsganVtcE5vZGUuaDtcclxuICAgICAgICAgICAgICAgIGp1bXBOb2RlLnBhcmVudCA9IG5vZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFqdW1wTm9kZS5vcGVuZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGVuTGlzdC5wdXNoKGp1bXBOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBqdW1wTm9kZS5vcGVuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGVuTGlzdC51cGRhdGVJdGVtKGp1bXBOb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSnVtcFBvaW50RmluZGVyQmFzZTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JumpPointFinderBase.js\n\n}");

/***/ }),

/***/ "./resources/assets/css/game.css":
/*!***************************************!*\
  !*** ./resources/assets/css/game.css ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2Nzcy9nYW1lLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vcmVzb3VyY2VzL2Fzc2V0cy9jc3MvZ2FtZS5jc3M/OGE4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/css/game.css\n\n}");

/***/ }),

/***/ "./resources/assets/js/collectible-entity.js":
/*!***************************************************!*\
  !*** ./resources/assets/js/collectible-entity.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CollectibleEntity)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// CollectibleEntity: base class for dots and fruit\nvar CollectibleEntity = /*#__PURE__*/function () {\n  function CollectibleEntity(col, row) {\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'dot';\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, CollectibleEntity);\n    this.col = col;\n    this.row = row;\n    this.type = type; // 'dot', 'superdot', 'fruit', etc.\n    this.active = true;\n    this.options = options; // e.g., fruit type, points, image\n  }\n  return _createClass(CollectibleEntity, [{\n    key: \"render\",\n    value: function render(ctx, tileSize, art) {\n      if (!this.active) return;\n      if (this.type === 'dot') {\n        ctx.save();\n        ctx.fillStyle = '#fff';\n        ctx.beginPath();\n        ctx.arc(this.col * tileSize + tileSize / 2, this.row * tileSize + tileSize / 2, tileSize / 8, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.restore();\n      } else if (this.type === 'superdot') {\n        ctx.save();\n        ctx.fillStyle = '#ffd700';\n        ctx.beginPath();\n        ctx.arc(this.col * tileSize + tileSize / 2, this.row * tileSize + tileSize / 2, tileSize / 4, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.restore();\n      } else if (this.type === 'fruit') {\n        ctx.save();\n        if (art && art.fruit && art.fruit.image) {\n          ctx.drawImage(art.fruit.image, this.col * tileSize, this.row * tileSize, tileSize, tileSize);\n        } else {\n          ctx.fillStyle = '#f00';\n          ctx.beginPath();\n          ctx.arc(this.col * tileSize + tileSize / 2, this.row * tileSize + tileSize / 2, tileSize / 3, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbGxlY3RpYmxlLWVudGl0eS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBQSxJQUNxQkEsaUJBQWlCO0VBQ2xDLFNBQUFBLGtCQUFZQyxHQUFHLEVBQUVDLEdBQUcsRUFBOEI7SUFBQSxJQUE1QkMsSUFBSSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxLQUFLO0lBQUEsSUFBRUcsT0FBTyxHQUFBSCxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7SUFBQUksZUFBQSxPQUFBUixpQkFBQTtJQUM1QyxJQUFJLENBQUNDLEdBQUcsR0FBR0EsR0FBRztJQUNkLElBQUksQ0FBQ0MsR0FBRyxHQUFHQSxHQUFHO0lBQ2QsSUFBSSxDQUFDQyxJQUFJLEdBQUdBLElBQUksQ0FBQyxDQUFDO0lBQ2xCLElBQUksQ0FBQ00sTUFBTSxHQUFHLElBQUk7SUFDbEIsSUFBSSxDQUFDRixPQUFPLEdBQUdBLE9BQU8sQ0FBQyxDQUFDO0VBQzVCO0VBQUMsT0FBQUcsWUFBQSxDQUFBVixpQkFBQTtJQUFBVyxHQUFBO0lBQUFDLEtBQUEsRUFFRCxTQUFBQyxNQUFNQSxDQUFDQyxHQUFHLEVBQUVDLFFBQVEsRUFBRUMsR0FBRyxFQUFFO01BQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUNQLE1BQU0sRUFBRTtNQUNsQixJQUFJLElBQUksQ0FBQ04sSUFBSSxLQUFLLEtBQUssRUFBRTtRQUNyQlcsR0FBRyxDQUFDRyxJQUFJLENBQUMsQ0FBQztRQUNWSCxHQUFHLENBQUNJLFNBQVMsR0FBRyxNQUFNO1FBQ3RCSixHQUFHLENBQUNLLFNBQVMsQ0FBQyxDQUFDO1FBQ2ZMLEdBQUcsQ0FBQ00sR0FBRyxDQUNILElBQUksQ0FBQ25CLEdBQUcsR0FBR2MsUUFBUSxHQUFHQSxRQUFRLEdBQUcsQ0FBQyxFQUNsQyxJQUFJLENBQUNiLEdBQUcsR0FBR2EsUUFBUSxHQUFHQSxRQUFRLEdBQUcsQ0FBQyxFQUNsQ0EsUUFBUSxHQUFHLENBQUMsRUFDWixDQUFDLEVBQUUsQ0FBQyxHQUFHTSxJQUFJLENBQUNDLEVBQ2hCLENBQUM7UUFDRFIsR0FBRyxDQUFDUyxJQUFJLENBQUMsQ0FBQztRQUNWVCxHQUFHLENBQUNVLE9BQU8sQ0FBQyxDQUFDO01BQ2pCLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQ3JCLElBQUksS0FBSyxVQUFVLEVBQUU7UUFDakNXLEdBQUcsQ0FBQ0csSUFBSSxDQUFDLENBQUM7UUFDVkgsR0FBRyxDQUFDSSxTQUFTLEdBQUcsU0FBUztRQUN6QkosR0FBRyxDQUFDSyxTQUFTLENBQUMsQ0FBQztRQUNmTCxHQUFHLENBQUNNLEdBQUcsQ0FDSCxJQUFJLENBQUNuQixHQUFHLEdBQUdjLFFBQVEsR0FBR0EsUUFBUSxHQUFHLENBQUMsRUFDbEMsSUFBSSxDQUFDYixHQUFHLEdBQUdhLFFBQVEsR0FBR0EsUUFBUSxHQUFHLENBQUMsRUFDbENBLFFBQVEsR0FBRyxDQUFDLEVBQ1osQ0FBQyxFQUFFLENBQUMsR0FBR00sSUFBSSxDQUFDQyxFQUNoQixDQUFDO1FBQ0RSLEdBQUcsQ0FBQ1MsSUFBSSxDQUFDLENBQUM7UUFDVlQsR0FBRyxDQUFDVSxPQUFPLENBQUMsQ0FBQztNQUNqQixDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUNyQixJQUFJLEtBQUssT0FBTyxFQUFFO1FBQzlCVyxHQUFHLENBQUNHLElBQUksQ0FBQyxDQUFDO1FBQ1YsSUFBSUQsR0FBRyxJQUFJQSxHQUFHLENBQUNTLEtBQUssSUFBSVQsR0FBRyxDQUFDUyxLQUFLLENBQUNDLEtBQUssRUFBRTtVQUNyQ1osR0FBRyxDQUFDYSxTQUFTLENBQ1RYLEdBQUcsQ0FBQ1MsS0FBSyxDQUFDQyxLQUFLLEVBQ2YsSUFBSSxDQUFDekIsR0FBRyxHQUFHYyxRQUFRLEVBQ25CLElBQUksQ0FBQ2IsR0FBRyxHQUFHYSxRQUFRLEVBQ25CQSxRQUFRLEVBQUVBLFFBQ2QsQ0FBQztRQUNMLENBQUMsTUFBTTtVQUNIRCxHQUFHLENBQUNJLFNBQVMsR0FBRyxNQUFNO1VBQ3RCSixHQUFHLENBQUNLLFNBQVMsQ0FBQyxDQUFDO1VBQ2ZMLEdBQUcsQ0FBQ00sR0FBRyxDQUNILElBQUksQ0FBQ25CLEdBQUcsR0FBR2MsUUFBUSxHQUFHQSxRQUFRLEdBQUcsQ0FBQyxFQUNsQyxJQUFJLENBQUNiLEdBQUcsR0FBR2EsUUFBUSxHQUFHQSxRQUFRLEdBQUcsQ0FBQyxFQUNsQ0EsUUFBUSxHQUFHLENBQUMsRUFDWixDQUFDLEVBQUUsQ0FBQyxHQUFHTSxJQUFJLENBQUNDLEVBQ2hCLENBQUM7VUFDRFIsR0FBRyxDQUFDUyxJQUFJLENBQUMsQ0FBQztRQUNkO1FBQ0FULEdBQUcsQ0FBQ1UsT0FBTyxDQUFDLENBQUM7TUFDakI7SUFDSjtFQUFDO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb2xsZWN0aWJsZS1lbnRpdHkuanM/MzhiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb2xsZWN0aWJsZUVudGl0eTogYmFzZSBjbGFzcyBmb3IgZG90cyBhbmQgZnJ1aXRcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbGxlY3RpYmxlRW50aXR5IHtcbiAgICBjb25zdHJ1Y3Rvcihjb2wsIHJvdywgdHlwZSA9ICdkb3QnLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5jb2wgPSBjb2w7XG4gICAgICAgIHRoaXMucm93ID0gcm93O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlOyAvLyAnZG90JywgJ3N1cGVyZG90JywgJ2ZydWl0JywgZXRjLlxuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7IC8vIGUuZy4sIGZydWl0IHR5cGUsIHBvaW50cywgaW1hZ2VcbiAgICB9XG5cbiAgICByZW5kZXIoY3R4LCB0aWxlU2l6ZSwgYXJ0KSB7XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmUpIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2RvdCcpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJyNmZmYnO1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4LmFyYyhcbiAgICAgICAgICAgICAgICB0aGlzLmNvbCAqIHRpbGVTaXplICsgdGlsZVNpemUgLyAyLFxuICAgICAgICAgICAgICAgIHRoaXMucm93ICogdGlsZVNpemUgKyB0aWxlU2l6ZSAvIDIsXG4gICAgICAgICAgICAgICAgdGlsZVNpemUgLyA4LFxuICAgICAgICAgICAgICAgIDAsIDIgKiBNYXRoLlBJXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSAnc3VwZXJkb3QnKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjZmZkNzAwJztcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5hcmMoXG4gICAgICAgICAgICAgICAgdGhpcy5jb2wgKiB0aWxlU2l6ZSArIHRpbGVTaXplIC8gMixcbiAgICAgICAgICAgICAgICB0aGlzLnJvdyAqIHRpbGVTaXplICsgdGlsZVNpemUgLyAyLFxuICAgICAgICAgICAgICAgIHRpbGVTaXplIC8gNCxcbiAgICAgICAgICAgICAgICAwLCAyICogTWF0aC5QSVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ2ZydWl0Jykge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGlmIChhcnQgJiYgYXJ0LmZydWl0ICYmIGFydC5mcnVpdC5pbWFnZSkge1xuICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICAgICAgICAgIGFydC5mcnVpdC5pbWFnZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2wgKiB0aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3cgKiB0aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgdGlsZVNpemUsIHRpbGVTaXplXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjZjAwJztcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgY3R4LmFyYyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2wgKiB0aWxlU2l6ZSArIHRpbGVTaXplIC8gMixcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3cgKiB0aWxlU2l6ZSArIHRpbGVTaXplIC8gMixcbiAgICAgICAgICAgICAgICAgICAgdGlsZVNpemUgLyAzLFxuICAgICAgICAgICAgICAgICAgICAwLCAyICogTWF0aC5QSVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQ29sbGVjdGlibGVFbnRpdHkiLCJjb2wiLCJyb3ciLCJ0eXBlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwib3B0aW9ucyIsIl9jbGFzc0NhbGxDaGVjayIsImFjdGl2ZSIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiY3R4IiwidGlsZVNpemUiLCJhcnQiLCJzYXZlIiwiZmlsbFN0eWxlIiwiYmVnaW5QYXRoIiwiYXJjIiwiTWF0aCIsIlBJIiwiZmlsbCIsInJlc3RvcmUiLCJmcnVpdCIsImltYWdlIiwiZHJhd0ltYWdlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/js/collectible-entity.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/collectible-spawner.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/collectible-spawner.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CollectibleSpawner)\n/* harmony export */ });\n/* harmony import */ var _collectible_entity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./collectible-entity.js */ \"./resources/assets/js/collectible-entity.js\");\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings.js */ \"./resources/assets/js/settings.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// CollectibleSpawner: generates dots and fruit on valid tiles\n\n\nvar CollectibleSpawner = /*#__PURE__*/function () {\n  function CollectibleSpawner(mapData, tileTypes) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, CollectibleSpawner);\n    this.mapData = mapData;\n    this.tileTypes = tileTypes; // { EMPTY, PORTAL, GHOST_SPAWN, GHOST_DOOR, ... }\n    this.options = options;\n  }\n\n  // Returns: { dots: [], fruit: [] }\n  return _createClass(CollectibleSpawner, [{\n    key: \"spawnCollectibles\",\n    value: function spawnCollectibles() {\n      var existingEntities = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var dots = [];\n      var fruit = [];\n      var superdots = [];\n      var occupied = new Set(existingEntities.map(function (e) {\n        return \"\".concat(e.col, \",\").concat(e.row);\n      }));\n      // SUPERDOTS: Place superdots at positions defined by the map (tileTypes.SUPER_DOT)\n      for (var row = 0; row < this.mapData.length; row++) {\n        for (var col = 0; col < this.mapData[0].length; col++) {\n          if (this.mapData[row][col] === this.tileTypes.SUPER_DOT && !occupied.has(\"\".concat(col, \",\").concat(row)) && !this._isInPen(col, row) && !this._isInPortalOrTunnel(col, row)) {\n            superdots.push(new _collectible_entity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](col, row, 'superdot', {\n              points: _settings_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].superDotPoints || 50\n            }));\n            occupied.add(\"\".concat(col, \",\").concat(row));\n          }\n        }\n      }\n      // Dots\n      for (var _row = 0; _row < this.mapData.length; _row++) {\n        for (var _col = 0; _col < this.mapData[0].length; _col++) {\n          if (this.mapData[_row][_col] === this.tileTypes.EMPTY && !occupied.has(\"\".concat(_col, \",\").concat(_row)) && !this._isInPen(_col, _row) && !this._isInPortalOrTunnel(_col, _row)) {\n            dots.push(new _collectible_entity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](_col, _row, 'dot', {\n              points: _settings_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dotPoints\n            }));\n          }\n        }\n      }\n      // Fruits: Only spawn at least 5 tiles away from any superdot\n      var fruitMinDistance = 5;\n      var fruitCandidates = [];\n      for (var _row2 = 0; _row2 < this.mapData.length; _row2++) {\n        for (var _col2 = 0; _col2 < this.mapData[0].length; _col2++) {\n          if (this.mapData[_row2][_col2] === this.tileTypes.EMPTY && !occupied.has(\"\".concat(_col2, \",\").concat(_row2)) && !this._isInPen(_col2, _row2) && !this._isInPortalOrTunnel(_col2, _row2)) {\n            var tooClose = false;\n            var _iterator = _createForOfIteratorHelper(superdots),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var sd = _step.value;\n                var dx = Math.abs(_col2 - sd.col);\n                var dy = Math.abs(_row2 - sd.row);\n                if (dx + dy < fruitMinDistance) {\n                  tooClose = true;\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            if (!tooClose) {\n              fruitCandidates.push({\n                col: _col2,\n                row: _row2\n              });\n            }\n          }\n        }\n      }\n      // Pick a random fruit type\n      var fruitType = _settings_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fruitTypes[Math.floor(Math.random() * _settings_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fruitTypes.length)];\n      // Optionally, allow caller to pass fruit locations\n      var fruitLocations = this.options.fruitLocations || [];\n      if (fruitLocations.length === 0) {\n        if (fruitCandidates.length > 0) {\n          fruitLocations = [fruitCandidates[Math.floor(Math.random() * fruitCandidates.length)]];\n        }\n      }\n      var _iterator2 = _createForOfIteratorHelper(fruitLocations),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var loc = _step2.value;\n          if (loc) {\n            fruit.push(new _collectible_entity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](loc.col, loc.row, 'fruit', _objectSpread({}, fruitType)));\n            occupied.add(\"\".concat(loc.col, \",\").concat(loc.row));\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return {\n        superdots: superdots,\n        dots: dots,\n        fruit: fruit\n      };\n    }\n  }, {\n    key: \"_pickRandomValidTile\",\n    value: function _pickRandomValidTile(occupied) {\n      var valid = [];\n      for (var row = 0; row < this.mapData.length; row++) {\n        for (var col = 0; col < this.mapData[0].length; col++) {\n          if (this.mapData[row][col] === this.tileTypes.EMPTY && !occupied.has(\"\".concat(col, \",\").concat(row)) && !this._isInPen(col, row) && !this._isInPortalOrTunnel(col, row)) {\n            valid.push({\n              col: col,\n              row: row\n            });\n          }\n        }\n      }\n      if (valid.length === 0) return null;\n      return valid[Math.floor(Math.random() * valid.length)];\n    }\n  }, {\n    key: \"_isInPen\",\n    value: function _isInPen(col, row) {\n      // Pen is GHOST_SPAWN or GHOST_DOOR\n      return this.mapData[row][col] === this.tileTypes.GHOST_SPAWN || this.mapData[row][col] === this.tileTypes.GHOST_DOOR;\n    }\n  }, {\n    key: \"_isInPortalOrTunnel\",\n    value: function _isInPortalOrTunnel(col, row) {\n      // Exclude portals and the empty tunnel path between them\n      if (this.mapData[row][col] === this.tileTypes.PORTAL) return true;\n      // Optionally: Exclude direct tunnel path (left/right edge)\n      if (col === 0 || col === this.mapData[0].length - 1) return true;\n      return false;\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/collectible-spawner.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/entity-art.js":
/*!*******************************************!*\
  !*** ./resources/assets/js/entity-art.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Central config for entity art assets and metadata\n// Use PNG or SVG paths (relative to public/vendor/laraconman/images/)\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  player: {\n    name: 'Player',\n    image: '/vendor/laraconman/images/player.svg',\n    size: 32\n  },\n  ghosts: [{\n    name: 'NullPointer',\n    image: '/vendor/laraconman/images/ghost-blinky.svg',\n    size: 32\n  }, {\n    name: 'PushProduction',\n    image: '/vendor/laraconman/images/ghost-pinky.svg',\n    size: 32\n  }, {\n    name: 'Glitchy',\n    image: '/vendor/laraconman/images/ghost-inky.svg',\n    size: 32\n  }, {\n    name: 'Regexorcist',\n    image: '/vendor/laraconman/images/ghost-clyde.svg',\n    size: 32\n  }, {\n    name: 'RaceCondition',\n    image: '/vendor/laraconman/images/ghost-blinky.svg',\n    size: 32\n  }, {\n    name: 'HeapReaper',\n    image: '/vendor/laraconman/images/ghost-pinky.svg',\n    size: 32\n  }, {\n    name: 'GhostException',\n    image: '/vendor/laraconman/images/ghost-inky.svg',\n    size: 32\n  }, {\n    name: 'StackOverghost',\n    image: '/vendor/laraconman/images/ghost-clyde.svg',\n    size: 32\n  }, {\n    name: 'SyntaxTerror',\n    image: '/vendor/laraconman/images/ghost-blinky.svg',\n    size: 32\n  }],\n  dot: {\n    image: '/vendor/laraconman/images/dot.svg',\n    size: 8\n  },\n  powerPellets: [{\n    name: 'Classic',\n    image: '/vendor/laraconman/images/power-pellet-classic.svg',\n    size: 16\n  }, {\n    name: 'Star',\n    image: '/vendor/laraconman/images/power-pellet-star.svg',\n    size: 16\n  }],\n  fruit: [{\n    name: 'Cherry',\n    image: '/vendor/laraconman/images/fruit-cherry.svg',\n    size: 20\n  }, {\n    name: 'Strawberry',\n    image: '/vendor/laraconman/images/fruit-strawberry.svg',\n    size: 20\n  }]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2VudGl0eS1hcnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7O0FBRUEsaUVBQWU7RUFDWEEsTUFBTSxFQUFFO0lBQ0pDLElBQUksRUFBRSxRQUFRO0lBQ2RDLEtBQUssRUFBRSxzQ0FBc0M7SUFDN0NDLElBQUksRUFBRTtFQUNWLENBQUM7RUFDREMsTUFBTSxFQUFFLENBQ0o7SUFBRUgsSUFBSSxFQUFFLGFBQWE7SUFBS0MsS0FBSyxFQUFFLDRDQUE0QztJQUFFQyxJQUFJLEVBQUU7RUFBRyxDQUFDLEVBQ3pGO0lBQUVGLElBQUksRUFBRSxnQkFBZ0I7SUFBUUMsS0FBSyxFQUFFLDJDQUEyQztJQUFHQyxJQUFJLEVBQUU7RUFBRyxDQUFDLEVBQy9GO0lBQUVGLElBQUksRUFBRSxTQUFTO0lBQVNDLEtBQUssRUFBRSwwQ0FBMEM7SUFBSUMsSUFBSSxFQUFFO0VBQUcsQ0FBQyxFQUN6RjtJQUFFRixJQUFJLEVBQUUsYUFBYTtJQUFLQyxLQUFLLEVBQUUsMkNBQTJDO0lBQUdDLElBQUksRUFBRTtFQUFHLENBQUMsRUFDekY7SUFBRUYsSUFBSSxFQUFFLGVBQWU7SUFBR0MsS0FBSyxFQUFFLDRDQUE0QztJQUFFQyxJQUFJLEVBQUU7RUFBRyxDQUFDLEVBQ3pGO0lBQUVGLElBQUksRUFBRSxZQUFZO0lBQU1DLEtBQUssRUFBRSwyQ0FBMkM7SUFBR0MsSUFBSSxFQUFFO0VBQUcsQ0FBQyxFQUN6RjtJQUFFRixJQUFJLEVBQUUsZ0JBQWdCO0lBQUVDLEtBQUssRUFBRSwwQ0FBMEM7SUFBSUMsSUFBSSxFQUFFO0VBQUcsQ0FBQyxFQUN6RjtJQUFFRixJQUFJLEVBQUUsZ0JBQWdCO0lBQUVDLEtBQUssRUFBRSwyQ0FBMkM7SUFBR0MsSUFBSSxFQUFFO0VBQUcsQ0FBQyxFQUN6RjtJQUFFRixJQUFJLEVBQUUsY0FBYztJQUFJQyxLQUFLLEVBQUUsNENBQTRDO0lBQUVDLElBQUksRUFBRTtFQUFHLENBQUMsQ0FDNUY7RUFDREUsR0FBRyxFQUFFO0lBQ0RILEtBQUssRUFBRSxtQ0FBbUM7SUFDMUNDLElBQUksRUFBRTtFQUNWLENBQUM7RUFDREcsWUFBWSxFQUFFLENBQ1Y7SUFBRUwsSUFBSSxFQUFFLFNBQVM7SUFBRUMsS0FBSyxFQUFFLG9EQUFvRDtJQUFFQyxJQUFJLEVBQUU7RUFBRyxDQUFDLEVBQzFGO0lBQUVGLElBQUksRUFBRSxNQUFNO0lBQUtDLEtBQUssRUFBRSxpREFBaUQ7SUFBS0MsSUFBSSxFQUFFO0VBQUcsQ0FBQyxDQUM3RjtFQUNESSxLQUFLLEVBQUUsQ0FDSDtJQUFFTixJQUFJLEVBQUUsUUFBUTtJQUFHQyxLQUFLLEVBQUUsNENBQTRDO0lBQUdDLElBQUksRUFBRTtFQUFHLENBQUMsRUFDbkY7SUFBRUYsSUFBSSxFQUFFLFlBQVk7SUFBRUMsS0FBSyxFQUFFLGdEQUFnRDtJQUFFQyxJQUFJLEVBQUU7RUFBRyxDQUFDO0FBRWpHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9lbnRpdHktYXJ0LmpzPzAzMDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ2VudHJhbCBjb25maWcgZm9yIGVudGl0eSBhcnQgYXNzZXRzIGFuZCBtZXRhZGF0YVxuLy8gVXNlIFBORyBvciBTVkcgcGF0aHMgKHJlbGF0aXZlIHRvIHB1YmxpYy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvKVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcGxheWVyOiB7XG4gICAgICAgIG5hbWU6ICdQbGF5ZXInLFxuICAgICAgICBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvcGxheWVyLnN2ZycsXG4gICAgICAgIHNpemU6IDMyXG4gICAgfSxcbiAgICBnaG9zdHM6IFtcbiAgICAgICAgeyBuYW1lOiAnTnVsbFBvaW50ZXInLCAgICBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZ2hvc3QtYmxpbmt5LnN2ZycsIHNpemU6IDMyIH0sXG4gICAgICAgIHsgbmFtZTogJ1B1c2hQcm9kdWN0aW9uJywgICAgICAgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2dob3N0LXBpbmt5LnN2ZycsICBzaXplOiAzMiB9LFxuICAgICAgICB7IG5hbWU6ICdHbGl0Y2h5JywgICAgICAgIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9naG9zdC1pbmt5LnN2ZycsICAgc2l6ZTogMzIgfSxcbiAgICAgICAgeyBuYW1lOiAnUmVnZXhvcmNpc3QnLCAgICBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZ2hvc3QtY2x5ZGUuc3ZnJywgIHNpemU6IDMyIH0sXG4gICAgICAgIHsgbmFtZTogJ1JhY2VDb25kaXRpb24nLCAgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2dob3N0LWJsaW5reS5zdmcnLCBzaXplOiAzMiB9LFxuICAgICAgICB7IG5hbWU6ICdIZWFwUmVhcGVyJywgICAgIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9naG9zdC1waW5reS5zdmcnLCAgc2l6ZTogMzIgfSxcbiAgICAgICAgeyBuYW1lOiAnR2hvc3RFeGNlcHRpb24nLCBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZ2hvc3QtaW5reS5zdmcnLCAgIHNpemU6IDMyIH0sXG4gICAgICAgIHsgbmFtZTogJ1N0YWNrT3Zlcmdob3N0JywgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2dob3N0LWNseWRlLnN2ZycsICBzaXplOiAzMiB9LFxuICAgICAgICB7IG5hbWU6ICdTeW50YXhUZXJyb3InLCAgIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9naG9zdC1ibGlua3kuc3ZnJywgc2l6ZTogMzIgfVxuICAgIF0sXG4gICAgZG90OiB7XG4gICAgICAgIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9kb3Quc3ZnJyxcbiAgICAgICAgc2l6ZTogOFxuICAgIH0sXG4gICAgcG93ZXJQZWxsZXRzOiBbXG4gICAgICAgIHsgbmFtZTogJ0NsYXNzaWMnLCBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvcG93ZXItcGVsbGV0LWNsYXNzaWMuc3ZnJywgc2l6ZTogMTYgfSxcbiAgICAgICAgeyBuYW1lOiAnU3RhcicsICAgIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9wb3dlci1wZWxsZXQtc3Rhci5zdmcnLCAgICBzaXplOiAxNiB9XG4gICAgXSxcbiAgICBmcnVpdDogW1xuICAgICAgICB7IG5hbWU6ICdDaGVycnknLCAgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2ZydWl0LWNoZXJyeS5zdmcnLCAgc2l6ZTogMjAgfSxcbiAgICAgICAgeyBuYW1lOiAnU3RyYXdiZXJyeScsIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9mcnVpdC1zdHJhd2JlcnJ5LnN2ZycsIHNpemU6IDIwIH1cbiAgICBdXG59O1xuIl0sIm5hbWVzIjpbInBsYXllciIsIm5hbWUiLCJpbWFnZSIsInNpemUiLCJnaG9zdHMiLCJkb3QiLCJwb3dlclBlbGxldHMiLCJmcnVpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/js/entity-art.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/fx.js":
/*!***********************************!*\
  !*** ./resources/assets/js/fx.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   throttleLeading: () => (/* binding */ throttleLeading)\n/* harmony export */ });\n// further fx to come - send all ghosts to home, blow them all up, send pacman to co-ords or to a powerpill\n\n// Generic debounce utility\n// Usage: const debouncedFn = debounce(fn, wait)\nfunction debounce(fn) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n  var timeout;\n  return function () {\n    var _this = this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      return fn.apply(_this, args);\n    }, wait);\n  };\n}\nfunction throttleLeading(fn) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n  var locked = false;\n  return function () {\n    if (locked) return;\n    locked = true;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    fn.apply(this, args);\n    setTimeout(function () {\n      locked = false;\n    }, wait);\n  };\n}\n/* Quick Spin */\nfunction effect_quick_spin() {\n  movespeed = speed - 20;\n  ghostspeed = speed - 20;\n  effect_mushrooms = 1;\n  effectTimer = 60;\n  invincibility = 1;\n  document.getElementById(\"pacman-top\").style.background = \"orange\";\n  document.getElementById(\"pacman-bottom\").style.background = \"orange\";\n  wallColour(\"#6600ff\");\n  //eval (\"document.getElementById('pacman').classList.add('spin')\");\n  eval(\"document.getElementById('maze').classList.add('spin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.add('spin')\");\n  }\n}\nfunction effect_quick_spin_warn() {\n  eval(\"document.getElementById('maze').classList.remove('spin')\");\n  eval(\"document.getElementById('maze').classList.add('spin')\");\n}\nfunction effect_quick_spin_end() {\n  effect_mushrooms = 0;\n  wallColour(\"#3300ff\");\n  eval(\"document.getElementById('pacman').classList.remove('spin')\");\n  eval(\"document.getElementById('maze').classList.remove('spin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.remove('spin')\");\n  }\n  movespeed = speed;\n  ghostspeed = speed;\n  invincibility = 0;\n  document.getElementById(\"pacman-top\").style.background = \"yellow\";\n  document.getElementById(\"pacman-bottom\").style.background = \"yellow\";\n}\n\n/* Long spin */\n\nfunction effect_long_spin() {\n  movespeed = speed - 20;\n  ghostspeed = speed - 20;\n  effect_mushrooms = 1;\n  effectTimer = 150;\n  invincibility = 1;\n  document.getElementById(\"pacman-top\").style.background = \"orange\";\n  document.getElementById(\"pacman-bottom\").style.background = \"orange\";\n  wallColour(\"#6600ff\");\n  eval(\"document.getElementById('pacman').classList.add('spin')\");\n  eval(\"document.getElementById('maze').classList.add('longspin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.add('spin')\");\n  }\n}\nfunction effect_long_spin_warn() {\n  eval(\"document.getElementById('maze').classList.remove('longspin')\");\n  eval(\"document.getElementById('maze').classList.add('spin')\");\n}\nfunction effect_long_spin_end() {\n  effect_mushrooms = 0;\n  wallColour(\"#3300ff\");\n  eval(\"document.getElementById('pacman').classList.remove('spin')\");\n  eval(\"document.getElementById('maze').classList.remove('spin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.remove('spin')\");\n  }\n  movespeed = speed;\n  ghostspeed = speed;\n  invincibility = 0;\n  document.getElementById(\"pacman-top\").style.background = \"yellow\";\n  document.getElementById(\"pacman-bottom\").style.background = \"yellow\";\n}\nfunction effect_mushrooms() {\n  movespeed = speed - 20;\n  ghostspeed = speed - 20;\n  effect_mushrooms = 1;\n  effectTimer = 250;\n  invincibility = 1;\n  document.getElementById(\"pacman-top\").style.background = \"orange\";\n  document.getElementById(\"pacman-bottom\").style.background = \"orange\";\n  wallColour(\"#6600ff\");\n  eval(\"document.getElementById('pacman').classList.add('spin')\");\n  eval(\"document.getElementById('maze').classList.add('spin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.add('fastspin')\");\n  }\n}\nfunction effect_mushrooms_warn() {\n  eval(\"document.getElementById('maze').classList.remove('spin')\");\n  eval(\"document.getElementById('maze').classList.add('spin')\");\n  eval(\"document.getElementById('pacman').classList.remove('spin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.remove('fastspin')\");\n  }\n  movespeed = speed;\n  ghostspeed = speed;\n}\nfunction effect_mushrooms_end() {\n  effect_mushrooms = 0;\n  wallColour(\"#3300ff\");\n  eval(\"document.getElementById('pacman').classList.remove('spin')\");\n  eval(\"document.getElementById('maze').classList.remove('spin')\");\n  invincibility = 0;\n  document.getElementById(\"pacman-top\").style.background = \"yellow\";\n  document.getElementById(\"pacman-bottom\").style.background = \"yellow\";\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q2hFQSxJQUFJLENBQUUsdURBQXVELENBQUM7RUFDOUQsS0FBS0MsQ0FBQyxHQUFDLENBQUMsRUFBQ0EsQ0FBQyxHQUFDQyxZQUFZLEVBQUNELENBQUMsRUFBRSxFQUFDO0lBQ3hCRCxJQUFJLENBQUUsZ0NBQWdDLEdBQUdDLENBQUMsR0FBRyw4QkFBOEIsQ0FBQztFQUNoRjtBQUNKO0FBRUEsU0FBU08scUJBQXFCQSxDQUFBLEVBQUU7RUFDNUJSLElBQUksQ0FBRSwwREFBMEQsQ0FBQztFQUNqRUEsSUFBSSxDQUFFLHVEQUF1RCxDQUFDO0VBQzlEQSxJQUFJLENBQUUsNERBQTRELENBQUM7RUFDbkUsS0FBSUMsQ0FBQyxHQUFDLENBQUMsRUFBQ0EsQ0FBQyxHQUFDQyxZQUFZLEVBQUNELENBQUMsRUFBRSxFQUFDO0lBQ3ZCRCxJQUFJLENBQUUsZ0NBQWdDLEdBQUdDLENBQUMsR0FBRyxpQ0FBaUMsQ0FBQztFQUNuRjtFQUNBWixTQUFTLEdBQUNDLEtBQUs7RUFDZkMsVUFBVSxHQUFDRCxLQUFLO0FBQ3BCO0FBRUEsU0FBU21CLG9CQUFvQkEsQ0FBQSxFQUFFO0VBQzNCakIsZ0JBQWdCLEdBQUMsQ0FBQztFQUNsQk8sVUFBVSxDQUFDLFNBQVMsQ0FBQztFQUNyQkMsSUFBSSxDQUFFLDREQUE0RCxDQUFDO0VBQ25FQSxJQUFJLENBQUUsMERBQTBELENBQUM7RUFDakVOLGFBQWEsR0FBQyxDQUFDO0VBQ2ZDLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDQyxLQUFLLENBQUNDLFVBQVUsR0FBQyxRQUFRO0VBQy9ESCxRQUFRLENBQUNDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQ0MsS0FBSyxDQUFDQyxVQUFVLEdBQUMsUUFBUTtBQUN0RSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2Z4LmpzP2Y4MzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZnVydGhlciBmeCB0byBjb21lIC0gc2VuZCBhbGwgZ2hvc3RzIHRvIGhvbWUsIGJsb3cgdGhlbSBhbGwgdXAsIHNlbmQgcGFjbWFuIHRvIGNvLW9yZHMgb3IgdG8gYSBwb3dlcnBpbGxcblxuLy8gR2VuZXJpYyBkZWJvdW5jZSB1dGlsaXR5XG4vLyBVc2FnZTogY29uc3QgZGVib3VuY2VkRm4gPSBkZWJvdW5jZShmbiwgd2FpdClcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmbiwgd2FpdCA9IDMwMCkge1xuICAgIGxldCB0aW1lb3V0O1xuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IGZuLmFwcGx5KHRoaXMsIGFyZ3MpLCB3YWl0KTtcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlTGVhZGluZyhmbiwgd2FpdCA9IDEwMDApIHtcbiAgICBsZXQgbG9ja2VkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKGxvY2tlZCkgcmV0dXJuO1xuICAgICAgICBsb2NrZWQgPSB0cnVlO1xuICAgICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IGxvY2tlZCA9IGZhbHNlOyB9LCB3YWl0KTtcbiAgICB9O1xufVxuLyogUXVpY2sgU3BpbiAqL1xuZnVuY3Rpb24gZWZmZWN0X3F1aWNrX3NwaW4oKXtcbiAgICBtb3Zlc3BlZWQgPSBzcGVlZC0yMDtcbiAgICBnaG9zdHNwZWVkID0gc3BlZWQtMjA7XG4gICAgZWZmZWN0X211c2hyb29tcz0xO1xuICAgIGVmZmVjdFRpbWVyPTYwO1xuICAgIGludmluY2liaWxpdHk9MTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhY21hbi10b3BcIikuc3R5bGUuYmFja2dyb3VuZD1cIm9yYW5nZVwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFjbWFuLWJvdHRvbVwiKS5zdHlsZS5iYWNrZ3JvdW5kPVwib3JhbmdlXCI7XG4gICAgd2FsbENvbG91cihcIiM2NjAwZmZcIik7XG4gICAgLy9ldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWNtYW4nKS5jbGFzc0xpc3QuYWRkKCdzcGluJylcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbiAgICBmb3IgKGk9MDtpPHRvdGFsX2dob3N0cztpKyspe1xuICAgICAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaG9zdFwiICsgaSArIFwiJykuY2xhc3NMaXN0LmFkZCgnc3BpbicpXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZWZmZWN0X3F1aWNrX3NwaW5fd2Fybigpe1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hemUnKS5jbGFzc0xpc3QucmVtb3ZlKCdzcGluJylcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0X3F1aWNrX3NwaW5fZW5kKCl7XG4gICAgZWZmZWN0X211c2hyb29tcz0wO1xuICAgIHdhbGxDb2xvdXIoXCIjMzMwMGZmXCIpO1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhY21hbicpLmNsYXNzTGlzdC5yZW1vdmUoJ3NwaW4nKVwiKTtcbiAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXplJykuY2xhc3NMaXN0LnJlbW92ZSgnc3BpbicpXCIpO1xuICAgIGZvcihpPTA7aTx0b3RhbF9naG9zdHM7aSsrKXtcbiAgICAgICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2hvc3RcIiArIGkgKyBcIicpLmNsYXNzTGlzdC5yZW1vdmUoJ3NwaW4nKVwiKTtcbiAgICB9XG4gICAgbW92ZXNwZWVkPXNwZWVkO1xuICAgIGdob3N0c3BlZWQ9c3BlZWQ7XG4gICAgaW52aW5jaWJpbGl0eT0wO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFjbWFuLXRvcFwiKS5zdHlsZS5iYWNrZ3JvdW5kPVwieWVsbG93XCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWNtYW4tYm90dG9tXCIpLnN0eWxlLmJhY2tncm91bmQ9XCJ5ZWxsb3dcIjtcbn1cblxuLyogTG9uZyBzcGluICovXG5cbmZ1bmN0aW9uIGVmZmVjdF9sb25nX3NwaW4oKXtcbiAgICBtb3Zlc3BlZWQgPSBzcGVlZC0yMDtcbiAgICBnaG9zdHNwZWVkID0gc3BlZWQtMjA7XG4gICAgZWZmZWN0X211c2hyb29tcz0xO1xuICAgIGVmZmVjdFRpbWVyPTE1MDtcbiAgICBpbnZpbmNpYmlsaXR5PTE7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWNtYW4tdG9wXCIpLnN0eWxlLmJhY2tncm91bmQ9XCJvcmFuZ2VcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhY21hbi1ib3R0b21cIikuc3R5bGUuYmFja2dyb3VuZD1cIm9yYW5nZVwiO1xuICAgIHdhbGxDb2xvdXIoXCIjNjYwMGZmXCIpO1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhY21hbicpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbiAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXplJykuY2xhc3NMaXN0LmFkZCgnbG9uZ3NwaW4nKVwiKTtcbiAgICBmb3IgKGk9MDtpPHRvdGFsX2dob3N0cztpKyspe1xuICAgICAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaG9zdFwiICsgaSArIFwiJykuY2xhc3NMaXN0LmFkZCgnc3BpbicpXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZWZmZWN0X2xvbmdfc3Bpbl93YXJuKCl7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5yZW1vdmUoJ2xvbmdzcGluJylcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0X2xvbmdfc3Bpbl9lbmQoKXtcbiAgICBlZmZlY3RfbXVzaHJvb21zPTA7XG4gICAgd2FsbENvbG91cihcIiMzMzAwZmZcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFjbWFuJykuY2xhc3NMaXN0LnJlbW92ZSgnc3BpbicpXCIpO1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hemUnKS5jbGFzc0xpc3QucmVtb3ZlKCdzcGluJylcIik7XG4gICAgZm9yKGk9MDtpPHRvdGFsX2dob3N0cztpKyspe1xuICAgICAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaG9zdFwiICsgaSArIFwiJykuY2xhc3NMaXN0LnJlbW92ZSgnc3BpbicpXCIpO1xuICAgIH1cbiAgICBtb3Zlc3BlZWQ9c3BlZWQ7XG4gICAgZ2hvc3RzcGVlZD1zcGVlZDtcbiAgICBpbnZpbmNpYmlsaXR5PTA7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWNtYW4tdG9wXCIpLnN0eWxlLmJhY2tncm91bmQ9XCJ5ZWxsb3dcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhY21hbi1ib3R0b21cIikuc3R5bGUuYmFja2dyb3VuZD1cInllbGxvd1wiO1xufVxuXG5mdW5jdGlvbiBlZmZlY3RfbXVzaHJvb21zKCl7XG4gICAgbW92ZXNwZWVkID0gc3BlZWQtMjA7XG4gICAgZ2hvc3RzcGVlZCA9IHNwZWVkLTIwO1xuICAgIGVmZmVjdF9tdXNocm9vbXM9MTtcbiAgICBlZmZlY3RUaW1lcj0yNTA7XG4gICAgaW52aW5jaWJpbGl0eT0xO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFjbWFuLXRvcFwiKS5zdHlsZS5iYWNrZ3JvdW5kPVwib3JhbmdlXCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWNtYW4tYm90dG9tXCIpLnN0eWxlLmJhY2tncm91bmQ9XCJvcmFuZ2VcIjtcbiAgICB3YWxsQ29sb3VyKFwiIzY2MDBmZlwiKTtcbiAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWNtYW4nKS5jbGFzc0xpc3QuYWRkKCdzcGluJylcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbiAgICBmb3IgKGk9MDtpPHRvdGFsX2dob3N0cztpKyspe1xuICAgICAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaG9zdFwiICsgaSArIFwiJykuY2xhc3NMaXN0LmFkZCgnZmFzdHNwaW4nKVwiKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVmZmVjdF9tdXNocm9vbXNfd2Fybigpe1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hemUnKS5jbGFzc0xpc3QucmVtb3ZlKCdzcGluJylcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbiAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWNtYW4nKS5jbGFzc0xpc3QucmVtb3ZlKCdzcGluJylcIik7XG4gICAgZm9yKGk9MDtpPHRvdGFsX2dob3N0cztpKyspe1xuICAgICAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaG9zdFwiICsgaSArIFwiJykuY2xhc3NMaXN0LnJlbW92ZSgnZmFzdHNwaW4nKVwiKTtcbiAgICB9XG4gICAgbW92ZXNwZWVkPXNwZWVkO1xuICAgIGdob3N0c3BlZWQ9c3BlZWQ7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdF9tdXNocm9vbXNfZW5kKCl7XG4gICAgZWZmZWN0X211c2hyb29tcz0wO1xuICAgIHdhbGxDb2xvdXIoXCIjMzMwMGZmXCIpO1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhY21hbicpLmNsYXNzTGlzdC5yZW1vdmUoJ3NwaW4nKVwiKTtcbiAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXplJykuY2xhc3NMaXN0LnJlbW92ZSgnc3BpbicpXCIpO1xuICAgIGludmluY2liaWxpdHk9MDtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhY21hbi10b3BcIikuc3R5bGUuYmFja2dyb3VuZD1cInllbGxvd1wiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFjbWFuLWJvdHRvbVwiKS5zdHlsZS5iYWNrZ3JvdW5kPVwieWVsbG93XCI7XG59Il0sIm5hbWVzIjpbImRlYm91bmNlIiwiZm4iLCJ3YWl0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidGltZW91dCIsIl90aGlzIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJ0aHJvdHRsZUxlYWRpbmciLCJsb2NrZWQiLCJfbGVuMiIsIl9rZXkyIiwiZWZmZWN0X3F1aWNrX3NwaW4iLCJtb3Zlc3BlZWQiLCJzcGVlZCIsImdob3N0c3BlZWQiLCJlZmZlY3RfbXVzaHJvb21zIiwiZWZmZWN0VGltZXIiLCJpbnZpbmNpYmlsaXR5IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiYmFja2dyb3VuZCIsIndhbGxDb2xvdXIiLCJldmFsIiwiaSIsInRvdGFsX2dob3N0cyIsImVmZmVjdF9xdWlja19zcGluX3dhcm4iLCJlZmZlY3RfcXVpY2tfc3Bpbl9lbmQiLCJlZmZlY3RfbG9uZ19zcGluIiwiZWZmZWN0X2xvbmdfc3Bpbl93YXJuIiwiZWZmZWN0X2xvbmdfc3Bpbl9lbmQiLCJlZmZlY3RfbXVzaHJvb21zX3dhcm4iLCJlZmZlY3RfbXVzaHJvb21zX2VuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/js/fx.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/game.js":
/*!*************************************!*\
  !*** ./resources/assets/js/game.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings.js */ \"./resources/assets/js/settings.js\");\n/* harmony import */ var _fx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fx.js */ \"./resources/assets/js/fx.js\");\n/* harmony import */ var _input_handler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./input-handler.js */ \"./resources/assets/js/input-handler.js\");\n/* harmony import */ var _map_renderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map-renderer.js */ \"./resources/assets/js/map-renderer.js\");\n/* harmony import */ var _player_entity_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./player-entity.js */ \"./resources/assets/js/player-entity.js\");\n/* harmony import */ var _ghost_entity_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ghost-entity.js */ \"./resources/assets/js/ghost-entity.js\");\n/* harmony import */ var pathfinding__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! pathfinding */ \"./node_modules/pathfinding/index.js\");\n/* harmony import */ var pathfinding__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(pathfinding__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _entity_art_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./entity-art.js */ \"./resources/assets/js/entity-art.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _collectible_entity_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./collectible-entity.js */ \"./resources/assets/js/collectible-entity.js\");\n/* harmony import */ var _collectible_spawner_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./collectible-spawner.js */ \"./resources/assets/js/collectible-spawner.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n\n\n // Import PathFinding.js\n\n\n\n\n\n// Main game coordination using modular architecture\nvar Game = /*#__PURE__*/function () {\n  function Game() {\n    var _this = this;\n    _classCallCheck(this, Game);\n    _defineProperty(this, \"ghosts\", []);\n    this.canvas = null;\n    this.mapRenderer = null;\n    this.inputHandler = null;\n    this.gameState = 'welcome'; // welcome, stopped, playing, paused\n    this.currentMap = null;\n    this.player = null;\n\n    // Game elements initialized from settings\n    this.score = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].score;\n    this.lives = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lives;\n    this.level = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].level;\n    this.moveInc = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].moveInc;\n    this.speed = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].speed;\n    this.gameTime = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gameTime;\n    this.mazeSource = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mazeSource;\n    this.basicVision = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].basicVision;\n    this.resetModeOnResetGame = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].resetModeOnResetGame;\n    this.excludeReverseDirectionInRandomMode = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].excludeReverseDirectionInRandomMode;\n    this.fx = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fx;\n    this.extras = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].extras;\n    this.maxGhosts = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] && _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].maxGhosts || 3;\n\n    // Input handler: dump all input to console\n    this.inputHandler = new _input_handler_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n    this.inputHandler.setCallbacks({\n      onDirectionChange: function onDirectionChange(dir) {\n        return console.log('Direction:', dir);\n      },\n      onKeyPress: function (code, event) {\n        // Intercept Enter/Return for all platforms\n        code = code.toLowerCase();\n        if ((code === 'enter' || code === 'numpadenter' || code === 'return') && this.gameState === 'welcome') {\n          // Start the game\n          this.gameState = 'playing';\n          // Optionally: re-init player, collectibles, etc.\n          console.log('start that audio.');\n          return;\n        }\n        console.log(code);\n        console.log(this.gameState);\n      }.bind(this),\n      onPause: function onPause() {\n        return console.log('Pause requested');\n      },\n      onReset: function onReset() {\n        return console.log('Reset requested');\n      }\n    });\n\n    // Initialize when DOM is ready\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', function () {\n        return _this.init();\n      });\n    } else {\n      this.init();\n    }\n\n    // Add event emitter for tile events\n    this.tileEventEmitter = new TileEventEmitter();\n    this.ghostReleaseTimer = 0;\n    this.ghostReleaseInterval = 200; // frames between releases (adjustable)\n    this.ghostPool = _toConsumableArray(_entity_art_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].ghosts); // All possible ghosts\n    this.activeGhosts = []; // Ghosts currently in play\n    this.collisionEmitter = new (events__WEBPACK_IMPORTED_MODULE_8___default())();\n    this.ghostPenTimers = new Map(); // Track time each ghost spends in pen\n    this.ghostExitTimers = new Map(); // Track how long a ghost has been trying to exit\n    this.ghostExitTimeout = 2 * 60; // 2 seconds at 60fps\n    // Ghost pen timeout (in frames, from settings)\n    this.ghostPenTimeout = (_settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ghostPenTimeout || 2) * 60;\n    this.collisionCooldowns = new Map(); // Track entity collision cooldowns\n    this.collisionCooldownFrames = 30; // Half a second at 60fps\n\n    // Portal teleportation cooldowns to prevent loops\n    this.portalCooldowns = new Map(); // Track entity portal usage\n    this.portalCooldownFrames = 30; // Half second cooldown after teleport\n\n    // Listen for superdot pickup events\n    this.tileEventEmitter.on(function (event) {\n      if (event.type === 'superdot') {\n        console.log('Superdot event triggered:', event);\n        // Set player super state\n        if (_this.player && typeof _this.player.setSuperState === 'function') {\n          _this.player.setSuperState(true);\n          setTimeout(function () {\n            _this.player.setSuperState(false);\n          }, (_settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].megaPelletDuration || 5) * 1000);\n        }\n        // For each ghost not in pen, pick a random destination away from player\n        var player = _this.player;\n        var ghosts = _this.ghosts || [];\n        var mapData = _this.mapRenderer.mapData;\n        var minDistance = 6; // tiles away from player\n        var usedSpots = new Set();\n        ghosts.forEach(function (ghost, idx) {\n          if (ghost.state !== 'in_pen' && ghost.state !== 'exiting') {\n            var tries = 0;\n            var dest;\n            do {\n              var angle = Math.random() * 2 * Math.PI;\n              var dist = minDistance + Math.floor(Math.random() * 4) + idx;\n              var col = Math.max(1, Math.min(mapData[0].length - 2, player.col + Math.round(Math.cos(angle) * dist)));\n              var row = Math.max(1, Math.min(mapData.length - 2, player.row + Math.round(Math.sin(angle) * dist)));\n              dest = {\n                col: col,\n                row: row\n              };\n              tries++;\n            } while ((mapData[dest.row][dest.col] !== _this.mapRenderer.TILES.EMPTY || usedSpots.has(\"\".concat(dest.col, \",\").concat(dest.row))) && tries < 10);\n            usedSpots.add(\"\".concat(dest.col, \",\").concat(dest.row));\n            ghost.setDestination(dest, mapData);\n            // Immediately update ghost direction and path\n            if (typeof ghost.moveToDestination === 'function') {\n              ghost.pathStep = 1;\n              ghost.moveToDestination();\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize the game\n   */\n  return _createClass(Game, [{\n    key: \"init\",\n    value: function init() {\n      this.canvas = document.getElementById('gameCanvas');\n      if (!this.canvas) {\n        console.error('Game canvas not found');\n        return;\n      }\n      this.gameState = 'welcome';\n\n      // --- Maze rendering integration ---\n      var csv = window.laraconmanMazeCsv;\n      if (csv) {\n        var _mapArray$;\n        // Parse CSV and load into MapRenderer\n        var mapArray = Game.parseAndAdaptMazeCsv(csv);\n        var width = ((_mapArray$ = mapArray[0]) === null || _mapArray$ === void 0 ? void 0 : _mapArray$.length) || 0;\n        var height = mapArray.length;\n        this.mapRenderer = new _map_renderer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.canvas);\n        // MapRenderer expects CSV string, so rejoin for compatibility\n        var normalizedCsv = mapArray.map(function (row) {\n          return row.join(',');\n        }).join('\\n');\n        this.mapRenderer.loadMap(normalizedCsv, width, height);\n        this.mapRenderer.render();\n        this.initPlayer(this.mapRenderer.mapData, this.mapRenderer.tileSize);\n        this.initCollectibles();\n        this.initEventListeners();\n        this.gameLoop();\n      }\n      console.log('Game initialized');\n    }\n  }, {\n    key: \"initCollectibles\",\n    value: function initCollectibles() {\n      // Use the map and tile types from mapRenderer\n      var mapData = this.mapRenderer.mapData;\n      var tileTypes = this.mapRenderer.TILES;\n      var spawner = new _collectible_spawner_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](mapData, tileTypes);\n      var _spawner$spawnCollect = spawner.spawnCollectibles(),\n        superdots = _spawner$spawnCollect.superdots,\n        dots = _spawner$spawnCollect.dots,\n        fruit = _spawner$spawnCollect.fruit;\n      this.dots = dots;\n      this.fruit = fruit;\n      this.superdots = superdots;\n    }\n  }, {\n    key: \"initEventListeners\",\n    value: function initEventListeners() {\n      var _this2 = this;\n      this.collisionEmitter.on('collision-consumable', function (_ref) {\n        var player = _ref.player,\n          consumed = _ref.consumed;\n        if (!consumed || !consumed.type) {\n          return;\n        }\n        _this2.setScore(_this2.getScore() + consumed.options.points);\n        // Remove dot from this.dots if it is a dot\n        if (consumed.type === _this2.mapRenderer.TILES.DOT) {\n          _this2.dots = _this2.dots.filter(function (dot) {\n            return !(dot.col === consumed.col && dot.row === consumed.row);\n          });\n          return;\n        } else if (consumed.type === _this2.mapRenderer.TILES.SUPER_DOT) {\n          _this2.superdots = _this2.superdots.filter(function (dot) {\n            return !(dot.col === consumed.col && dot.row === consumed.row);\n          });\n          if (_this2.mapRenderer && _this2.mapRenderer.mapData) {\n            _this2.mapRenderer.mapData[consumed.row][consumed.col] = _this2.mapRenderer.TILES.EMPTY;\n          }\n          if (player && typeof player.setSuperState === 'function') {\n            player.setSuperState(true);\n            setTimeout(function () {\n              player.setSuperState(false);\n            }, (_settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].megaPelletDuration || 5) * 1000);\n            console.log('user is a super dot!');\n          } else {\n            console.log('fn or player no exist.');\n          }\n        } else if (consumed.type === _this2.mapRenderer.TILES.FRUIT) {\n          console.log('its a fruit!');\n          _this2.fruit = _this2.fruit.filter(function (fruit) {\n            return !(fruit.col === consumed.col && fruit.row === consumed.row);\n          });\n        }\n      });\n      // Add default event handlers for collisions\n      this.collisionEmitter.on('collision-ghost', function (_ref2) {\n        var player = _ref2.player,\n          ghost = _ref2.ghost;\n        console.log('Player collided with ghost:', ghost.displayName || ghost.color);\n      });\n\n      // Debounced player-eaten event handler\n      this.collisionEmitter.on('player-eaten', (0,_fx_js__WEBPACK_IMPORTED_MODULE_1__.throttleLeading)(function (_ref3) {\n        var player = _ref3.player,\n          ghost = _ref3.ghost;\n        // Animate player death, decrement lives, respawn player\n        _this2.lives -= 1;\n        if (player && typeof player.die === 'function') {\n          player.die();\n        }\n        _this2.gameState = 'stopped';\n        _this2.updateUI && _this2.updateUI();\n        if (_this2.lives > 0) {\n          if (typeof _this2.initPlayer === 'function') {\n            _this2.initPlayer(_this2.mapRenderer.mapData, _this2.mapRenderer.tileSize);\n            _this2.inputHandler.setCallbacks({\n              onDirectionChange: function onDirectionChange(dir) {\n                return _this2.player.setDirection(dir);\n              }\n            });\n          }\n          _this2.gameState = 'playing';\n        } else {\n          _this2.gameState = 'stopped';\n          _this2.updateUI && _this2.updateUI();\n        }\n        console.log(_this2.gameState);\n      }, 1500));\n      this.collisionEmitter.on('ghost-eaten', function (_ref4) {\n        var player = _ref4.player,\n          ghost = _ref4.ghost,\n          points = _ref4.points;\n        // Example: Animate ghost death, award points\n        if (ghost && typeof ghost.die === 'function') {\n          ghost.die(); // You may want to implement this\n        }\n        // Banish ghost to pen (set to first GHOST_SPAWN tile found)\n        var map = _this2.mapRenderer.mapData;\n        var found = false;\n        for (var r = 0; r < map.length && !found; r++) {\n          for (var c = 0; c < map[0].length && !found; c++) {\n            if (map[r][c] === _this2.mapRenderer.TILES.GHOST_SPAWN) {\n              ghost.col = c;\n              ghost.row = r;\n              ghost.x = c * _this2.mapRenderer.tileSize;\n              ghost.y = r * _this2.mapRenderer.tileSize;\n              ghost.state = 'in_pen';\n              found = true;\n              break;\n            }\n          }\n        }\n        _this2.score += points;\n        _this2.updateUI && _this2.updateUI();\n      });\n    }\n\n    /**\n     * Utility: Parse and adapt CSV maze data from Blade\n     * Converts pass-through tunnel (4) to renderer's tunnel (5) if needed\n     */\n  }, {\n    key: \"setupUI\",\n    value:\n    /**\n     * Set up UI event listeners\n     */\n    function setupUI() {\n      var _this3 = this;\n      var startBtn = document.getElementById('startBtn');\n      var pauseBtn = document.getElementById('pauseBtn');\n      var resetBtn = document.getElementById('resetBtn');\n      if (startBtn) {\n        startBtn.addEventListener('click', function () {\n          return _this3.startGame();\n        });\n      }\n      if (pauseBtn) {\n        pauseBtn.addEventListener('click', function () {\n          return _this3.togglePause();\n        });\n      }\n      if (resetBtn) {\n        resetBtn.addEventListener('click', function () {\n          return _this3.resetGame();\n        });\n      }\n    }\n\n    /**\n     * Load map data from DOM (passed from PHP)\n     */\n  }, {\n    key: \"loadMapFromDOM\",\n    value: function loadMapFromDOM() {\n      // Look for map data in a script tag or data attribute\n      var mapDataScript = document.getElementById('mapData');\n      if (mapDataScript) {\n        try {\n          this.currentMap = JSON.parse(mapDataScript.textContent);\n          this.loadMap(this.currentMap);\n        } catch (e) {\n          console.error('Failed to parse map data:', e);\n        }\n      } else {\n        // Fallback: look for global window variable\n        if (window.gameMapData) {\n          this.currentMap = window.gameMapData;\n          this.loadMap(this.currentMap);\n        } else {\n          console.warn('No map data found. Using test map.');\n          this.loadTestMap();\n        }\n      }\n    }\n\n    /**\n     * Load a map into the renderer\n     * @param {object} mapData - Map data from database\n     */\n  }, {\n    key: \"loadMap\",\n    value: function loadMap(mapData) {\n      if (!mapData || !mapData.design) {\n        console.error('Invalid map data');\n        return;\n      }\n      console.log('Loading map:', mapData.name);\n\n      // Load map into renderer\n      this.mapRenderer.loadMap(mapData.design, mapData.width, mapData.height);\n\n      // Render the map\n      this.mapRenderer.render();\n\n      // Update UI\n      this.updateUI();\n    }\n\n    /**\n     * Load a test map for development\n     */\n  }, {\n    key: \"loadTestMap\",\n    value: function loadTestMap() {\n      var testMap = {\n        name: 'Test Map',\n        width: 19,\n        height: 21,\n        design: \"1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\\n1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1\\n1,2,1,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1\\n1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1\\n1,2,1,1,2,1,2,1,1,1,1,1,2,1,2,1,1,2,1\\n1,2,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,2,1\\n1,1,1,1,2,1,1,1,0,1,0,1,1,1,2,1,1,1,1\\n0,0,0,1,2,1,0,0,0,0,0,0,0,1,2,1,0,0,0\\n1,1,1,1,2,1,0,1,3,3,3,1,0,1,2,1,1,1,1\\n4,0,0,0,2,0,0,1,0,0,0,1,0,0,2,0,0,0,4\\n1,1,1,1,2,1,0,1,1,1,1,1,0,1,2,1,1,1,1\\n0,0,0,1,2,1,0,0,0,0,0,0,0,1,2,1,0,0,0\\n1,1,1,1,2,1,1,1,0,1,0,1,1,1,2,1,1,1,1\\n1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1\\n1,2,1,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1\\n1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1\\n1,1,2,1,2,1,2,1,1,1,1,1,2,1,2,1,2,1,1\\n1,2,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,2,1\\n1,2,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,2,1\\n1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1\\n1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n      };\n      this.currentMap = testMap;\n      this.loadMap(testMap);\n    }\n\n    /**\n     * Start the game\n     */\n  }, {\n    key: \"startGame\",\n    value: function startGame() {\n      if (this.gameState === 'stopped') {\n        this.gameState = 'playing';\n        this.updateUI();\n        console.log('Game started');\n\n        // TODO: Initialize player and ghosts\n      } else if (this.gameState === 'paused') {\n        this.gameState = 'playing';\n        this.updateUI();\n        console.log('Game resumed');\n      }\n    }\n\n    /**\n     * Toggle pause state\n     */\n  }, {\n    key: \"togglePause\",\n    value: function togglePause() {\n      if (this.gameState === 'playing') {\n        this.gameState = 'paused';\n        console.log('Game paused');\n      } else if (this.gameState === 'paused') {\n        this.gameState = 'playing';\n        console.log('Game resumed');\n      }\n      this.updateUI();\n    }\n\n    /**\n     * Reset the game\n     */\n  }, {\n    key: \"resetGame\",\n    value: function resetGame() {\n      this.gameState = 'stopped';\n      this.score = 0;\n      this.lives = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lives;\n\n      // Reset input handler\n      this.inputHandler.reset();\n\n      // Reload current map\n      if (this.currentMap) {\n        this.loadMap(this.currentMap);\n      }\n      this.updateUI();\n      console.log('Game reset');\n    }\n\n    /**\n     * Handle direction changes from input\n     * @param {string} direction - New movement direction\n     */\n  }, {\n    key: \"handleDirectionChange\",\n    value: function handleDirectionChange(direction) {\n      if (this.gameState !== 'playing') return;\n      console.log('Direction changed:', direction);\n      // TODO: Update player movement direction\n    }\n\n    /**\n     * Update UI elements\n     */\n  }, {\n    key: \"updateUI\",\n    value: function updateUI() {\n      // Update score\n      var scoreElement = document.getElementById('score');\n      if (scoreElement) {\n        scoreElement.textContent = this.score;\n      }\n\n      // Update lives\n      var livesElement = document.getElementById('lives');\n      if (livesElement) {\n        livesElement.textContent = this.lives;\n      }\n\n      // Update button states\n      var startBtn = document.getElementById('startBtn');\n      var pauseBtn = document.getElementById('pauseBtn');\n      if (startBtn) {\n        startBtn.textContent = this.gameState === 'stopped' ? 'Start Game' : 'Resume';\n        startBtn.disabled = this.gameState === 'playing';\n      }\n      if (pauseBtn) {\n        pauseBtn.textContent = this.gameState === 'paused' ? 'Resume' : 'Pause';\n        pauseBtn.disabled = this.gameState === 'stopped';\n      }\n    }\n\n    /**\n     * Get current game state\n     * @returns {string} Current game state\n     */\n  }, {\n    key: \"getGameState\",\n    value: function getGameState() {\n      return this.gameState;\n    }\n\n    /**\n     * Get current map data\n     * @returns {object} Current map data\n     */\n  }, {\n    key: \"getCurrentMap\",\n    value: function getCurrentMap() {\n      return this.currentMap;\n    }\n\n    /**\n     * Initialize player entity\n     * @param {array} mapData - Map data\n     * @param {number} tileSize - Tile size\n     */\n  }, {\n    key: \"initPlayer\",\n    value: function initPlayer(mapData, tileSize) {\n      var _this4 = this;\n      // Find ghost pen tiles\n      var penTiles = [];\n      for (var r = 0; r < mapData.length; r++) {\n        for (var c = 0; c < mapData[0].length; c++) {\n          if (mapData[r][c] === this.mapRenderer.TILES.GHOST_SPAWN) {\n            penTiles.push({\n              col: c,\n              row: r\n            });\n          }\n        }\n      }\n      // Find center-most tile below the pen that is EMPTY\n      var playerStart = {\n        col: 1,\n        row: 1\n      };\n      if (penTiles.length > 0) {\n        // Compute center col of pen\n        var penCols = penTiles.map(function (t) {\n          return t.col;\n        });\n        var penRows = penTiles.map(function (t) {\n          return t.row;\n        });\n        var minCol = Math.min.apply(Math, _toConsumableArray(penCols)),\n          maxCol = Math.max.apply(Math, _toConsumableArray(penCols));\n        var maxRow = Math.max.apply(Math, _toConsumableArray(penRows)); // <--- added this line\n        var centerCol = Math.round((minCol + maxCol) / 2);\n        // Search downward from just below pen, only at centerCol\n        for (var _r = maxRow + 1; _r < mapData.length - 1; _r++) {\n          if (mapData[_r][centerCol] === this.mapRenderer.TILES.EMPTY) {\n            playerStart = {\n              col: centerCol,\n              row: _r\n            };\n            break;\n          }\n        }\n      } else {\n        // fallback to old logic\n        outer: for (var _r2 = 1; _r2 < mapData.length - 1; _r2++) {\n          for (var _c = 1; _c < mapData[0].length - 1; _c++) {\n            if (mapData[_r2][_c] === 0) {\n              playerStart = {\n                col: _c,\n                row: _r2\n              };\n              break outer;\n            }\n          }\n        }\n      }\n      var speed = 2;\n      this.player = new _player_entity_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](playerStart.col, playerStart.row, tileSize, mapData, _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n      if (this.inputHandler && typeof this.inputHandler.setCallbacks === 'function') {\n        this.inputHandler.setCallbacks({\n          onDirectionChange: function onDirectionChange(dir) {\n            if (_this4.player) _this4.player.setDirection(dir);\n          }\n        });\n      }\n    }\n\n    /**\n     * --- COLLISION DETECTION: ALL COLLISION LOGIC HERE ---\n     * Check for item collision and emit event\n     */\n  }, {\n    key: \"checkCollisions\",\n    value: function checkCollisions(entity) {\n      // Ghost collision\n      var _iterator = _createForOfIteratorHelper(this.ghosts),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ghost = _step.value;\n          if (ghost.col === entity.col && ghost.row === entity.row) {\n            if (entity.state == 'normal') {\n              // Player is not super: lose a life, respawn, etc.\n              var points = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].playerDeathPoints || 0; // Usually 0 for player death\n              this.collisionEmitter.emit('player-eaten', {\n                player: entity,\n                ghost: ghost,\n                points: points\n              });\n            } else {\n              var _ghost$options;\n              // Player is super: eat the ghost, award points\n              var _points = ((_ghost$options = ghost.options) === null || _ghost$options === void 0 ? void 0 : _ghost$options.points) || _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ghostPoints || 200;\n              this.collisionEmitter.emit('ghost-eaten', {\n                player: entity,\n                ghost: ghost,\n                points: _points\n              });\n              this.score += _points;\n            }\n            this.updateUI && this.updateUI();\n            return;\n          }\n        }\n        // Fruit collision\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(this.fruit || []),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var fruit = _step2.value;\n          if (fruit.col === entity.col && fruit.row === entity.row) {\n            fruit.type = this.mapRenderer.TILES.FRUIT;\n            this.collisionEmitter.emit('collision-consumable', {\n              player: entity,\n              consumed: fruit\n            });\n            return;\n          }\n        }\n        // Dot collision\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      for (var i = this.dots.length - 1; i >= 0; i--) {\n        var sprite = this.dots[i];\n        if (sprite.col === entity.col && sprite.row === entity.row) {\n          // Handle dot collision (fire event, remove dot, etc.)\n          sprite.type = this.mapRenderer.TILES.DOT;\n          this.collisionEmitter.emit('collision-consumable', {\n            player: entity,\n            consumed: sprite\n          });\n          return;\n        }\n      }\n      // Superdot collision\n      if (this.superdots && this.superdots.length) {\n        for (var _i = this.superdots.length - 1; _i >= 0; _i--) {\n          var _sprite = this.superdots[_i];\n          if (_sprite.col === entity.col && _sprite.row === entity.row) {\n            //                    console.log('superdot collision');\n            // Handle superdot collision\n            _sprite.type = this.mapRenderer.TILES.SUPER_DOT;\n            this.collisionEmitter.emit('collision-consumable', {\n              player: entity,\n              consumed: _sprite\n            });\n            return;\n          }\n        }\n      }\n\n      // Portal collision\n      var tile = this.mapRenderer.mapData[entity.row][entity.col];\n      if (tile === this.mapRenderer.TILES.PORTAL) {\n        var entityType = entity.type;\n        var portalKey = \"\".concat(entityType, \":portal:\").concat(entity.col, \",\").concat(entity.row);\n        var cooldown = this.portalCooldowns.get(portalKey) || 0;\n        if (cooldown === 0) {\n          var dest = this.findOppositePortal(entity.col, entity.row);\n          if (dest) {\n            // Set cooldown for both entry and exit portal\n            var destKey = \"\".concat(entityType, \":portal:\").concat(dest.col, \",\").concat(dest.row);\n            this.portalCooldowns.set(portalKey, this.portalCooldownFrames);\n            this.portalCooldowns.set(destKey, this.portalCooldownFrames);\n            // Move entity one block away from portal exit toward map center\n            var dCol = 0,\n              dRow = 0;\n            var centerCol = Math.floor(this.mapRenderer.mapData[0].length / 2);\n            if (dest.col < centerCol) dCol = 1;else if (dest.col > centerCol) dCol = -1;\n            // If vertical tunnel, bias row\n            var centerRow = Math.floor(this.mapRenderer.mapData.length / 2);\n            if (dest.row < centerRow) dRow = 1;else if (dest.row > centerRow) dRow = -1;\n            var newCol = dest.col + dCol;\n            var newRow = dest.row + dRow;\n            // Only move if new tile is walkable\n            var walkable = [this.mapRenderer.TILES.EMPTY, this.mapRenderer.TILES.DOT, this.mapRenderer.TILES.SUPER_DOT];\n            if (newCol >= 0 && newCol < this.mapRenderer.mapData[0].length && newRow >= 0 && newRow < this.mapRenderer.mapData.length && walkable.includes(this.mapRenderer.mapData[newRow][newCol])) {\n              this.teleportEntity(entity, {\n                col: newCol,\n                row: newRow\n              });\n              // Set cooldown for the ejection tile as well\n              var ejectionKey = \"\".concat(entityType, \":portal:\").concat(newCol, \",\").concat(newRow);\n              this.portalCooldowns.set(ejectionKey, this.portalCooldownFrames);\n            } else {\n              this.teleportEntity(entity, dest);\n            }\n            // Emit appropriate event\n            var col = entity.col,\n              row = entity.row;\n            if (entityType === 'player') {\n              if (dCol !== 0) col += dCol;\n              this.collisionEmitter.emit('player-portal', {\n                player: entity,\n                from: {\n                  col: col,\n                  row: row\n                },\n                to: dest\n              });\n            } else if (entityType === 'ghost') {\n              this.collisionEmitter.emit('ghost-portal', {\n                ghost: entity,\n                from: {\n                  col: col,\n                  row: row\n                },\n                to: dest\n              });\n              entity.destination = null;\n              entity.path = null;\n              entity.pathStep = 0;\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Spawn a ghost at a random ghost spawn tile INSIDE THE PEN\n     */\n  }, {\n    key: \"spawnGhost\",\n    value: function spawnGhost() {\n      if (this.ghosts.length >= this.maxGhosts) return;\n\n      // Find all ghost spawn tiles inside the pen (classic: 2 rows x 4 cols above door)\n      var spawns = [];\n      var data = this.mapRenderer.mapData;\n      for (var r = 0; r < data.length; r++) {\n        for (var c = 0; c < data[0].length; c++) {\n          if (data[r][c] === this.mapRenderer.TILES.GHOST_SPAWN) spawns.push({\n            col: c,\n            row: r\n          });\n        }\n      }\n      if (spawns.length === 0) return;\n      // Pick a random pen tile for each new ghost\n      var idx = Math.floor(Math.random() * spawns.length);\n      var spawn = spawns[idx];\n      var usedNames = this.activeGhosts.map(function (g) {\n        return g.name;\n      });\n      var available = this.ghostPool.filter(function (g) {\n        return !usedNames.includes(g.name);\n      });\n      if (available.length === 0 || this.ghosts.length >= this.maxGhosts) return;\n      var ghostConfig = available[Math.floor(Math.random() * available.length)];\n      var ghostSpeed = 2;\n      var ghostColor = ghostConfig.color || '#FF0000';\n      var ghost = new _ghost_entity_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](spawn.col, spawn.row, this.mapRenderer.tileSize, this.mapRenderer.mapData, ghostSpeed, ghostColor, this.mapRenderer.TILES);\n      ghost.image = ghostConfig.image;\n      ghost.displayName = ghostConfig.name;\n      this.ghosts.push(ghost);\n      this.activeGhosts.push(ghostConfig);\n    }\n\n    /**\n     * Move ghosts with pathfinding to a random destination outside the pen\n     */\n  }, {\n    key: \"moveGhosts\",\n    value: function moveGhosts() {\n      var _this5 = this;\n      if (this.gameState == 'stopped') {\n        return;\n      }\n      var data = this.mapRenderer.mapData;\n      var penTiles = [];\n      for (var r = 0; r < data.length; r++) {\n        for (var c = 0; c < data[0].length; c++) {\n          if (data[r][c] === this.mapRenderer.TILES.GHOST_SPAWN) penTiles.push(\"\".concat(c, \",\").concat(r));\n        }\n      }\n      var _iterator3 = _createForOfIteratorHelper(this.ghosts),\n        _step3;\n      try {\n        var _loop = function _loop() {\n          var ghost = _step3.value;\n          if (ghost.state === 'in_pen') {\n            // Move randomly within pen\n            var dirs = ['up', 'down', 'left', 'right'].filter(function (dir) {\n              return ghost.canMove(dir);\n            });\n            if (dirs.length > 0) {\n              var dir = dirs[Math.floor(Math.random() * dirs.length)];\n              ghost.setDirection(dir);\n            }\n            // Fallback: force-evict after timeout\n            var t = _this5.ghostPenTimers.get(ghost) || 0;\n            _this5.ghostPenTimers.set(ghost, t + 1);\n            if (t + 1 > _this5.ghostPenTimeout) {\n              ghost.setState('exiting');\n              _this5.ghostPenTimers[\"delete\"](ghost);\n              // Pick a destination OUTSIDE the pen ONLY if not already set\n              if (!ghost.destination) {\n                var candidates = [];\n                for (var _r3 = 0; _r3 < data.length; _r3++) {\n                  for (var _c2 = 0; _c2 < data[0].length; _c2++) {\n                    var tile = data[_r3][_c2];\n                    if ((tile === _this5.mapRenderer.TILES.EMPTY || tile === _this5.mapRenderer.TILES.DOT || tile === _this5.mapRenderer.TILES.SUPER_DOT) && !penTiles.includes(\"\".concat(_c2, \",\").concat(_r3)) && !(ghost.col === _c2 && ghost.row === _r3)) {\n                      candidates.push({\n                        col: _c2,\n                        row: _r3\n                      });\n                    }\n                  }\n                }\n                if (candidates.length > 0) {\n                  var dest = candidates[Math.floor(Math.random() * candidates.length)];\n                  ghost.setDestination(dest, data);\n                }\n              }\n              ghost.moveToDestination();\n            } else {\n              ghost.move();\n            }\n          } else if (ghost.state === 'exiting') {\n            // Always move to destination if exiting\n            ghost.moveToDestination();\n            if (ghost.atDestination() && !penTiles.includes(\"\".concat(ghost.col, \",\").concat(ghost.row))) {\n              ghost.setState('active');\n            }\n          } else if (ghost.state === 'active') {\n            // If ghost is active and has no destination or has reached its destination, pick a new one\n            if (!ghost.destination || ghost.atDestination()) {\n              var _candidates = [];\n              for (var _r4 = 0; _r4 < data.length; _r4++) {\n                for (var _c3 = 0; _c3 < data[0].length; _c3++) {\n                  var _tile = data[_r4][_c3];\n                  if ((_tile === _this5.mapRenderer.TILES.EMPTY || _tile === _this5.mapRenderer.TILES.DOT || _tile === _this5.mapRenderer.TILES.SUPER_DOT) && !penTiles.includes(\"\".concat(_c3, \",\").concat(_r4))) {\n                    _candidates.push({\n                      col: _c3,\n                      row: _r4\n                    });\n                  }\n                }\n              }\n              if (_candidates.length > 0) {\n                var _dest = _candidates[Math.floor(Math.random() * _candidates.length)];\n                ghost.setDestination(_dest, data);\n              }\n            }\n            ghost.moveToDestination();\n          } else {\n            _this5.ghostPenTimers[\"delete\"](ghost);\n            ghost.move();\n          }\n        };\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n\n    /**\n     * Game loop\n     */\n  }, {\n    key: \"gameLoop\",\n    value:\n    /**\n     * Game loop\n     */\n    function gameLoop() {\n      var _this6 = this;\n      this.mapRenderer.render();\n      this.renderCollectibles(this.mapRenderer.ctx);\n      if (this.player) {\n        this.player.render(this.mapRenderer.ctx);\n        if (this.gameState == 'playing') {\n          this.player.move();\n          this.checkCollisions(this.player);\n        }\n      }\n      if (this.gameState === 'welcome') {\n        this.drawWelcomeScreen();\n      } else if (this.gameState === 'gameover') {\n        alert('f');\n      } else if (this.gameState == 'highscore') {\n        alert('butts');\n      } else {\n        this.moveGhosts();\n        var _iterator4 = _createForOfIteratorHelper(this.ghosts),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var ghost = _step4.value;\n            ghost.render(this.mapRenderer.ctx);\n          }\n\n          // Ghost release logic\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        this.ghostReleaseTimer++;\n        if (this.ghostReleaseTimer >= this.ghostReleaseInterval) {\n          this.spawnGhost();\n          this.ghostReleaseTimer = 0;\n        }\n\n        // Update collision cooldowns\n        this.updateCollisionCooldowns();\n      }\n      requestAnimationFrame(function () {\n        return _this6.gameLoop();\n      });\n    }\n  }, {\n    key: \"drawWelcomeScreen\",\n    value: function drawWelcomeScreen() {\n      this.drawOverlay('WakaWaka', 'Press Enter to Start');\n    }\n  }, {\n    key: \"drawOverlay\",\n    value: function drawOverlay(title, subtitle) {\n      var ctx = this.mapRenderer.ctx;\n      ctx.save();\n      ctx.globalAlpha = 0.8;\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.globalAlpha = 1.0;\n      ctx.fillStyle = 'white';\n      ctx.font = 'bold 32px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(title, ctx.canvas.width / 2, ctx.canvas.height / 2 - 20);\n      ctx.font = '24px Arial';\n      ctx.fillText(subtitle, ctx.canvas.width / 2, ctx.canvas.height / 2 + 30);\n      ctx.restore();\n    }\n  }, {\n    key: \"renderCollectibles\",\n    value: function renderCollectibles(ctx) {\n      var _this7 = this;\n      if (this.dots) this.dots.forEach(function (dot) {\n        return dot.render(ctx, _this7.mapRenderer.tileSize);\n      });\n      if (this.fruit) this.fruit.forEach(function (fruit) {\n        return fruit.render(ctx, _this7.mapRenderer.tileSize, _this7.mapRenderer.entityArt);\n      });\n    }\n\n    /**\n     * Get everything at a specific coordinate\n     */\n  }, {\n    key: \"getWhatIsAt\",\n    value: function getWhatIsAt(col, row) {\n      var result = {\n        tile: this.mapRenderer.mapData[row] ? this.mapRenderer.mapData[row][col] : null,\n        entities: []\n      };\n\n      // Check for other entities at this position\n      if (this.player && this.player.col === col && this.player.row === row) {\n        result.entities.push({\n          type: 'player',\n          entity: this.player\n        });\n      }\n      var _iterator5 = _createForOfIteratorHelper(this.ghosts),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var ghost = _step5.value;\n          if (ghost.col === col && ghost.row === row) {\n            result.entities.push({\n              type: 'ghost',\n              entity: ghost\n            });\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      if (this.pellets) {\n        var _iterator6 = _createForOfIteratorHelper(this.pellets),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var pellet = _step6.value;\n            if (pellet.col === col && pellet.row === row) {\n              result.entities.push({\n                type: 'pellet',\n                entity: pellet\n              });\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n      if (this.fruits) {\n        var _iterator7 = _createForOfIteratorHelper(this.fruits),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var fruit = _step7.value;\n            if (fruit.col === col && fruit.row === row) {\n              result.entities.push({\n                type: 'fruit',\n                entity: fruit\n              });\n            }\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Fire collision events for entity hitting something\n     */\n  }, {\n    key: \"fireCollisionEvents\",\n    value: function fireCollisionEvents(entity, collisions) {\n      var entityType = this.getEntityType(entity);\n\n      // Handle entity vs entity collisions\n      var _iterator8 = _createForOfIteratorHelper(collisions.entities),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var collision = _step8.value;\n          if (collision.entity === entity) continue; // Don't collide with self\n\n          var key = \"\".concat(entityType, \":\").concat(collision.type, \":\").concat(collision.entity.id || collision.entity.displayName || collision.entity.color);\n          if (entityType == 'ghost' && collision.type === 'ghost') {\n            return;\n          }\n          if (entityType === 'ghost' && collision.type === 'player') {\n            /**\n             * We ignore this one.\n             */\n            return;\n          } else if (entityType === 'player' && collision.type === 'ghost') {\n            // Player collided with ghost\n            var isSuper = typeof entity.isSuperState === 'function' ? entity.isSuperState() : false;\n            if (isSuper) {\n              var _collision$entity$opt;\n              console.log('super user');\n              // Player wins: ghost should go to pen, award points\n              var points = ((_collision$entity$opt = collision.entity.options) === null || _collision$entity$opt === void 0 ? void 0 : _collision$entity$opt.points) || _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ghostPoints || 200;\n              this.collisionEmitter.emit('ghost-eaten', {\n                player: entity,\n                ghost: collision.entity,\n                points: points\n              });\n            } else {\n              console.log('ghosty!');\n              // Ghost wins: player should respawn, lose life\n              var _points2 = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].playerDeathPoints || 0; // Usually 0 for player death\n              this.collisionEmitter.emit('player-eaten', {\n                player: entity,\n                ghost: collision.entity,\n                points: _points2\n              });\n            }\n            this.setEventCooldown(key);\n            continue;\n          }\n          if (this.shouldFireEvent(key)) {\n            this.collisionEmitter.emit(\"\".concat(entityType, \"-\").concat(collision.type), _defineProperty(_defineProperty({}, entityType, entity), collision.type, collision.entity));\n            this.setEventCooldown(key);\n          } else {\n            console.log(key);\n          }\n        }\n        // Handle tile collisions (portals, collectibles on map)\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      if (collisions.tile) {\n        this.handleTileCollision(entity, collisions.tile, entity.col, entity.row);\n      }\n    }\n\n    /**\n     * Teleport entity to destination\n     */\n  }, {\n    key: \"teleportEntity\",\n    value: function teleportEntity(entity, dest) {\n      entity.col = dest.col;\n      entity.row = dest.row;\n      entity.x = dest.col * entity.tileSize;\n      entity.y = dest.row * entity.tileSize;\n      entity.targetX = entity.x;\n      entity.targetY = entity.y;\n      entity.moving = false;\n    }\n\n    /**\n     * Get entity type string\n     */\n  }, {\n    key: \"getEntityType\",\n    value: function getEntityType(entity) {\n      if (entity === this.player) return 'player';\n      if (this.ghosts.includes(entity)) return 'ghost';\n      return 'unknown';\n    }\n\n    /**\n     * Check if event should fire (not in cooldown)\n     */\n  }, {\n    key: \"shouldFireEvent\",\n    value: function shouldFireEvent(key) {\n      var cooldown = this.collisionCooldowns.get(key) || 0;\n      return cooldown === 0;\n    }\n\n    /**\n     * Set event cooldown\n     */\n  }, {\n    key: \"setEventCooldown\",\n    value: function setEventCooldown(key) {\n      this.collisionCooldowns.set(key, this.collisionCooldownFrames);\n    }\n\n    /**\n     * Update collision cooldowns each frame\n     */\n  }, {\n    key: \"updateCollisionCooldowns\",\n    value: function updateCollisionCooldowns() {\n      // Decrement collision cooldowns\n      var _iterator9 = _createForOfIteratorHelper(this.collisionCooldowns.entries()),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _step9$value = _slicedToArray(_step9.value, 2),\n            key = _step9$value[0],\n            value = _step9$value[1];\n          if (value > 0) {\n            this.collisionCooldowns.set(key, value - 1);\n          }\n        }\n        // Decrement portal cooldowns\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      var _iterator0 = _createForOfIteratorHelper(this.portalCooldowns.entries()),\n        _step0;\n      try {\n        for (_iterator0.s(); !(_step0 = _iterator0.n()).done;) {\n          var _step0$value = _slicedToArray(_step0.value, 2),\n            _key = _step0$value[0],\n            _value = _step0$value[1];\n          if (_value > 0) {\n            this.portalCooldowns.set(_key, _value - 1);\n          }\n        }\n      } catch (err) {\n        _iterator0.e(err);\n      } finally {\n        _iterator0.f();\n      }\n    }\n\n    // Find the portal/tunnel tile on the opposite side\n  }, {\n    key: \"findOppositePortal\",\n    value: function findOppositePortal(col, row) {\n      var portals = [];\n      var map = this.mapRenderer.mapData;\n      for (var r = 0; r < map.length; r++) {\n        for (var c = 0; c < map[0].length; c++) {\n          if (map[r][c] === this.mapRenderer.TILES.PORTAL && (c !== col || r !== row)) {\n            portals.push({\n              col: c,\n              row: r\n            });\n          }\n        }\n      }\n      if (portals.length === 0) return null;\n      if (portals.length === 1) return portals[0];\n      // Try to match by row (left/right tunnels)\n      for (var _i2 = 0, _portals = portals; _i2 < _portals.length; _i2++) {\n        var p = _portals[_i2];\n        if (p.row === row) return p;\n      }\n      // If not found, try to match by column (top/bottom tunnels)\n      for (var _i3 = 0, _portals2 = portals; _i3 < _portals2.length; _i3++) {\n        var _p = _portals2[_i3];\n        if (_p.col === col) return _p;\n      }\n      // Fallback: pick the farthest (classic Pac-Man: left/right edge)\n      var maxDist = -1,\n        best = null;\n      for (var _i4 = 0, _portals3 = portals; _i4 < _portals3.length; _i4++) {\n        var _p2 = _portals3[_i4];\n        var dist = Math.abs(_p2.col - col) + Math.abs(_p2.row - row);\n        if (dist > maxDist) {\n          maxDist = dist;\n          best = _p2;\n        }\n      }\n      return best;\n    }\n\n    // Helper: bounding-box collision for entities\n  }, {\n    key: \"isEntityColliding\",\n    value: function isEntityColliding(a, b) {\n      var size = Math.min(a.tileSize, b.tileSize) * 0.6; // 60% of tile size for hitbox\n      return Math.abs(a.x - b.x) < size && Math.abs(a.y - b.y) < size;\n    }\n  }, {\n    key: \"setScore\",\n    value: function setScore(val) {\n      this.score = val;\n      console.log('Score updated:', val);\n      this.updateUI && this.updateUI();\n    }\n  }, {\n    key: \"getScore\",\n    value: function getScore() {\n      return this.score;\n    }\n  }], [{\n    key: \"parseAndAdaptMazeCsv\",\n    value: function parseAndAdaptMazeCsv(csvString) {\n      var rows = csvString.trim().split('\\n');\n      return rows.map(function (row) {\n        return row.trim().split(',').map(function (val) {\n          var n = Number(val.trim());\n          // Example: adapt 4 to 5 if renderer expects 5 for tunnel\n          // If MapRenderer expects 4 for tunnel, no change needed\n          return n;\n        });\n      });\n    }\n  }]);\n}(); // Utility to convert mapData to PathFinding.js grid format\nfunction makePFGrid(mapData, walkableTiles) {\n  var grid = [];\n  for (var r = 0; r < mapData.length; r++) {\n    var row = [];\n    for (var c = 0; c < mapData[0].length; c++) {\n      // 0 = walkable, 1 = blocked\n      row.push(walkableTiles.includes(mapData[r][c]) ? 0 : 1);\n    }\n    grid.push(row);\n  }\n  return new (pathfinding__WEBPACK_IMPORTED_MODULE_6___default().Grid)(grid);\n}\n\n// Add event emitter for tile events\nvar TileEventEmitter = /*#__PURE__*/function () {\n  function TileEventEmitter() {\n    _classCallCheck(this, TileEventEmitter);\n    this.listeners = [];\n  }\n  return _createClass(TileEventEmitter, [{\n    key: \"on\",\n    value: function on(cb) {\n      this.listeners.push(cb);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      this.listeners.forEach(function (cb) {\n        return cb(event);\n      });\n    }\n  }]);\n}(); // Initialize game when script loads\nvar game = new Game();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/game.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/ghost-entity.js":
/*!*********************************************!*\
  !*** ./resources/assets/js/ghost-entity.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GhostEntity)\n/* harmony export */ });\n/* harmony import */ var pathfinding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pathfinding */ \"./node_modules/pathfinding/index.js\");\n/* harmony import */ var pathfinding__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pathfinding__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// ghost-entity.js\n// Minimal, extensible GhostEntity class for movement, collision, and future pathfinding\n\n\nvar GhostEntity = /*#__PURE__*/function () {\n  function GhostEntity(startCol, startRow, tileSize, mapData) {\n    var speed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n    var color = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '#FF0000';\n    var tiles = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    var image = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n    _classCallCheck(this, GhostEntity);\n    this.col = startCol;\n    this.row = startRow;\n    this.tileSize = tileSize;\n    this.mapData = mapData; // reference to current map\n    this.direction = 'left'; // default\n    this.nextDirection = null;\n    this.speed = speed;\n    this.x = this.col * tileSize;\n    this.y = this.row * tileSize;\n    this.targetX = this.x;\n    this.targetY = this.y;\n    this.moving = false;\n    this.color = color;\n    this.image = image;\n    this.state = 'in_pen'; // 'in_pen', 'exiting', 'active'\n    this.exitTarget = null;\n    this.destination = null;\n    this.path = null;\n    this.pathStep = 0;\n    this.TILES = tiles;\n    this.lastPosition = null; // Track previous tile\n  }\n  return _createClass(GhostEntity, [{\n    key: \"setState\",\n    value: function setState(state) {\n      var exitTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this.state = state;\n      this.exitTarget = exitTarget;\n      // When entering 'exiting', clear previous destination if just left pen\n      if (state === 'exiting' && this.destination && this.state !== 'exiting') {\n        this.destination = null;\n        this.path = null;\n        this.pathStep = 0;\n      }\n    }\n  }, {\n    key: \"setDirection\",\n    value: function setDirection(dir) {\n      this.nextDirection = dir;\n    }\n  }, {\n    key: \"canMove\",\n    value: function canMove(dir) {\n      var _GhostEntity$directio = GhostEntity.directionDelta(dir),\n        _GhostEntity$directio2 = _slicedToArray(_GhostEntity$directio, 2),\n        dCol = _GhostEntity$directio2[0],\n        dRow = _GhostEntity$directio2[1];\n      var nCol = this.col + dCol;\n      var nRow = this.row + dRow;\n      if (nCol < 0 || nRow < 0 || nRow >= this.mapData.length || nCol >= this.mapData[0].length) return false;\n      // Allow movement on walkable tiles always if not in_pen\n\n      if (this.state === 'exiting') {\n\n        //            return walkable.some(Boolean);\n      }\n      if (this.state === 'exiting' || this.state === 'active') {\n        var walkable = [this.mapData[nRow][nCol] === this.TILES.EMPTY, this.mapData[nRow][nCol] === this.TILES.DOT, this.mapData[nRow][nCol] === this.TILES.SUPER_DOT, this.mapData[nRow][nCol] === this.TILES.GHOST_DOOR, this.mapData[nRow][nCol] === this.TILES.GHOST_SPAWN];\n        return walkable.some(Boolean);\n      }\n      // If in_pen, only allow movement inside pen (GHOST_SPAWN)\n      return this.mapData[nRow][nCol] === this.TILES.GHOST_SPAWN;\n    }\n  }, {\n    key: \"move\",\n    value: function move() {\n      if (!this.moving) {\n        if (this.nextDirection && this.canMove(this.nextDirection)) {\n          this.direction = this.nextDirection;\n          this.nextDirection = null;\n        }\n        if (this.canMove(this.direction)) {\n          var _GhostEntity$directio3 = GhostEntity.directionDelta(this.direction),\n            _GhostEntity$directio4 = _slicedToArray(_GhostEntity$directio3, 2),\n            dCol = _GhostEntity$directio4[0],\n            dRow = _GhostEntity$directio4[1];\n          this.targetX = (this.col + dCol) * this.tileSize;\n          this.targetY = (this.row + dRow) * this.tileSize;\n          this.moving = true;\n        }\n      }\n      if (this.moving) {\n        var dx = this.targetX - this.x;\n        var dy = this.targetY - this.y;\n        var dist = Math.sqrt(dx * dx + dy * dy);\n        if (dist <= this.speed) {\n          this.x = this.targetX;\n          this.y = this.targetY;\n          var _GhostEntity$directio5 = GhostEntity.directionDelta(this.direction),\n            _GhostEntity$directio6 = _slicedToArray(_GhostEntity$directio5, 2),\n            _dCol = _GhostEntity$directio6[0],\n            _dRow = _GhostEntity$directio6[1];\n          this.col += _dCol;\n          this.row += _dRow;\n          this.moving = false;\n        } else {\n          var angle = Math.atan2(dy, dx);\n          this.x += this.speed * Math.cos(angle);\n          this.y += this.speed * Math.sin(angle);\n        }\n      }\n    }\n  }, {\n    key: \"isAt\",\n    value: function isAt(col, row) {\n      return this.col === col && this.row === row;\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      var _this = this;\n      ctx.save();\n      if (this.image) {\n        // Draw PNG/SVG art\n        var img = this._artImg || (this._artImg = new Image());\n        if (!img.src) img.src = this.image;\n        if (img.complete) {\n          ctx.drawImage(img, this.x, this.y, this.tileSize, this.tileSize);\n        } else {\n          img.onload = function () {\n            ctx.drawImage(img, _this.x, _this.y, _this.tileSize, _this.tileSize);\n          };\n        }\n      } else {\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.x + this.tileSize / 2, this.y + this.tileSize / 2, this.tileSize / 2 - 2, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n      ctx.restore();\n    }\n  }, {\n    key: \"setDestination\",\n    value: function setDestination(dest, mapData) {\n      if (this.lastPosition && dest.col === this.lastPosition.col && dest.row === this.lastPosition.row) {\n        // Don't allow immediate reversal to previous position\n        return;\n      }\n      this.destination = dest;\n      // Convert mapData to PF grid for full maze\n      var walkable = [this.TILES.EMPTY, this.TILES.DOT, this.TILES.SUPER_DOT, this.TILES.GHOST_DOOR, this.TILES.GHOST_SPAWN];\n      var pfGrid = makePFGrid(mapData, walkable);\n      var finder = new (pathfinding__WEBPACK_IMPORTED_MODULE_0___default().AStarFinder)();\n      var pathArr = finder.findPath(this.col, this.row, dest.col, dest.row, pfGrid);\n      // Convert [col,row] array to [{col,row}] for compatibility\n      this.path = pathArr.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          c = _ref2[0],\n          r = _ref2[1];\n        return {\n          col: c,\n          row: r\n        };\n      });\n      this.pathStep = 1;\n    }\n  }, {\n    key: \"moveToDestination\",\n    value: function moveToDestination() {\n      // If path is missing or blocked, try to recompute a new path\n      if (!this.path || this.pathStep >= this.path.length) {\n        if (this.destination) {\n          this.path = GhostEntity.bfsPath(this.mapData, {\n            col: this.col,\n            row: this.row\n          }, this.destination);\n          this.pathStep = 1;\n        }\n        // If still no path, abandon destination\n        if (!this.path || this.path.length < 2) {\n          this.destination = null;\n          this.path = null;\n          this.pathStep = 0;\n          return;\n        }\n      }\n\n      // --- FORCE EXIT LOGIC ---\n      if (this.state === 'exiting') {\n        // If the next step is a GHOST_DOOR or EMPTY, always take it immediately\n        var _next = this.path[this.pathStep];\n        if (!_next) return;\n        var nextType = this.mapData[_next.row][_next.col];\n        if (nextType === this.TILES.GHOST_DOOR || nextType === this.TILES.EMPTY) {\n          if (_next.col > this.col) this.setDirection('right');else if (_next.col < this.col) this.setDirection('left');else if (_next.row > this.row) this.setDirection('down');else if (_next.row < this.row) this.setDirection('up');\n          this.move();\n          if (this.col === _next.col && this.row === _next.row) this.pathStep++;\n          return;\n        }\n      }\n      // Default: follow path\n      var next = this.path[this.pathStep];\n      if (!next) return;\n      if (this.col === next.col && this.row === next.row) {\n        this.lastPosition = {\n          col: this.col,\n          row: this.row\n        };\n      }\n      if (next.col > this.col) this.setDirection('right');else if (next.col < this.col) this.setDirection('left');else if (next.row > this.row) this.setDirection('down');else if (next.row < this.row) this.setDirection('up');\n      this.move();\n      if (this.col === next.col && this.row === next.row) this.pathStep++;\n    }\n  }, {\n    key: \"atDestination\",\n    value: function atDestination() {\n      return this.destination && this.col === this.destination.col && this.row === this.destination.row;\n    }\n  }], [{\n    key: \"directionDelta\",\n    value: function directionDelta(dir) {\n      switch (dir) {\n        case 'left':\n          return [-1, 0];\n        case 'right':\n          return [1, 0];\n        case 'up':\n          return [0, -1];\n        case 'down':\n          return [0, 1];\n        default:\n          return [0, 0];\n      }\n    }\n  }, {\n    key: \"bfsPath\",\n    value: function bfsPath(mapData, start, goal) {\n      var walkableTiles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0, 1, 3, 5];\n      var queue = [[start]];\n      var visited = new Set();\n      var key = function key(c, r) {\n        return \"\".concat(c, \",\").concat(r);\n      };\n      visited.add(key(start.col, start.row));\n      var height = mapData.length;\n      var width = mapData[0].length;\n      while (queue.length) {\n        var path = queue.shift();\n        var _path = path[path.length - 1],\n          col = _path.col,\n          row = _path.row;\n        if (col === goal.col && row === goal.row) return path;\n        for (var _i = 0, _arr = [[0, 1], [1, 0], [0, -1], [-1, 0]]; _i < _arr.length; _i++) {\n          var _arr$_i = _slicedToArray(_arr[_i], 2),\n            dc = _arr$_i[0],\n            dr = _arr$_i[1];\n          var nc = col + dc,\n            nr = row + dr;\n          if (nc < 0 || nr < 0 || nc >= width || nr >= height) continue;\n          if (!walkableTiles.includes(mapData[nr][nc])) continue;\n          var k = key(nc, nr);\n          if (visited.has(k)) continue;\n          visited.add(k);\n          queue.push([].concat(_toConsumableArray(path), [{\n            col: nc,\n            row: nr\n          }]));\n        }\n      }\n      return null;\n    }\n  }]);\n}();\n\nfunction makePFGrid(mapData, walkableTiles) {\n  var grid = [];\n  for (var r = 0; r < mapData.length; r++) {\n    var row = [];\n    for (var c = 0; c < mapData[0].length; c++) {\n      row.push(walkableTiles.includes(mapData[r][c]) ? 0 : 1);\n    }\n    grid.push(row);\n  }\n  return new (pathfinding__WEBPACK_IMPORTED_MODULE_0___default().Grid)(grid);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/ghost-entity.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/input-handler.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/input-handler.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// Modern ES6 InputHandler module for laraconman\nvar InputHandler = /*#__PURE__*/function () {\n  function InputHandler() {\n    _classCallCheck(this, InputHandler);\n    this.keys = {};\n    this.currentDirection = null;\n    this.queuedDirection = null;\n\n    // Direction constants\n    this.DIRECTIONS = {\n      UP: 'up',\n      DOWN: 'down',\n      LEFT: 'left',\n      RIGHT: 'right'\n    };\n\n    // Key mapping for navigation\n    this.keyMap = {\n      'ArrowUp': this.DIRECTIONS.UP,\n      'KeyW': this.DIRECTIONS.UP,\n      'ArrowDown': this.DIRECTIONS.DOWN,\n      'KeyS': this.DIRECTIONS.DOWN,\n      'ArrowLeft': this.DIRECTIONS.LEFT,\n      'KeyA': this.DIRECTIONS.LEFT,\n      'ArrowRight': this.DIRECTIONS.RIGHT,\n      'KeyD': this.DIRECTIONS.RIGHT\n    };\n    this.callbacks = {\n      onDirectionChange: null,\n      onKeyPress: null,\n      // NEW: generic key press\n      onPause: null,\n      onReset: null\n    };\n    this.setupEventListeners();\n  }\n  return _createClass(InputHandler, [{\n    key: \"setCallbacks\",\n    value: function setCallbacks(callbacks) {\n      this.callbacks = _objectSpread(_objectSpread({}, this.callbacks), callbacks);\n    }\n  }, {\n    key: \"getCurrentDirection\",\n    value: function getCurrentDirection() {\n      return this.currentDirection;\n    }\n  }, {\n    key: \"getQueuedDirection\",\n    value: function getQueuedDirection() {\n      return this.queuedDirection;\n    }\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n      document.addEventListener('keydown', function (e) {\n        // Prevent browser scroll for arrow keys\n        if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key)) {\n          e.preventDefault();\n        }\n        // Navigation keys\n        if (_this.keyMap[e.code]) {\n          _this.handleDirectionInput(e.code);\n        }\n        // Pause (Escape)\n        else if (e.code === 'Escape' && _this.callbacks.onPause) {\n          _this.callbacks.onPause();\n        }\n        // Reset (R)\n        else if ((e.code === 'KeyR' || e.code === 'F5') && _this.callbacks.onReset) {\n          _this.callbacks.onReset();\n        }\n        // Enter/Return\n        else if ((e.code === 'Enter' || e.code === 'NumpadEnter') && _this.callbacks.onKeyPress) {\n          _this.callbacks.onKeyPress('enter', e);\n        }\n        // Any other key\n        else if (_this.callbacks.onKeyPress) {\n          _this.callbacks.onKeyPress(e.code, e);\n        }\n      }, {\n        passive: false\n      });\n    }\n  }, {\n    key: \"handleDirectionInput\",\n    value: function handleDirectionInput(code) {\n      var direction = this.keyMap[code];\n      if (direction && direction !== this.currentDirection) {\n        this.queuedDirection = direction;\n        this.currentDirection = direction;\n        if (this.callbacks.onDirectionChange) {\n          this.callbacks.onDirectionChange(direction);\n        }\n      }\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InputHandler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/input-handler.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/map-renderer.js":
/*!*********************************************!*\
  !*** ./resources/assets/js/map-renderer.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar MapRenderer = /*#__PURE__*/function () {\n  function MapRenderer(canvas) {\n    var tileSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, MapRenderer);\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.tileSize = tileSize;\n    this.mapData = null;\n    this.rawMapData = null; // Store the original map data before border enforcement\n    this.width = 0;\n    this.height = 0;\n\n    // Tile type constants (matching your factory)\n    this.TILES = {\n      EMPTY: 0,\n      WALL: 1,\n      DOT: 2,\n      GHOST_DOOR: 3,\n      TUNNEL: 4,\n      CORNER: 6,\n      GHOST_SPAWN: 7,\n      PORTAL: 8,\n      SUPER_DOT: 9,\n      PORTAL_BLOCKER: 10,\n      FRUIT: 11\n    };\n\n    // Colors for different tile types\n    this.colors = {\n      wall: '#0031FF',\n      // Pac-Man blue\n      dot: '#FFFFB8',\n      // Pac-Man dot yellow\n      ghostDoor: '#FF69B4',\n      tunnel: '#000000',\n      // tunnel is background color\n      background: '#000000',\n      path: '#000080',\n      corner: '#FF0000',\n      ghostSpawn: '#00FF00',\n      portal: '#0000FF',\n      superDot: '#FFFF00'\n    };\n    this.applyConfig(config);\n  }\n\n  /**\n   * Accepts a config object to override colors.\n   * @param {object} config - Optional config object with color overrides\n   */\n  return _createClass(MapRenderer, [{\n    key: \"applyConfig\",\n    value: function applyConfig() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (config.colors) {\n        this.colors = _objectSpread(_objectSpread({}, this.colors), config.colors);\n      }\n    }\n\n    /**\n     * Load map data from CSV string format\n     * @param {string} csvData - CSV formatted map data\n     * @param {number} width - Map width in tiles\n     * @param {number} height - Map height in tiles\n     */\n  }, {\n    key: \"loadMap\",\n    value: function loadMap(csvData, width, height) {\n      var _this = this;\n      this.width = width + 2;\n      this.height = height + 2;\n      var rows = csvData.trim().split('\\n');\n      var raw = rows.map(function (row) {\n        return row.split(',').map(function (cell) {\n          return _this.mapTileCode(parseInt(cell.trim(), 10));\n        });\n      });\n      // Find portal columns/rows on edges\n      var portalColsTop = [];\n      var portalColsBottom = [];\n      var portalRowsLeft = [];\n      var portalRowsRight = [];\n      for (var c = 0; c < width; c++) {\n        if (raw[0][c] === this.TILES.PORTAL) portalColsTop.push(c);\n        if (raw[height - 1][c] === this.TILES.PORTAL) portalColsBottom.push(c);\n        console.log('crap2');\n      }\n      for (var r = 0; r < height; r++) {\n        if (raw[r][0] === this.TILES.PORTAL) portalRowsLeft.push(r);\n        if (raw[r][width - 1] === this.TILES.PORTAL) portalRowsRight.push(r);\n        console.log('crap1');\n      }\n      // Build bordered map\n      this.mapData = [];\n      // Top border\n      var topRow = [];\n      for (var _c = 0; _c < width + 2; _c++) {\n        if (_c > 0 && _c < width + 1 && portalColsTop.includes(_c - 1)) topRow.push(this.TILES.PORTAL_BLOCKER);else topRow.push(this.TILES.WALL);\n      }\n      this.mapData.push(topRow);\n      // Middle rows\n      for (var _r = 0; _r < height; _r++) {\n        var row = [];\n        // Left border\n        if (portalRowsLeft.includes(_r)) row.push(this.TILES.PORTAL_BLOCKER);else row.push(this.TILES.WALL);\n        // Original row\n        for (var _c2 = 0; _c2 < width; _c2++) row.push(raw[_r][_c2]);\n        // Right border\n        if (portalRowsRight.includes(_r)) row.push(this.TILES.PORTAL_BLOCKER);else row.push(this.TILES.WALL);\n        this.mapData.push(row);\n      }\n      // Bottom border\n      var bottomRow = [];\n      for (var _c3 = 0; _c3 < width + 2; _c3++) {\n        if (_c3 > 0 && _c3 < width + 1 && portalColsBottom.includes(_c3 - 1)) bottomRow.push(this.TILES.PORTAL_BLOCKER);else bottomRow.push(this.TILES.WALL);\n      }\n      this.mapData.push(bottomRow);\n\n      // --- Add PORTAL_BLOCKER behind each portal ---\n      // Only place blocker if the tile is truly EMPTY (do not overwrite super dots, dots, fruit, etc)\n      var blockableTiles = [this.TILES.EMPTY];\n      // Top portals: place blocker below\n      for (var _i = 0, _portalColsTop = portalColsTop; _i < _portalColsTop.length; _i++) {\n        var _c4 = _portalColsTop[_i];\n        if (blockableTiles.includes(this.mapData[1][_c4 + 1])) {\n          this.mapData[1][_c4 + 1] = this.TILES.PORTAL_BLOCKER;\n        }\n      }\n      // Bottom portals: place blocker above\n      for (var _i2 = 0, _portalColsBottom = portalColsBottom; _i2 < _portalColsBottom.length; _i2++) {\n        var _c5 = _portalColsBottom[_i2];\n        if (blockableTiles.includes(this.mapData[this.mapData.length - 2][_c5 + 1])) {\n          this.mapData[this.mapData.length - 2][_c5 + 1] = this.TILES.PORTAL_BLOCKER;\n        }\n      }\n      // Left portals: place blocker right\n      for (var _i3 = 0, _portalRowsLeft = portalRowsLeft; _i3 < _portalRowsLeft.length; _i3++) {\n        var _r2 = _portalRowsLeft[_i3];\n        if (blockableTiles.includes(this.mapData[_r2 + 1][1])) {\n          this.mapData[_r2 + 1][1] = this.TILES.PORTAL_BLOCKER;\n        }\n      }\n      // Right portals: place blocker left\n      for (var _i4 = 0, _portalRowsRight = portalRowsRight; _i4 < _portalRowsRight.length; _i4++) {\n        var _r3 = _portalRowsRight[_i4];\n        if (blockableTiles.includes(this.mapData[_r3 + 1][this.mapData[0].length - 2])) {\n          this.mapData[_r3 + 1][this.mapData[0].length - 2] = this.TILES.PORTAL_BLOCKER;\n        }\n      }\n      this.canvas.width = this.width * this.tileSize;\n      this.canvas.height = this.height * this.tileSize;\n      console.log(\"Map loaded with border: \".concat(this.width, \"x\").concat(this.height), this.mapData);\n    }\n\n    /**\n     * Map legacy/demo tile codes to internal tile types\n     * @param {number} code - raw tile code from CSV\n     * @returns {number} mapped tile code\n     */\n  }, {\n    key: \"mapTileCode\",\n    value: function mapTileCode(code) {\n      // Tile code meanings:\n      // 0 = wall, 1 = empty/path, 2 = super dot (corners), 3 = ghost spawn, 4 = portal, 5 = ghost door\n      switch (code) {\n        case 0:\n          return this.TILES.WALL;\n        case 1:\n          return this.TILES.EMPTY;\n        case 2:\n          return this.TILES.SUPER_DOT;\n        case 3:\n          return this.TILES.GHOST_SPAWN;\n        case 4:\n          return this.TILES.PORTAL;\n        case 5:\n          return this.TILES.GHOST_DOOR;\n        default:\n          return this.TILES.EMPTY;\n      }\n    }\n\n    /**\n     * Ensure there is always a border of walls around the map,\n     * except for tunnel/portal tiles (TUNNEL) at the border.\n     * This modifies mapData in-place after loading.\n     */\n  }, {\n    key: \"ensureWallBorder\",\n    value: function ensureWallBorder() {\n      if (!this.mapData) return;\n      var h = this.mapData.length;\n      var w = this.mapData[0].length;\n      for (var r = 0; r < h; r++) {\n        for (var c = 0; c < w; c++) {\n          var isEdge = r === 0 || r === h - 1 || c === 0 || c === w - 1;\n          if (isEdge) {\n            // If this is a tunnel/portal, preserve it\n            if (this.mapData[r][c] === this.TILES.TUNNEL) continue;\n            // Otherwise, enforce wall\n            this.mapData[r][c] = this.TILES.WALL;\n          }\n        }\n      }\n    }\n\n    /**\n     * Render the entire map to canvas\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.mapData) {\n        console.error('No map data loaded');\n        return;\n      }\n\n      // Clear canvas\n      this.ctx.fillStyle = this.colors.background;\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // Render each tile\n      for (var row = 0; row < this.height; row++) {\n        for (var col = 0; col < this.width; col++) {\n          var tileType = this.mapData[row][col];\n          this.renderTile(col, row, tileType);\n        }\n      }\n    }\n\n    /**\n     * Render a single tile at the specified position\n     * @param {number} col - Column position\n     * @param {number} row - Row position  \n     * @param {number} tileType - Type of tile to render\n     */\n  }, {\n    key: \"renderTile\",\n    value: function renderTile(col, row, tileType) {\n      var x = col * this.tileSize;\n      var y = row * this.tileSize;\n\n      // If this is a wall at the border and the *original* tile was a tunnel, skip rendering (transparent)\n      var isEdge = row === 0 || row === this.height - 1 || col === 0 || col === this.width - 1;\n      // Use the raw map data (before wall border enforcement) to check for tunnel\n      if (tileType === this.TILES.WALL && isEdge && this.rawMapData && this.rawMapData[row][col] === this.TILES.TUNNEL) {\n        return; // Don't render wall at tunnel/portal\n      }\n      if (tileType === this.TILES.WALL) {\n        this.renderWall(x, y);\n      } else switch (tileType) {\n        case this.TILES.DOT:\n          this.renderPath(x, y);\n          this.renderDot(x, y);\n          break;\n        case this.TILES.GHOST_DOOR:\n          this.renderPath(x, y);\n          this.renderGhostDoor(x, y);\n          break;\n        case this.TILES.TUNNEL:\n          this.renderPath(x, y);\n          break;\n        case this.TILES.CORNER:\n          this.renderPath(x, y);\n          this.renderCorner(x, y);\n          break;\n        case this.TILES.GHOST_SPAWN:\n          this.renderPath(x, y);\n          this.renderGhostSpawn(x, y);\n          break;\n        case this.TILES.PORTAL:\n          this.renderPath(x, y);\n          this.renderPortal(x, y);\n          break;\n        case this.TILES.SUPER_DOT:\n          this.renderPath(x, y);\n          this.renderSuperDot(x, y);\n          break;\n        default:\n          this.renderPath(x, y);\n      }\n    }\n\n    /**\n     * Render a wall tile\n     */\n  }, {\n    key: \"renderWall\",\n    value: function renderWall(x, y) {\n      this.ctx.fillStyle = this.colors.wall;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n\n      // Add wall border for definition\n      this.ctx.strokeStyle = '#4444FF';\n      this.ctx.lineWidth = 1;\n      this.ctx.strokeRect(x, y, this.tileSize, this.tileSize);\n    }\n\n    /**\n     * Render a path/corridor background\n     */\n  }, {\n    key: \"renderPath\",\n    value: function renderPath(x, y) {\n      this.ctx.fillStyle = this.colors.path;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n    }\n\n    /**\n     * Render a dot (pellet)\n     */\n  }, {\n    key: \"renderDot\",\n    value: function renderDot(x, y) {\n      var centerX = x + this.tileSize / 2;\n      var centerY = y + this.tileSize / 2;\n      var radius = Math.max(2, this.tileSize / 8);\n      this.ctx.fillStyle = this.colors.dot;\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n\n    /**\n     * Render a ghost door (special gate)\n     */\n  }, {\n    key: \"renderGhostDoor\",\n    value: function renderGhostDoor(x, y) {\n      // Horizontal line across the middle\n      this.ctx.strokeStyle = this.colors.ghostDoor;\n      this.ctx.lineWidth = 3;\n      this.ctx.beginPath();\n      this.ctx.moveTo(x, y + this.tileSize / 2);\n      this.ctx.lineTo(x + this.tileSize, y + this.tileSize / 2);\n      this.ctx.stroke();\n    }\n\n    /**\n     * Render a tunnel entrance\n     */\n  }, {\n    key: \"renderTunnel\",\n    value: function renderTunnel(x, y) {\n      this.ctx.fillStyle = this.colors.tunnel;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n\n      // Add some tunnel indicators\n      this.ctx.fillStyle = '#008888';\n      this.ctx.fillRect(x + 2, y + 2, this.tileSize - 4, this.tileSize - 4);\n    }\n\n    /**\n     * Render a corner\n     */\n  }, {\n    key: \"renderCorner\",\n    value: function renderCorner(x, y) {\n      this.ctx.fillStyle = this.colors.corner;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n    }\n\n    /**\n     * Render a ghost spawn\n     */\n  }, {\n    key: \"renderGhostSpawn\",\n    value: function renderGhostSpawn(x, y) {\n      this.ctx.fillStyle = this.colors.ghostSpawn;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n    }\n\n    /**\n     * Render a portal\n     */\n  }, {\n    key: \"renderPortal\",\n    value: function renderPortal(x, y) {\n      this.ctx.fillStyle = this.colors.portal;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n    }\n\n    /**\n     * Render a super dot\n     */\n  }, {\n    key: \"renderSuperDot\",\n    value: function renderSuperDot(x, y) {\n      var centerX = x + this.tileSize / 2;\n      var centerY = y + this.tileSize / 2;\n      var radius = Math.max(4, this.tileSize / 4);\n      this.ctx.fillStyle = this.colors.superDot;\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n\n    /**\n     * Get tile type at world coordinates\n     * @param {number} worldX - X coordinate in pixels\n     * @param {number} worldY - Y coordinate in pixels\n     * @returns {number} Tile type\n     */\n  }, {\n    key: \"getTileAt\",\n    value: function getTileAt(worldX, worldY) {\n      var col = Math.floor(worldX / this.tileSize);\n      var row = Math.floor(worldY / this.tileSize);\n      if (row < 0 || row >= this.height || col < 0 || col >= this.width) {\n        return this.TILES.WALL; // Treat out-of-bounds as walls\n      }\n      return this.mapData[row][col];\n    }\n\n    /**\n     * Convert grid coordinates to world coordinates\n     * @param {number} col - Column\n     * @param {number} row - Row\n     * @returns {object} World coordinates {x, y}\n     */\n  }, {\n    key: \"gridToWorld\",\n    value: function gridToWorld(col, row) {\n      return {\n        x: col * this.tileSize + this.tileSize / 2,\n        y: row * this.tileSize + this.tileSize / 2\n      };\n    }\n\n    /**\n     * Convert world coordinates to grid coordinates\n     * @param {number} worldX - World X coordinate\n     * @param {number} worldY - World Y coordinate\n     * @returns {object} Grid coordinates {col, row}\n     */\n  }, {\n    key: \"worldToGrid\",\n    value: function worldToGrid(worldX, worldY) {\n      return {\n        col: Math.floor(worldX / this.tileSize),\n        row: Math.floor(worldY / this.tileSize)\n      };\n    }\n\n    /**\n     * Find all tiles of a specific type\n     * @param {number} tileType - Type to search for\n     * @returns {Array} Array of {col, row} positions\n     */\n  }, {\n    key: \"findTiles\",\n    value: function findTiles(tileType) {\n      var positions = [];\n      for (var row = 0; row < this.height; row++) {\n        for (var col = 0; col < this.width; col++) {\n          if (this.mapData[row][col] === tileType) {\n            positions.push({\n              col: col,\n              row: row\n            });\n          }\n        }\n      }\n      return positions;\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QztJQUNMOztJQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUxJO0lBQUFxQyxHQUFBO0lBQUFDLEtBQUEsRUFNQSxTQUFBK0UsV0FBV0EsQ0FBQ0osTUFBTSxFQUFFQyxNQUFNLEVBQUU7TUFDeEIsT0FBTztRQUNIL0IsR0FBRyxFQUFFbUIsSUFBSSxDQUFDYSxLQUFLLENBQUNGLE1BQU0sR0FBRyxJQUFJLENBQUNqSCxRQUFRLENBQUM7UUFDdkNnRCxHQUFHLEVBQUVzRCxJQUFJLENBQUNhLEtBQUssQ0FBQ0QsTUFBTSxHQUFHLElBQUksQ0FBQ2xILFFBQVE7TUFDMUMsQ0FBQztJQUNMOztJQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFKSTtJQUFBcUMsR0FBQTtJQUFBQyxLQUFBLEVBS0EsU0FBQWdGLFNBQVNBLENBQUNsQyxRQUFRLEVBQUU7TUFDaEIsSUFBTW1DLFNBQVMsR0FBRyxFQUFFO01BRXBCLEtBQUssSUFBSXZFLEdBQUcsR0FBRyxDQUFDLEVBQUVBLEdBQUcsR0FBRyxJQUFJLENBQUNyQyxNQUFNLEVBQUVxQyxHQUFHLEVBQUUsRUFBRTtRQUN4QyxLQUFLLElBQUltQyxHQUFHLEdBQUcsQ0FBQyxFQUFFQSxHQUFHLEdBQUcsSUFBSSxDQUFDekUsS0FBSyxFQUFFeUUsR0FBRyxFQUFFLEVBQUU7VUFDdkMsSUFBSSxJQUFJLENBQUMzRSxPQUFPLENBQUN3QyxHQUFHLENBQUMsQ0FBQ21DLEdBQUcsQ0FBQyxLQUFLQyxRQUFRLEVBQUU7WUFDckNtQyxTQUFTLENBQUM5RCxJQUFJLENBQUM7Y0FBQzBCLEdBQUcsRUFBSEEsR0FBRztjQUFFbkMsR0FBRyxFQUFIQTtZQUFHLENBQUMsQ0FBQztVQUM5QjtRQUNKO01BQ0o7TUFFQSxPQUFPdUUsU0FBUztJQUNwQjtFQUFDO0FBQUE7QUFHTCxpRUFBZXpILFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9tYXAtcmVuZGVyZXIuanM/NWNhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBNYXBSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3IoY2FudmFzLCB0aWxlU2l6ZSA9IDI0LCBjb25maWcgPSB7fSkge1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5jdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdGhpcy50aWxlU2l6ZSA9IHRpbGVTaXplO1xuICAgICAgICB0aGlzLm1hcERhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLnJhd01hcERhdGEgPSBudWxsOyAvLyBTdG9yZSB0aGUgb3JpZ2luYWwgbWFwIGRhdGEgYmVmb3JlIGJvcmRlciBlbmZvcmNlbWVudFxuICAgICAgICB0aGlzLndpZHRoID0gMDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgICBcbiAgICAgICAgLy8gVGlsZSB0eXBlIGNvbnN0YW50cyAobWF0Y2hpbmcgeW91ciBmYWN0b3J5KVxuICAgICAgICB0aGlzLlRJTEVTID0ge1xuICAgICAgICAgICAgRU1QVFk6IDAsXG4gICAgICAgICAgICBXQUxMOiAxLFxuICAgICAgICAgICAgRE9UOiAyLCBcbiAgICAgICAgICAgIEdIT1NUX0RPT1I6IDMsXG4gICAgICAgICAgICBUVU5ORUw6IDQsXG4gICAgICAgICAgICBDT1JORVI6IDYsXG4gICAgICAgICAgICBHSE9TVF9TUEFXTjogNyxcbiAgICAgICAgICAgIFBPUlRBTDogOCxcbiAgICAgICAgICAgIFNVUEVSX0RPVDogOSxcbiAgICAgICAgICAgIFBPUlRBTF9CTE9DS0VSOiAxMCxcbiAgICAgICAgICAgIEZSVUlUOiAxMVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gQ29sb3JzIGZvciBkaWZmZXJlbnQgdGlsZSB0eXBlc1xuICAgICAgICB0aGlzLmNvbG9ycyA9IHtcbiAgICAgICAgICAgIHdhbGw6ICcjMDAzMUZGJywgLy8gUGFjLU1hbiBibHVlXG4gICAgICAgICAgICBkb3Q6ICcjRkZGRkI4JywgLy8gUGFjLU1hbiBkb3QgeWVsbG93XG4gICAgICAgICAgICBnaG9zdERvb3I6ICcjRkY2OUI0JyxcbiAgICAgICAgICAgIHR1bm5lbDogJyMwMDAwMDAnLCAvLyB0dW5uZWwgaXMgYmFja2dyb3VuZCBjb2xvclxuICAgICAgICAgICAgYmFja2dyb3VuZDogJyMwMDAwMDAnLFxuICAgICAgICAgICAgcGF0aDogJyMwMDAwODAnLFxuICAgICAgICAgICAgY29ybmVyOiAnI0ZGMDAwMCcsXG4gICAgICAgICAgICBnaG9zdFNwYXduOiAnIzAwRkYwMCcsXG4gICAgICAgICAgICBwb3J0YWw6ICcjMDAwMEZGJyxcbiAgICAgICAgICAgIHN1cGVyRG90OiAnI0ZGRkYwMCdcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hcHBseUNvbmZpZyhjb25maWcpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIGEgY29uZmlnIG9iamVjdCB0byBvdmVycmlkZSBjb2xvcnMuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyAtIE9wdGlvbmFsIGNvbmZpZyBvYmplY3Qgd2l0aCBjb2xvciBvdmVycmlkZXNcbiAgICAgKi9cbiAgICBhcHBseUNvbmZpZyhjb25maWcgPSB7fSkge1xuICAgICAgICBpZiAoY29uZmlnLmNvbG9ycykge1xuICAgICAgICAgICAgdGhpcy5jb2xvcnMgPSB7IC4uLnRoaXMuY29sb3JzLCAuLi5jb25maWcuY29sb3JzIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogTG9hZCBtYXAgZGF0YSBmcm9tIENTViBzdHJpbmcgZm9ybWF0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNzdkRhdGEgLSBDU1YgZm9ybWF0dGVkIG1hcCBkYXRhXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gTWFwIHdpZHRoIGluIHRpbGVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIE1hcCBoZWlnaHQgaW4gdGlsZXNcbiAgICAgKi9cbiAgICBsb2FkTWFwKGNzdkRhdGEsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoICsgMjtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgKyAyO1xuICAgICAgICBjb25zdCByb3dzID0gY3N2RGF0YS50cmltKCkuc3BsaXQoJ1xcbicpO1xuICAgICAgICBjb25zdCByYXcgPSByb3dzLm1hcChyb3cgPT4gcm93LnNwbGl0KCcsJykubWFwKGNlbGwgPT4gdGhpcy5tYXBUaWxlQ29kZShwYXJzZUludChjZWxsLnRyaW0oKSwgMTApKSkpO1xuICAgICAgICAvLyBGaW5kIHBvcnRhbCBjb2x1bW5zL3Jvd3Mgb24gZWRnZXNcbiAgICAgICAgY29uc3QgcG9ydGFsQ29sc1RvcCA9IFtdO1xuICAgICAgICBjb25zdCBwb3J0YWxDb2xzQm90dG9tID0gW107XG4gICAgICAgIGNvbnN0IHBvcnRhbFJvd3NMZWZ0ID0gW107XG4gICAgICAgIGNvbnN0IHBvcnRhbFJvd3NSaWdodCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHdpZHRoOyBjKyspIHtcbiAgICAgICAgICAgIGlmIChyYXdbMF1bY10gPT09IHRoaXMuVElMRVMuUE9SVEFMKSBwb3J0YWxDb2xzVG9wLnB1c2goYyk7XG4gICAgICAgICAgICBpZiAocmF3W2hlaWdodC0xXVtjXSA9PT0gdGhpcy5USUxFUy5QT1JUQUwpIHBvcnRhbENvbHNCb3R0b20ucHVzaChjKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjcmFwMicpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgaGVpZ2h0OyByKyspIHtcbiAgICAgICAgICAgIGlmIChyYXdbcl1bMF0gPT09IHRoaXMuVElMRVMuUE9SVEFMKSBwb3J0YWxSb3dzTGVmdC5wdXNoKHIpO1xuICAgICAgICAgICAgaWYgKHJhd1tyXVt3aWR0aC0xXSA9PT0gdGhpcy5USUxFUy5QT1JUQUwpIHBvcnRhbFJvd3NSaWdodC5wdXNoKHIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyYXAxJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQnVpbGQgYm9yZGVyZWQgbWFwXG4gICAgICAgIHRoaXMubWFwRGF0YSA9IFtdO1xuICAgICAgICAvLyBUb3AgYm9yZGVyXG4gICAgICAgIGNvbnN0IHRvcFJvdyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHdpZHRoICsgMjsgYysrKSB7XG4gICAgICAgICAgICBpZiAoYyA+IDAgJiYgYyA8IHdpZHRoICsgMSAmJiBwb3J0YWxDb2xzVG9wLmluY2x1ZGVzKGMtMSkpIHRvcFJvdy5wdXNoKHRoaXMuVElMRVMuUE9SVEFMX0JMT0NLRVIpO1xuICAgICAgICAgICAgZWxzZSB0b3BSb3cucHVzaCh0aGlzLlRJTEVTLldBTEwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFwRGF0YS5wdXNoKHRvcFJvdyk7XG4gICAgICAgIC8vIE1pZGRsZSByb3dzXG4gICAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgaGVpZ2h0OyByKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IFtdO1xuICAgICAgICAgICAgLy8gTGVmdCBib3JkZXJcbiAgICAgICAgICAgIGlmIChwb3J0YWxSb3dzTGVmdC5pbmNsdWRlcyhyKSkgcm93LnB1c2godGhpcy5USUxFUy5QT1JUQUxfQkxPQ0tFUik7XG4gICAgICAgICAgICBlbHNlIHJvdy5wdXNoKHRoaXMuVElMRVMuV0FMTCk7XG4gICAgICAgICAgICAvLyBPcmlnaW5hbCByb3dcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgd2lkdGg7IGMrKykgcm93LnB1c2gocmF3W3JdW2NdKTtcbiAgICAgICAgICAgIC8vIFJpZ2h0IGJvcmRlclxuICAgICAgICAgICAgaWYgKHBvcnRhbFJvd3NSaWdodC5pbmNsdWRlcyhyKSkgcm93LnB1c2godGhpcy5USUxFUy5QT1JUQUxfQkxPQ0tFUik7XG4gICAgICAgICAgICBlbHNlIHJvdy5wdXNoKHRoaXMuVElMRVMuV0FMTCk7XG4gICAgICAgICAgICB0aGlzLm1hcERhdGEucHVzaChyb3cpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEJvdHRvbSBib3JkZXJcbiAgICAgICAgY29uc3QgYm90dG9tUm93ID0gW107XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgd2lkdGggKyAyOyBjKyspIHtcbiAgICAgICAgICAgIGlmIChjID4gMCAmJiBjIDwgd2lkdGggKyAxICYmIHBvcnRhbENvbHNCb3R0b20uaW5jbHVkZXMoYy0xKSkgYm90dG9tUm93LnB1c2godGhpcy5USUxFUy5QT1JUQUxfQkxPQ0tFUik7XG4gICAgICAgICAgICBlbHNlIGJvdHRvbVJvdy5wdXNoKHRoaXMuVElMRVMuV0FMTCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXBEYXRhLnB1c2goYm90dG9tUm93KTtcblxuICAgICAgICAvLyAtLS0gQWRkIFBPUlRBTF9CTE9DS0VSIGJlaGluZCBlYWNoIHBvcnRhbCAtLS1cbiAgICAgICAgLy8gT25seSBwbGFjZSBibG9ja2VyIGlmIHRoZSB0aWxlIGlzIHRydWx5IEVNUFRZIChkbyBub3Qgb3ZlcndyaXRlIHN1cGVyIGRvdHMsIGRvdHMsIGZydWl0LCBldGMpXG4gICAgICAgIGNvbnN0IGJsb2NrYWJsZVRpbGVzID0gW3RoaXMuVElMRVMuRU1QVFldO1xuICAgICAgICAvLyBUb3AgcG9ydGFsczogcGxhY2UgYmxvY2tlciBiZWxvd1xuICAgICAgICBmb3IgKGNvbnN0IGMgb2YgcG9ydGFsQ29sc1RvcCkge1xuICAgICAgICAgICAgaWYgKGJsb2NrYWJsZVRpbGVzLmluY2x1ZGVzKHRoaXMubWFwRGF0YVsxXVtjKzFdKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwRGF0YVsxXVtjKzFdID0gdGhpcy5USUxFUy5QT1JUQUxfQkxPQ0tFUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBCb3R0b20gcG9ydGFsczogcGxhY2UgYmxvY2tlciBhYm92ZVxuICAgICAgICBmb3IgKGNvbnN0IGMgb2YgcG9ydGFsQ29sc0JvdHRvbSkge1xuICAgICAgICAgICAgaWYgKGJsb2NrYWJsZVRpbGVzLmluY2x1ZGVzKHRoaXMubWFwRGF0YVt0aGlzLm1hcERhdGEubGVuZ3RoLTJdW2MrMV0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXBEYXRhW3RoaXMubWFwRGF0YS5sZW5ndGgtMl1bYysxXSA9IHRoaXMuVElMRVMuUE9SVEFMX0JMT0NLRVI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTGVmdCBwb3J0YWxzOiBwbGFjZSBibG9ja2VyIHJpZ2h0XG4gICAgICAgIGZvciAoY29uc3QgciBvZiBwb3J0YWxSb3dzTGVmdCkge1xuICAgICAgICAgICAgaWYgKGJsb2NrYWJsZVRpbGVzLmluY2x1ZGVzKHRoaXMubWFwRGF0YVtyKzFdWzFdKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFwRGF0YVtyKzFdWzFdID0gdGhpcy5USUxFUy5QT1JUQUxfQkxPQ0tFUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSaWdodCBwb3J0YWxzOiBwbGFjZSBibG9ja2VyIGxlZnRcbiAgICAgICAgZm9yIChjb25zdCByIG9mIHBvcnRhbFJvd3NSaWdodCkge1xuICAgICAgICAgICAgaWYgKGJsb2NrYWJsZVRpbGVzLmluY2x1ZGVzKHRoaXMubWFwRGF0YVtyKzFdW3RoaXMubWFwRGF0YVswXS5sZW5ndGgtMl0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXBEYXRhW3IrMV1bdGhpcy5tYXBEYXRhWzBdLmxlbmd0aC0yXSA9IHRoaXMuVElMRVMuUE9SVEFMX0JMT0NLRVI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMud2lkdGggKiB0aGlzLnRpbGVTaXplO1xuICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLmhlaWdodCAqIHRoaXMudGlsZVNpemU7XG4gICAgICAgIGNvbnNvbGUubG9nKGBNYXAgbG9hZGVkIHdpdGggYm9yZGVyOiAke3RoaXMud2lkdGh9eCR7dGhpcy5oZWlnaHR9YCwgdGhpcy5tYXBEYXRhKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogTWFwIGxlZ2FjeS9kZW1vIHRpbGUgY29kZXMgdG8gaW50ZXJuYWwgdGlsZSB0eXBlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlIC0gcmF3IHRpbGUgY29kZSBmcm9tIENTVlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IG1hcHBlZCB0aWxlIGNvZGVcbiAgICAgKi9cbiAgICBtYXBUaWxlQ29kZShjb2RlKSB7XG4gICAgICAgIC8vIFRpbGUgY29kZSBtZWFuaW5nczpcbiAgICAgICAgLy8gMCA9IHdhbGwsIDEgPSBlbXB0eS9wYXRoLCAyID0gc3VwZXIgZG90IChjb3JuZXJzKSwgMyA9IGdob3N0IHNwYXduLCA0ID0gcG9ydGFsLCA1ID0gZ2hvc3QgZG9vclxuICAgICAgICBzd2l0Y2goY29kZSkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlRJTEVTLldBTEw7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuVElMRVMuRU1QVFk7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuVElMRVMuU1VQRVJfRE9UO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlRJTEVTLkdIT1NUX1NQQVdOO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlRJTEVTLlBPUlRBTDtcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5USUxFUy5HSE9TVF9ET09SO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5USUxFUy5FTVBUWTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBFbnN1cmUgdGhlcmUgaXMgYWx3YXlzIGEgYm9yZGVyIG9mIHdhbGxzIGFyb3VuZCB0aGUgbWFwLFxuICAgICAqIGV4Y2VwdCBmb3IgdHVubmVsL3BvcnRhbCB0aWxlcyAoVFVOTkVMKSBhdCB0aGUgYm9yZGVyLlxuICAgICAqIFRoaXMgbW9kaWZpZXMgbWFwRGF0YSBpbi1wbGFjZSBhZnRlciBsb2FkaW5nLlxuICAgICAqL1xuICAgIGVuc3VyZVdhbGxCb3JkZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5tYXBEYXRhKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGggPSB0aGlzLm1hcERhdGEubGVuZ3RoO1xuICAgICAgICBjb25zdCB3ID0gdGhpcy5tYXBEYXRhWzBdLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCBoOyByKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdzsgYysrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNFZGdlID0gKHIgPT09IDAgfHwgciA9PT0gaC0xIHx8IGMgPT09IDAgfHwgYyA9PT0gdy0xKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNFZGdlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSB0dW5uZWwvcG9ydGFsLCBwcmVzZXJ2ZSBpdFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXBEYXRhW3JdW2NdID09PSB0aGlzLlRJTEVTLlRVTk5FTCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgZW5mb3JjZSB3YWxsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFwRGF0YVtyXVtjXSA9IHRoaXMuVElMRVMuV0FMTDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSBlbnRpcmUgbWFwIHRvIGNhbnZhc1xuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1hcERhdGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIG1hcCBkYXRhIGxvYWRlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDbGVhciBjYW52YXNcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcnMuYmFja2dyb3VuZDtcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZW5kZXIgZWFjaCB0aWxlXG4gICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHRoaXMuaGVpZ2h0OyByb3crKykge1xuICAgICAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgdGhpcy53aWR0aDsgY29sKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWxlVHlwZSA9IHRoaXMubWFwRGF0YVtyb3ddW2NvbF07XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJUaWxlKGNvbCwgcm93LCB0aWxlVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVuZGVyIGEgc2luZ2xlIHRpbGUgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2wgLSBDb2x1bW4gcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93IC0gUm93IHBvc2l0aW9uICBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGlsZVR5cGUgLSBUeXBlIG9mIHRpbGUgdG8gcmVuZGVyXG4gICAgICovXG4gICAgcmVuZGVyVGlsZShjb2wsIHJvdywgdGlsZVR5cGUpIHtcbiAgICAgICAgY29uc3QgeCA9IGNvbCAqIHRoaXMudGlsZVNpemU7XG4gICAgICAgIGNvbnN0IHkgPSByb3cgKiB0aGlzLnRpbGVTaXplO1xuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSB3YWxsIGF0IHRoZSBib3JkZXIgYW5kIHRoZSAqb3JpZ2luYWwqIHRpbGUgd2FzIGEgdHVubmVsLCBza2lwIHJlbmRlcmluZyAodHJhbnNwYXJlbnQpXG4gICAgICAgIGNvbnN0IGlzRWRnZSA9IChyb3cgPT09IDAgfHwgcm93ID09PSB0aGlzLmhlaWdodC0xIHx8IGNvbCA9PT0gMCB8fCBjb2wgPT09IHRoaXMud2lkdGgtMSk7XG4gICAgICAgIC8vIFVzZSB0aGUgcmF3IG1hcCBkYXRhIChiZWZvcmUgd2FsbCBib3JkZXIgZW5mb3JjZW1lbnQpIHRvIGNoZWNrIGZvciB0dW5uZWxcbiAgICAgICAgaWYgKHRpbGVUeXBlID09PSB0aGlzLlRJTEVTLldBTEwgJiYgaXNFZGdlICYmIHRoaXMucmF3TWFwRGF0YSAmJiB0aGlzLnJhd01hcERhdGFbcm93XVtjb2xdID09PSB0aGlzLlRJTEVTLlRVTk5FTCkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBEb24ndCByZW5kZXIgd2FsbCBhdCB0dW5uZWwvcG9ydGFsXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbGVUeXBlID09PSB0aGlzLlRJTEVTLldBTEwpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyV2FsbCh4LCB5KTtcbiAgICAgICAgfSBlbHNlIHN3aXRjaCh0aWxlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSB0aGlzLlRJTEVTLkRPVDpcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclBhdGgoeCwgeSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJEb3QoeCwgeSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHRoaXMuVElMRVMuR0hPU1RfRE9PUjpcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclBhdGgoeCwgeSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJHaG9zdERvb3IoeCwgeSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHRoaXMuVElMRVMuVFVOTkVMOlxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUGF0aCh4LCB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgdGhpcy5USUxFUy5DT1JORVI6XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJQYXRoKHgsIHkpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQ29ybmVyKHgsIHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSB0aGlzLlRJTEVTLkdIT1NUX1NQQVdOOlxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUGF0aCh4LCB5KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckdob3N0U3Bhd24oeCwgeSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHRoaXMuVElMRVMuUE9SVEFMOlxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUGF0aCh4LCB5KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclBvcnRhbCh4LCB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgdGhpcy5USUxFUy5TVVBFUl9ET1Q6XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJQYXRoKHgsIHkpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU3VwZXJEb3QoeCwgeSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUGF0aCh4LCB5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBSZW5kZXIgYSB3YWxsIHRpbGVcbiAgICAgKi9cbiAgICByZW5kZXJXYWxsKHgsIHkpIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcnMud2FsbDtcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoeCwgeSwgdGhpcy50aWxlU2l6ZSwgdGhpcy50aWxlU2l6ZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBZGQgd2FsbCBib3JkZXIgZm9yIGRlZmluaXRpb25cbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnIzQ0NDRGRic7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVJlY3QoeCwgeSwgdGhpcy50aWxlU2l6ZSwgdGhpcy50aWxlU2l6ZSk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIHBhdGgvY29ycmlkb3IgYmFja2dyb3VuZFxuICAgICAqL1xuICAgIHJlbmRlclBhdGgoeCwgeSkge1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9ycy5wYXRoO1xuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4LCB5LCB0aGlzLnRpbGVTaXplLCB0aGlzLnRpbGVTaXplKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVuZGVyIGEgZG90IChwZWxsZXQpXG4gICAgICovXG4gICAgcmVuZGVyRG90KHgsIHkpIHtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IHggKyB0aGlzLnRpbGVTaXplIC8gMjtcbiAgICAgICAgY29uc3QgY2VudGVyWSA9IHkgKyB0aGlzLnRpbGVTaXplIC8gMjtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gTWF0aC5tYXgoMiwgdGhpcy50aWxlU2l6ZSAvIDgpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcnMuZG90O1xuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgdGhpcy5jdHguYXJjKGNlbnRlclgsIGNlbnRlclksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuICAgICAgICB0aGlzLmN0eC5maWxsKCk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIGdob3N0IGRvb3IgKHNwZWNpYWwgZ2F0ZSlcbiAgICAgKi9cbiAgICByZW5kZXJHaG9zdERvb3IoeCwgeSkge1xuICAgICAgICAvLyBIb3Jpem9udGFsIGxpbmUgYWNyb3NzIHRoZSBtaWRkbGVcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9ycy5naG9zdERvb3I7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDM7XG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICB0aGlzLmN0eC5tb3ZlVG8oeCwgeSArIHRoaXMudGlsZVNpemUgLyAyKTtcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHggKyB0aGlzLnRpbGVTaXplLCB5ICsgdGhpcy50aWxlU2l6ZSAvIDIpO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVuZGVyIGEgdHVubmVsIGVudHJhbmNlXG4gICAgICovXG4gICAgcmVuZGVyVHVubmVsKHgsIHkpIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcnMudHVubmVsO1xuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4LCB5LCB0aGlzLnRpbGVTaXplLCB0aGlzLnRpbGVTaXplKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCBzb21lIHR1bm5lbCBpbmRpY2F0b3JzXG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICcjMDA4ODg4JztcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoeCArIDIsIHkgKyAyLCB0aGlzLnRpbGVTaXplIC0gNCwgdGhpcy50aWxlU2l6ZSAtIDQpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBSZW5kZXIgYSBjb3JuZXJcbiAgICAgKi9cbiAgICByZW5kZXJDb3JuZXIoeCwgeSkge1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9ycy5jb3JuZXI7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KHgsIHksIHRoaXMudGlsZVNpemUsIHRoaXMudGlsZVNpemUpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBSZW5kZXIgYSBnaG9zdCBzcGF3blxuICAgICAqL1xuICAgIHJlbmRlckdob3N0U3Bhd24oeCwgeSkge1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9ycy5naG9zdFNwYXduO1xuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4LCB5LCB0aGlzLnRpbGVTaXplLCB0aGlzLnRpbGVTaXplKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVuZGVyIGEgcG9ydGFsXG4gICAgICovXG4gICAgcmVuZGVyUG9ydGFsKHgsIHkpIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcnMucG9ydGFsO1xuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4LCB5LCB0aGlzLnRpbGVTaXplLCB0aGlzLnRpbGVTaXplKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVuZGVyIGEgc3VwZXIgZG90XG4gICAgICovXG4gICAgcmVuZGVyU3VwZXJEb3QoeCwgeSkge1xuICAgICAgICBjb25zdCBjZW50ZXJYID0geCArIHRoaXMudGlsZVNpemUgLyAyO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0geSArIHRoaXMudGlsZVNpemUgLyAyO1xuICAgICAgICBjb25zdCByYWRpdXMgPSBNYXRoLm1heCg0LCB0aGlzLnRpbGVTaXplIC8gNCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9ycy5zdXBlckRvdDtcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuY3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcbiAgICAgICAgdGhpcy5jdHguZmlsbCgpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBHZXQgdGlsZSB0eXBlIGF0IHdvcmxkIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdvcmxkWCAtIFggY29vcmRpbmF0ZSBpbiBwaXhlbHNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd29ybGRZIC0gWSBjb29yZGluYXRlIGluIHBpeGVsc1xuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRpbGUgdHlwZVxuICAgICAqL1xuICAgIGdldFRpbGVBdCh3b3JsZFgsIHdvcmxkWSkge1xuICAgICAgICBjb25zdCBjb2wgPSBNYXRoLmZsb29yKHdvcmxkWCAvIHRoaXMudGlsZVNpemUpO1xuICAgICAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKHdvcmxkWSAvIHRoaXMudGlsZVNpemUpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJvdyA8IDAgfHwgcm93ID49IHRoaXMuaGVpZ2h0IHx8IGNvbCA8IDAgfHwgY29sID49IHRoaXMud2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlRJTEVTLldBTEw7IC8vIFRyZWF0IG91dC1vZi1ib3VuZHMgYXMgd2FsbHNcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwRGF0YVtyb3ddW2NvbF07XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgZ3JpZCBjb29yZGluYXRlcyB0byB3b3JsZCBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2wgLSBDb2x1bW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93IC0gUm93XG4gICAgICogQHJldHVybnMge29iamVjdH0gV29ybGQgY29vcmRpbmF0ZXMge3gsIHl9XG4gICAgICovXG4gICAgZ3JpZFRvV29ybGQoY29sLCByb3cpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGNvbCAqIHRoaXMudGlsZVNpemUgKyB0aGlzLnRpbGVTaXplIC8gMixcbiAgICAgICAgICAgIHk6IHJvdyAqIHRoaXMudGlsZVNpemUgKyB0aGlzLnRpbGVTaXplIC8gMlxuICAgICAgICB9O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IHdvcmxkIGNvb3JkaW5hdGVzIHRvIGdyaWQgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd29ybGRYIC0gV29ybGQgWCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdvcmxkWSAtIFdvcmxkIFkgY29vcmRpbmF0ZVxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9IEdyaWQgY29vcmRpbmF0ZXMge2NvbCwgcm93fVxuICAgICAqL1xuICAgIHdvcmxkVG9HcmlkKHdvcmxkWCwgd29ybGRZKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2w6IE1hdGguZmxvb3Iod29ybGRYIC8gdGhpcy50aWxlU2l6ZSksXG4gICAgICAgICAgICByb3c6IE1hdGguZmxvb3Iod29ybGRZIC8gdGhpcy50aWxlU2l6ZSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogRmluZCBhbGwgdGlsZXMgb2YgYSBzcGVjaWZpYyB0eXBlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbGVUeXBlIC0gVHlwZSB0byBzZWFyY2ggZm9yXG4gICAgICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiB7Y29sLCByb3d9IHBvc2l0aW9uc1xuICAgICAqL1xuICAgIGZpbmRUaWxlcyh0aWxlVHlwZSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHRoaXMuaGVpZ2h0OyByb3crKykge1xuICAgICAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgdGhpcy53aWR0aDsgY29sKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXBEYXRhW3Jvd11bY29sXSA9PT0gdGlsZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goe2NvbCwgcm93fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcG9zaXRpb25zO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFwUmVuZGVyZXI7Il0sIm5hbWVzIjpbIk1hcFJlbmRlcmVyIiwiY2FudmFzIiwidGlsZVNpemUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjb25maWciLCJfY2xhc3NDYWxsQ2hlY2siLCJjdHgiLCJnZXRDb250ZXh0IiwibWFwRGF0YSIsInJhd01hcERhdGEiLCJ3aWR0aCIsImhlaWdodCIsIlRJTEVTIiwiRU1QVFkiLCJXQUxMIiwiRE9UIiwiR0hPU1RfRE9PUiIsIlRVTk5FTCIsIkNPUk5FUiIsIkdIT1NUX1NQQVdOIiwiUE9SVEFMIiwiU1VQRVJfRE9UIiwiUE9SVEFMX0JMT0NLRVIiLCJGUlVJVCIsImNvbG9ycyIsIndhbGwiLCJkb3QiLCJnaG9zdERvb3IiLCJ0dW5uZWwiLCJiYWNrZ3JvdW5kIiwicGF0aCIsImNvcm5lciIsImdob3N0U3Bhd24iLCJwb3J0YWwiLCJzdXBlckRvdCIsImFwcGx5Q29uZmlnIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJfb2JqZWN0U3ByZWFkIiwibG9hZE1hcCIsImNzdkRhdGEiLCJfdGhpcyIsInJvd3MiLCJ0cmltIiwic3BsaXQiLCJyYXciLCJtYXAiLCJyb3ciLCJjZWxsIiwibWFwVGlsZUNvZGUiLCJwYXJzZUludCIsInBvcnRhbENvbHNUb3AiLCJwb3J0YWxDb2xzQm90dG9tIiwicG9ydGFsUm93c0xlZnQiLCJwb3J0YWxSb3dzUmlnaHQiLCJjIiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJyIiwidG9wUm93IiwiaW5jbHVkZXMiLCJib3R0b21Sb3ciLCJibG9ja2FibGVUaWxlcyIsIl9pIiwiX3BvcnRhbENvbHNUb3AiLCJfaTIiLCJfcG9ydGFsQ29sc0JvdHRvbSIsIl9pMyIsIl9wb3J0YWxSb3dzTGVmdCIsIl9pNCIsIl9wb3J0YWxSb3dzUmlnaHQiLCJjb25jYXQiLCJjb2RlIiwiZW5zdXJlV2FsbEJvcmRlciIsImgiLCJ3IiwiaXNFZGdlIiwicmVuZGVyIiwiZXJyb3IiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImNvbCIsInRpbGVUeXBlIiwicmVuZGVyVGlsZSIsIngiLCJ5IiwicmVuZGVyV2FsbCIsInJlbmRlclBhdGgiLCJyZW5kZXJEb3QiLCJyZW5kZXJHaG9zdERvb3IiLCJyZW5kZXJDb3JuZXIiLCJyZW5kZXJHaG9zdFNwYXduIiwicmVuZGVyUG9ydGFsIiwicmVuZGVyU3VwZXJEb3QiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZVJlY3QiLCJjZW50ZXJYIiwiY2VudGVyWSIsInJhZGl1cyIsIk1hdGgiLCJtYXgiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImZpbGwiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJyZW5kZXJUdW5uZWwiLCJnZXRUaWxlQXQiLCJ3b3JsZFgiLCJ3b3JsZFkiLCJmbG9vciIsImdyaWRUb1dvcmxkIiwid29ybGRUb0dyaWQiLCJmaW5kVGlsZXMiLCJwb3NpdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/js/map-renderer.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/player-entity.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/player-entity.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PlayerEntity)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// player-entity.js\n// KISS: minimal, extensible player entity for movement/collision, future-proof for ghosts\nvar PlayerEntity = /*#__PURE__*/function () {\n  function PlayerEntity(startCol, startRow, tileSize, mapData, settings) {\n    var speed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 4;\n    _classCallCheck(this, PlayerEntity);\n    this.col = startCol;\n    this.row = startRow;\n    this.tileSize = tileSize;\n    this.mapData = mapData; // reference to current map\n    this.direction = null; // default: no movement until input\n    this.nextDirection = null;\n    this.state = 'normal'; // 'normal' or 'super'\n    this.defaultSpeed = settings.playerSpeed || 2;\n    this.superSpeed = settings.playerSuperSpeed || 4;\n    this.speed = this.defaultSpeed;\n    // tileSize is fixed for logic; visual scale only\n    this.x = this.col * this.tileSize;\n    this.y = this.row * this.tileSize;\n    this.targetX = this.x;\n    this.targetY = this.y;\n    this.moving = false;\n    this.type = 'player'; // added type property\n  }\n  return _createClass(PlayerEntity, [{\n    key: \"setDirection\",\n    value: function setDirection(dir) {\n      this.nextDirection = dir;\n    }\n\n    // Check if a direction is walkable (not a wall or ghost door for player)\n  }, {\n    key: \"canMove\",\n    value: function canMove(dir) {\n      var _PlayerEntity$directi = PlayerEntity.directionDelta(dir),\n        _PlayerEntity$directi2 = _slicedToArray(_PlayerEntity$directi, 2),\n        dCol = _PlayerEntity$directi2[0],\n        dRow = _PlayerEntity$directi2[1];\n      var nCol = this.col + dCol;\n      var nRow = this.row + dRow;\n      if (nCol < 0 || nRow < 0 || nRow >= this.mapData.length || nCol >= this.mapData[0].length) return false;\n      var nextTile = this.mapData[nRow][nCol];\n\n      /**\n       *  Block movement into custom portal-blocker tile (e.g., 10 = PORTAL_BLOCKER)\n       *  We also check siblings for out of bounds.\n       */\n      if (nextTile === 10) {\n        return false;\n      }\n      if (nextTile === 8 &&\n      // 8 = PORTAL\n      this.mapData[this.row][this.col] === 8) {\n        return false;\n      }\n      // Prevent player from entering ghost door\n      if (nextTile === 1 ||\n      // wall\n      nextTile === 3 && this.type === 'player' // 3 = GHOST_DOOR\n      ) {\n        return false;\n      }\n      return true;\n    }\n\n    // Move one step if possible, handle direction changes\n  }, {\n    key: \"move\",\n    value: function move() {\n      // If not moving, check for direction and set target\n      if (!this.moving) {\n        if (this.nextDirection && this.canMove(this.nextDirection)) {\n          this.direction = this.nextDirection;\n          this.nextDirection = null;\n        }\n        if (this.canMove(this.direction)) {\n          var _PlayerEntity$directi3 = PlayerEntity.directionDelta(this.direction),\n            _PlayerEntity$directi4 = _slicedToArray(_PlayerEntity$directi3, 2),\n            dCol = _PlayerEntity$directi4[0],\n            dRow = _PlayerEntity$directi4[1];\n          // Prevent moving out of bounds\n          var nextCol = this.col + dCol;\n          var nextRow = this.row + dRow;\n          if (nextCol < 0 || nextRow < 0 || nextRow >= this.mapData.length || nextCol >= this.mapData[0].length || this.mapData[nextRow][nextCol] === 1 // wall\n          ) {\n            this.moving = false;\n            return;\n          }\n          this.targetX = nextCol * this.tileSize;\n          this.targetY = nextRow * this.tileSize;\n          this.moving = true;\n        }\n      }\n      // If moving, interpolate toward target\n      if (this.moving) {\n        var dx = this.targetX - this.x;\n        var dy = this.targetY - this.y;\n        var dist = Math.sqrt(dx * dx + dy * dy);\n        if (dist <= this.speed) {\n          // Snap to target\n          this.x = this.targetX;\n          this.y = this.targetY;\n          var _PlayerEntity$directi5 = PlayerEntity.directionDelta(this.direction),\n            _PlayerEntity$directi6 = _slicedToArray(_PlayerEntity$directi5, 2),\n            _dCol = _PlayerEntity$directi6[0],\n            _dRow = _PlayerEntity$directi6[1];\n          this.col += _dCol;\n          this.row += _dRow;\n          this.moving = false;\n        } else {\n          // Move toward target\n          var angle = Math.atan2(dy, dx);\n          this.x += this.speed * Math.cos(angle);\n          this.y += this.speed * Math.sin(angle);\n        }\n      }\n    }\n  }, {\n    key: \"setSuperState\",\n    value: function setSuperState(isSuper) {\n      if (isSuper) {\n        this.state = 'super';\n        this.speed = this.superSpeed;\n      } else {\n        this.state = 'normal';\n        this.speed = this.defaultSpeed;\n      }\n    }\n\n    // Utility: direction string to delta\n  }, {\n    key: \"isAt\",\n    value:\n    // For collision with ghosts or dots\n    function isAt(col, row) {\n      return this.col === col && this.row === row;\n    }\n\n    // Render Player (simple yellow circle for now)\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      ctx.save();\n      var scale = this.state === 'super' ? 1.2 : 1;\n      var centerX = this.x + this.tileSize / 2;\n      var centerY = this.y + this.tileSize / 2;\n      ctx.translate(centerX, centerY);\n      ctx.scale(scale, scale);\n      ctx.translate(-centerX, -centerY);\n      ctx.fillStyle = '#FFFF00';\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, this.tileSize / 2 - 2, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.restore();\n    }\n  }], [{\n    key: \"directionDelta\",\n    value: function directionDelta(dir) {\n      switch (dir) {\n        case 'left':\n          return [-1, 0];\n        case 'right':\n          return [1, 0];\n        case 'up':\n          return [0, -1];\n        case 'down':\n          return [0, 1];\n        default:\n          return [0, 0];\n      }\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/player-entity.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/settings.js":
/*!*****************************************!*\
  !*** ./resources/assets/js/settings.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Modern ES6 settings module for laraconman Pac-Man clone\n// Export a plain object with all settings, no globals or sessionStorage side-effects\n\nvar settings = {\n  score: 0,\n  lives: 3,\n  level: 1,\n  moveInc: 2,\n  // must divide 10 evenly: 1,2,5,10\n  speed: 10,\n  // see comments in legacy for tuning\n  gameTime: 10000,\n  // ms\n  mazeSource: 'designed',\n  basicVision: false,\n  resetModeOnResetGame: true,\n  excludeReverseDirectionInRandomMode: true,\n  fx: true,\n  extras: false,\n  ghostPenTimeout: 2,\n  // seconds ghosts wait in pen before forced exit (change as needed)\n  megaPelletDuration: 5,\n  // seconds Pac-Man stays enhanced after mega pellet\n  maxGhosts: 6,\n  // maximum number of ghosts in play\n  playerSpeed: 2,\n  // normal speed\n  playerSize: 24,\n  // normal size (px)\n  playerSuperSpeed: 4,\n  // speed during super state\n  playerSuperSize: 32,\n  // size during super state (px)\n  dotPoints: 10,\n  superDotPoints: 50,\n  fruitTypes: [{\n    type: 'cherry',\n    points: 100,\n    image: '/vendor/laraconman/images/fruit-cherry.svg'\n  }, {\n    type: 'strawberry',\n    points: 300,\n    image: '/vendor/laraconman/images/fruit-strawberry.svg'\n  }, {\n    type: 'orange',\n    points: 500,\n    image: '/vendor/laraconman/images/fruit-orange.svg'\n  }, {\n    type: 'apple',\n    points: 700,\n    image: '/vendor/laraconman/images/fruit-apple.svg'\n  }\n  // Add more as desired\n  ]\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (settings);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3NldHRpbmdzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBOztBQUVBLElBQU1BLFFBQVEsR0FBRztFQUNmQyxLQUFLLEVBQUUsQ0FBQztFQUNSQyxLQUFLLEVBQUUsQ0FBQztFQUNSQyxLQUFLLEVBQUUsQ0FBQztFQUNSQyxPQUFPLEVBQUUsQ0FBQztFQUFFO0VBQ1pDLEtBQUssRUFBRSxFQUFFO0VBQUU7RUFDWEMsUUFBUSxFQUFFLEtBQUs7RUFBRTtFQUNqQkMsVUFBVSxFQUFFLFVBQVU7RUFDdEJDLFdBQVcsRUFBRSxLQUFLO0VBQ2xCQyxvQkFBb0IsRUFBRSxJQUFJO0VBQzFCQyxtQ0FBbUMsRUFBRSxJQUFJO0VBQ3pDQyxFQUFFLEVBQUUsSUFBSTtFQUNSQyxNQUFNLEVBQUUsS0FBSztFQUNiQyxlQUFlLEVBQUUsQ0FBQztFQUFFO0VBQ3BCQyxrQkFBa0IsRUFBRSxDQUFDO0VBQUU7RUFDdkJDLFNBQVMsRUFBRSxDQUFDO0VBQUU7RUFDZEMsV0FBVyxFQUFFLENBQUM7RUFBRTtFQUNoQkMsVUFBVSxFQUFFLEVBQUU7RUFBRTtFQUNoQkMsZ0JBQWdCLEVBQUUsQ0FBQztFQUFFO0VBQ3JCQyxlQUFlLEVBQUUsRUFBRTtFQUFFO0VBQ3JCQyxTQUFTLEVBQUUsRUFBRTtFQUNiQyxjQUFjLEVBQUUsRUFBRTtFQUNsQkMsVUFBVSxFQUFFLENBQ1Y7SUFBRUMsSUFBSSxFQUFFLFFBQVE7SUFBRUMsTUFBTSxFQUFFLEdBQUc7SUFBRUMsS0FBSyxFQUFFO0VBQTZDLENBQUMsRUFDcEY7SUFBRUYsSUFBSSxFQUFFLFlBQVk7SUFBRUMsTUFBTSxFQUFFLEdBQUc7SUFBRUMsS0FBSyxFQUFFO0VBQWlELENBQUMsRUFDNUY7SUFBRUYsSUFBSSxFQUFFLFFBQVE7SUFBRUMsTUFBTSxFQUFFLEdBQUc7SUFBRUMsS0FBSyxFQUFFO0VBQTZDLENBQUMsRUFDcEY7SUFBRUYsSUFBSSxFQUFFLE9BQU87SUFBRUMsTUFBTSxFQUFFLEdBQUc7SUFBRUMsS0FBSyxFQUFFO0VBQTRDO0VBQ2pGO0VBQUE7QUFFSixDQUFDO0FBRUQsaUVBQWV6QixRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL3Jlc291cmNlcy9hc3NldHMvanMvc2V0dGluZ3MuanM/Mzc3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2Rlcm4gRVM2IHNldHRpbmdzIG1vZHVsZSBmb3IgbGFyYWNvbm1hbiBQYWMtTWFuIGNsb25lXG4vLyBFeHBvcnQgYSBwbGFpbiBvYmplY3Qgd2l0aCBhbGwgc2V0dGluZ3MsIG5vIGdsb2JhbHMgb3Igc2Vzc2lvblN0b3JhZ2Ugc2lkZS1lZmZlY3RzXG5cbmNvbnN0IHNldHRpbmdzID0ge1xuICBzY29yZTogMCxcbiAgbGl2ZXM6IDMsXG4gIGxldmVsOiAxLFxuICBtb3ZlSW5jOiAyLCAvLyBtdXN0IGRpdmlkZSAxMCBldmVubHk6IDEsMiw1LDEwXG4gIHNwZWVkOiAxMCwgLy8gc2VlIGNvbW1lbnRzIGluIGxlZ2FjeSBmb3IgdHVuaW5nXG4gIGdhbWVUaW1lOiAxMDAwMCwgLy8gbXNcbiAgbWF6ZVNvdXJjZTogJ2Rlc2lnbmVkJyxcbiAgYmFzaWNWaXNpb246IGZhbHNlLFxuICByZXNldE1vZGVPblJlc2V0R2FtZTogdHJ1ZSxcbiAgZXhjbHVkZVJldmVyc2VEaXJlY3Rpb25JblJhbmRvbU1vZGU6IHRydWUsXG4gIGZ4OiB0cnVlLFxuICBleHRyYXM6IGZhbHNlLFxuICBnaG9zdFBlblRpbWVvdXQ6IDIsIC8vIHNlY29uZHMgZ2hvc3RzIHdhaXQgaW4gcGVuIGJlZm9yZSBmb3JjZWQgZXhpdCAoY2hhbmdlIGFzIG5lZWRlZClcbiAgbWVnYVBlbGxldER1cmF0aW9uOiA1LCAvLyBzZWNvbmRzIFBhYy1NYW4gc3RheXMgZW5oYW5jZWQgYWZ0ZXIgbWVnYSBwZWxsZXRcbiAgbWF4R2hvc3RzOiA2LCAvLyBtYXhpbXVtIG51bWJlciBvZiBnaG9zdHMgaW4gcGxheVxuICBwbGF5ZXJTcGVlZDogMiwgLy8gbm9ybWFsIHNwZWVkXG4gIHBsYXllclNpemU6IDI0LCAvLyBub3JtYWwgc2l6ZSAocHgpXG4gIHBsYXllclN1cGVyU3BlZWQ6IDQsIC8vIHNwZWVkIGR1cmluZyBzdXBlciBzdGF0ZVxuICBwbGF5ZXJTdXBlclNpemU6IDMyLCAvLyBzaXplIGR1cmluZyBzdXBlciBzdGF0ZSAocHgpXG4gIGRvdFBvaW50czogMTAsXG4gIHN1cGVyRG90UG9pbnRzOiA1MCxcbiAgZnJ1aXRUeXBlczogW1xuICAgIHsgdHlwZTogJ2NoZXJyeScsIHBvaW50czogMTAwLCBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZnJ1aXQtY2hlcnJ5LnN2ZycgfSxcbiAgICB7IHR5cGU6ICdzdHJhd2JlcnJ5JywgcG9pbnRzOiAzMDAsIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9mcnVpdC1zdHJhd2JlcnJ5LnN2ZycgfSxcbiAgICB7IHR5cGU6ICdvcmFuZ2UnLCBwb2ludHM6IDUwMCwgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2ZydWl0LW9yYW5nZS5zdmcnIH0sXG4gICAgeyB0eXBlOiAnYXBwbGUnLCBwb2ludHM6IDcwMCwgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2ZydWl0LWFwcGxlLnN2ZycgfSxcbiAgICAvLyBBZGQgbW9yZSBhcyBkZXNpcmVkXG4gIF0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZXR0aW5nczsiXSwibmFtZXMiOlsic2V0dGluZ3MiLCJzY29yZSIsImxpdmVzIiwibGV2ZWwiLCJtb3ZlSW5jIiwic3BlZWQiLCJnYW1lVGltZSIsIm1hemVTb3VyY2UiLCJiYXNpY1Zpc2lvbiIsInJlc2V0TW9kZU9uUmVzZXRHYW1lIiwiZXhjbHVkZVJldmVyc2VEaXJlY3Rpb25JblJhbmRvbU1vZGUiLCJmeCIsImV4dHJhcyIsImdob3N0UGVuVGltZW91dCIsIm1lZ2FQZWxsZXREdXJhdGlvbiIsIm1heEdob3N0cyIsInBsYXllclNwZWVkIiwicGxheWVyU2l6ZSIsInBsYXllclN1cGVyU3BlZWQiLCJwbGF5ZXJTdXBlclNpemUiLCJkb3RQb2ludHMiLCJzdXBlckRvdFBvaW50cyIsImZydWl0VHlwZXMiLCJ0eXBlIiwicG9pbnRzIiwiaW1hZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/js/settings.js\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/laraconman": 0,
/******/ 			"css/laraconman": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunklaraconman"] = self["webpackChunklaraconman"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/laraconman"], () => (__webpack_require__("./resources/assets/js/game.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/laraconman"], () => (__webpack_require__("./resources/assets/css/game.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;