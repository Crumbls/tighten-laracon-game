/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("{// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/events/events.js\n\n}");

/***/ }),

/***/ "./node_modules/heap/index.js":
/*!************************************!*\
  !*** ./node_modules/heap/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{module.exports = __webpack_require__(/*! ./lib/heap */ \"./node_modules/heap/lib/heap.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGVhcC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSx5RkFBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL2hlYXAvaW5kZXguanM/YTlmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2hlYXAnKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/heap/index.js\n\n}");

/***/ }),

/***/ "./node_modules/heap/lib/heap.js":
/*!***************************************!*\
  !*** ./node_modules/heap/lib/heap.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("{/* module decorator */ module = __webpack_require__.nmd(module);\n// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  if ( true && module !== null ? module.exports : void 0) {\n    module.exports = Heap;\n  } else {\n    window.Heap = Heap;\n  }\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGVhcC9saWIvaGVhcC5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsbUNBQW1DLDBCQUEwQjtBQUNwSDtBQUNBLEtBQUs7QUFDTDtBQUNBLHNDQUFzQyxXQUFXO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsV0FBVztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFdBQVc7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxzQ0FBc0M7QUFDekY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxHQUFHOztBQUVILE1BQU0sS0FBNkI7QUFDbkM7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL25vZGVfbW9kdWxlcy9oZWFwL2xpYi9oZWFwLmpzPzAxODIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjguMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgSGVhcCwgZGVmYXVsdENtcCwgZmxvb3IsIGhlYXBpZnksIGhlYXBwb3AsIGhlYXBwdXNoLCBoZWFwcHVzaHBvcCwgaGVhcHJlcGxhY2UsIGluc29ydCwgbWluLCBubGFyZ2VzdCwgbnNtYWxsZXN0LCB1cGRhdGVJdGVtLCBfc2lmdGRvd24sIF9zaWZ0dXA7XG5cbiAgZmxvb3IgPSBNYXRoLmZsb29yLCBtaW4gPSBNYXRoLm1pbjtcblxuXG4gIC8qXG4gIERlZmF1bHQgY29tcGFyaXNvbiBmdW5jdGlvbiB0byBiZSB1c2VkXG4gICAqL1xuXG4gIGRlZmF1bHRDbXAgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgaWYgKHggPCB5KSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmICh4ID4geSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG5cbiAgLypcbiAgSW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFuZCBrZWVwIGl0IHNvcnRlZCBhc3N1bWluZyBhIGlzIHNvcnRlZC5cbiAgXG4gIElmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIHJpZ2h0IG9mIHRoZSByaWdodG1vc3QgeC5cbiAgXG4gIE9wdGlvbmFsIGFyZ3MgbG8gKGRlZmF1bHQgMCkgYW5kIGhpIChkZWZhdWx0IGEubGVuZ3RoKSBib3VuZCB0aGUgc2xpY2VcbiAgb2YgYSB0byBiZSBzZWFyY2hlZC5cbiAgICovXG5cbiAgaW5zb3J0ID0gZnVuY3Rpb24oYSwgeCwgbG8sIGhpLCBjbXApIHtcbiAgICB2YXIgbWlkO1xuICAgIGlmIChsbyA9PSBudWxsKSB7XG4gICAgICBsbyA9IDA7XG4gICAgfVxuICAgIGlmIChjbXAgPT0gbnVsbCkge1xuICAgICAgY21wID0gZGVmYXVsdENtcDtcbiAgICB9XG4gICAgaWYgKGxvIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdsbyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpO1xuICAgIH1cbiAgICBpZiAoaGkgPT0gbnVsbCkge1xuICAgICAgaGkgPSBhLmxlbmd0aDtcbiAgICB9XG4gICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgIG1pZCA9IGZsb29yKChsbyArIGhpKSAvIDIpO1xuICAgICAgaWYgKGNtcCh4LCBhW21pZF0pIDwgMCkge1xuICAgICAgICBoaSA9IG1pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChbXS5zcGxpY2UuYXBwbHkoYSwgW2xvLCBsbyAtIGxvXS5jb25jYXQoeCkpLCB4KTtcbiAgfTtcblxuXG4gIC8qXG4gIFB1c2ggaXRlbSBvbnRvIGhlYXAsIG1haW50YWluaW5nIHRoZSBoZWFwIGludmFyaWFudC5cbiAgICovXG5cbiAgaGVhcHB1c2ggPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgY21wKSB7XG4gICAgaWYgKGNtcCA9PSBudWxsKSB7XG4gICAgICBjbXAgPSBkZWZhdWx0Q21wO1xuICAgIH1cbiAgICBhcnJheS5wdXNoKGl0ZW0pO1xuICAgIHJldHVybiBfc2lmdGRvd24oYXJyYXksIDAsIGFycmF5Lmxlbmd0aCAtIDEsIGNtcCk7XG4gIH07XG5cblxuICAvKlxuICBQb3AgdGhlIHNtYWxsZXN0IGl0ZW0gb2ZmIHRoZSBoZWFwLCBtYWludGFpbmluZyB0aGUgaGVhcCBpbnZhcmlhbnQuXG4gICAqL1xuXG4gIGhlYXBwb3AgPSBmdW5jdGlvbihhcnJheSwgY21wKSB7XG4gICAgdmFyIGxhc3RlbHQsIHJldHVybml0ZW07XG4gICAgaWYgKGNtcCA9PSBudWxsKSB7XG4gICAgICBjbXAgPSBkZWZhdWx0Q21wO1xuICAgIH1cbiAgICBsYXN0ZWx0ID0gYXJyYXkucG9wKCk7XG4gICAgaWYgKGFycmF5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuaXRlbSA9IGFycmF5WzBdO1xuICAgICAgYXJyYXlbMF0gPSBsYXN0ZWx0O1xuICAgICAgX3NpZnR1cChhcnJheSwgMCwgY21wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuaXRlbSA9IGxhc3RlbHQ7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5pdGVtO1xuICB9O1xuXG5cbiAgLypcbiAgUG9wIGFuZCByZXR1cm4gdGhlIGN1cnJlbnQgc21hbGxlc3QgdmFsdWUsIGFuZCBhZGQgdGhlIG5ldyBpdGVtLlxuICBcbiAgVGhpcyBpcyBtb3JlIGVmZmljaWVudCB0aGFuIGhlYXBwb3AoKSBmb2xsb3dlZCBieSBoZWFwcHVzaCgpLCBhbmQgY2FuIGJlXG4gIG1vcmUgYXBwcm9wcmlhdGUgd2hlbiB1c2luZyBhIGZpeGVkIHNpemUgaGVhcC4gTm90ZSB0aGF0IHRoZSB2YWx1ZVxuICByZXR1cm5lZCBtYXkgYmUgbGFyZ2VyIHRoYW4gaXRlbSEgVGhhdCBjb25zdHJhaW5zIHJlYXNvbmFibGUgdXNlIG9mXG4gIHRoaXMgcm91dGluZSB1bmxlc3Mgd3JpdHRlbiBhcyBwYXJ0IG9mIGEgY29uZGl0aW9uYWwgcmVwbGFjZW1lbnQ6XG4gICAgICBpZiBpdGVtID4gYXJyYXlbMF1cbiAgICAgICAgaXRlbSA9IGhlYXByZXBsYWNlKGFycmF5LCBpdGVtKVxuICAgKi9cblxuICBoZWFwcmVwbGFjZSA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBjbXApIHtcbiAgICB2YXIgcmV0dXJuaXRlbTtcbiAgICBpZiAoY21wID09IG51bGwpIHtcbiAgICAgIGNtcCA9IGRlZmF1bHRDbXA7XG4gICAgfVxuICAgIHJldHVybml0ZW0gPSBhcnJheVswXTtcbiAgICBhcnJheVswXSA9IGl0ZW07XG4gICAgX3NpZnR1cChhcnJheSwgMCwgY21wKTtcbiAgICByZXR1cm4gcmV0dXJuaXRlbTtcbiAgfTtcblxuXG4gIC8qXG4gIEZhc3QgdmVyc2lvbiBvZiBhIGhlYXBwdXNoIGZvbGxvd2VkIGJ5IGEgaGVhcHBvcC5cbiAgICovXG5cbiAgaGVhcHB1c2hwb3AgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgY21wKSB7XG4gICAgdmFyIF9yZWY7XG4gICAgaWYgKGNtcCA9PSBudWxsKSB7XG4gICAgICBjbXAgPSBkZWZhdWx0Q21wO1xuICAgIH1cbiAgICBpZiAoYXJyYXkubGVuZ3RoICYmIGNtcChhcnJheVswXSwgaXRlbSkgPCAwKSB7XG4gICAgICBfcmVmID0gW2FycmF5WzBdLCBpdGVtXSwgaXRlbSA9IF9yZWZbMF0sIGFycmF5WzBdID0gX3JlZlsxXTtcbiAgICAgIF9zaWZ0dXAoYXJyYXksIDAsIGNtcCk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xuICB9O1xuXG5cbiAgLypcbiAgVHJhbnNmb3JtIGxpc3QgaW50byBhIGhlYXAsIGluLXBsYWNlLCBpbiBPKGFycmF5Lmxlbmd0aCkgdGltZS5cbiAgICovXG5cbiAgaGVhcGlmeSA9IGZ1bmN0aW9uKGFycmF5LCBjbXApIHtcbiAgICB2YXIgaSwgX2ksIF9qLCBfbGVuLCBfcmVmLCBfcmVmMSwgX3Jlc3VsdHMsIF9yZXN1bHRzMTtcbiAgICBpZiAoY21wID09IG51bGwpIHtcbiAgICAgIGNtcCA9IGRlZmF1bHRDbXA7XG4gICAgfVxuICAgIF9yZWYxID0gKGZ1bmN0aW9uKCkge1xuICAgICAgX3Jlc3VsdHMxID0gW107XG4gICAgICBmb3IgKHZhciBfaiA9IDAsIF9yZWYgPSBmbG9vcihhcnJheS5sZW5ndGggLyAyKTsgMCA8PSBfcmVmID8gX2ogPCBfcmVmIDogX2ogPiBfcmVmOyAwIDw9IF9yZWYgPyBfaisrIDogX2otLSl7IF9yZXN1bHRzMS5wdXNoKF9qKTsgfVxuICAgICAgcmV0dXJuIF9yZXN1bHRzMTtcbiAgICB9KS5hcHBseSh0aGlzKS5yZXZlcnNlKCk7XG4gICAgX3Jlc3VsdHMgPSBbXTtcbiAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYxLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICBpID0gX3JlZjFbX2ldO1xuICAgICAgX3Jlc3VsdHMucHVzaChfc2lmdHVwKGFycmF5LCBpLCBjbXApKTtcbiAgICB9XG4gICAgcmV0dXJuIF9yZXN1bHRzO1xuICB9O1xuXG5cbiAgLypcbiAgVXBkYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZ2l2ZW4gaXRlbSBpbiB0aGUgaGVhcC5cbiAgVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGV2ZXJ5IHRpbWUgdGhlIGl0ZW0gaXMgYmVpbmcgbW9kaWZpZWQuXG4gICAqL1xuXG4gIHVwZGF0ZUl0ZW0gPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgY21wKSB7XG4gICAgdmFyIHBvcztcbiAgICBpZiAoY21wID09IG51bGwpIHtcbiAgICAgIGNtcCA9IGRlZmF1bHRDbXA7XG4gICAgfVxuICAgIHBvcyA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX3NpZnRkb3duKGFycmF5LCAwLCBwb3MsIGNtcCk7XG4gICAgcmV0dXJuIF9zaWZ0dXAoYXJyYXksIHBvcywgY21wKTtcbiAgfTtcblxuXG4gIC8qXG4gIEZpbmQgdGhlIG4gbGFyZ2VzdCBlbGVtZW50cyBpbiBhIGRhdGFzZXQuXG4gICAqL1xuXG4gIG5sYXJnZXN0ID0gZnVuY3Rpb24oYXJyYXksIG4sIGNtcCkge1xuICAgIHZhciBlbGVtLCByZXN1bHQsIF9pLCBfbGVuLCBfcmVmO1xuICAgIGlmIChjbXAgPT0gbnVsbCkge1xuICAgICAgY21wID0gZGVmYXVsdENtcDtcbiAgICB9XG4gICAgcmVzdWx0ID0gYXJyYXkuc2xpY2UoMCwgbik7XG4gICAgaWYgKCFyZXN1bHQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBoZWFwaWZ5KHJlc3VsdCwgY21wKTtcbiAgICBfcmVmID0gYXJyYXkuc2xpY2Uobik7XG4gICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICBlbGVtID0gX3JlZltfaV07XG4gICAgICBoZWFwcHVzaHBvcChyZXN1bHQsIGVsZW0sIGNtcCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuc29ydChjbXApLnJldmVyc2UoKTtcbiAgfTtcblxuXG4gIC8qXG4gIEZpbmQgdGhlIG4gc21hbGxlc3QgZWxlbWVudHMgaW4gYSBkYXRhc2V0LlxuICAgKi9cblxuICBuc21hbGxlc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgY21wKSB7XG4gICAgdmFyIGVsZW0sIGksIGxvcywgcmVzdWx0LCBfaSwgX2osIF9sZW4sIF9yZWYsIF9yZWYxLCBfcmVzdWx0cztcbiAgICBpZiAoY21wID09IG51bGwpIHtcbiAgICAgIGNtcCA9IGRlZmF1bHRDbXA7XG4gICAgfVxuICAgIGlmIChuICogMTAgPD0gYXJyYXkubGVuZ3RoKSB7XG4gICAgICByZXN1bHQgPSBhcnJheS5zbGljZSgwLCBuKS5zb3J0KGNtcCk7XG4gICAgICBpZiAoIXJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxvcyA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XG4gICAgICBfcmVmID0gYXJyYXkuc2xpY2Uobik7XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgZWxlbSA9IF9yZWZbX2ldO1xuICAgICAgICBpZiAoY21wKGVsZW0sIGxvcykgPCAwKSB7XG4gICAgICAgICAgaW5zb3J0KHJlc3VsdCwgZWxlbSwgMCwgbnVsbCwgY21wKTtcbiAgICAgICAgICByZXN1bHQucG9wKCk7XG4gICAgICAgICAgbG9zID0gcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgaGVhcGlmeShhcnJheSwgY21wKTtcbiAgICBfcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoaSA9IF9qID0gMCwgX3JlZjEgPSBtaW4obiwgYXJyYXkubGVuZ3RoKTsgMCA8PSBfcmVmMSA/IF9qIDwgX3JlZjEgOiBfaiA+IF9yZWYxOyBpID0gMCA8PSBfcmVmMSA/ICsrX2ogOiAtLV9qKSB7XG4gICAgICBfcmVzdWx0cy5wdXNoKGhlYXBwb3AoYXJyYXksIGNtcCkpO1xuICAgIH1cbiAgICByZXR1cm4gX3Jlc3VsdHM7XG4gIH07XG5cbiAgX3NpZnRkb3duID0gZnVuY3Rpb24oYXJyYXksIHN0YXJ0cG9zLCBwb3MsIGNtcCkge1xuICAgIHZhciBuZXdpdGVtLCBwYXJlbnQsIHBhcmVudHBvcztcbiAgICBpZiAoY21wID09IG51bGwpIHtcbiAgICAgIGNtcCA9IGRlZmF1bHRDbXA7XG4gICAgfVxuICAgIG5ld2l0ZW0gPSBhcnJheVtwb3NdO1xuICAgIHdoaWxlIChwb3MgPiBzdGFydHBvcykge1xuICAgICAgcGFyZW50cG9zID0gKHBvcyAtIDEpID4+IDE7XG4gICAgICBwYXJlbnQgPSBhcnJheVtwYXJlbnRwb3NdO1xuICAgICAgaWYgKGNtcChuZXdpdGVtLCBwYXJlbnQpIDwgMCkge1xuICAgICAgICBhcnJheVtwb3NdID0gcGFyZW50O1xuICAgICAgICBwb3MgPSBwYXJlbnRwb3M7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBhcnJheVtwb3NdID0gbmV3aXRlbTtcbiAgfTtcblxuICBfc2lmdHVwID0gZnVuY3Rpb24oYXJyYXksIHBvcywgY21wKSB7XG4gICAgdmFyIGNoaWxkcG9zLCBlbmRwb3MsIG5ld2l0ZW0sIHJpZ2h0cG9zLCBzdGFydHBvcztcbiAgICBpZiAoY21wID09IG51bGwpIHtcbiAgICAgIGNtcCA9IGRlZmF1bHRDbXA7XG4gICAgfVxuICAgIGVuZHBvcyA9IGFycmF5Lmxlbmd0aDtcbiAgICBzdGFydHBvcyA9IHBvcztcbiAgICBuZXdpdGVtID0gYXJyYXlbcG9zXTtcbiAgICBjaGlsZHBvcyA9IDIgKiBwb3MgKyAxO1xuICAgIHdoaWxlIChjaGlsZHBvcyA8IGVuZHBvcykge1xuICAgICAgcmlnaHRwb3MgPSBjaGlsZHBvcyArIDE7XG4gICAgICBpZiAocmlnaHRwb3MgPCBlbmRwb3MgJiYgIShjbXAoYXJyYXlbY2hpbGRwb3NdLCBhcnJheVtyaWdodHBvc10pIDwgMCkpIHtcbiAgICAgICAgY2hpbGRwb3MgPSByaWdodHBvcztcbiAgICAgIH1cbiAgICAgIGFycmF5W3Bvc10gPSBhcnJheVtjaGlsZHBvc107XG4gICAgICBwb3MgPSBjaGlsZHBvcztcbiAgICAgIGNoaWxkcG9zID0gMiAqIHBvcyArIDE7XG4gICAgfVxuICAgIGFycmF5W3Bvc10gPSBuZXdpdGVtO1xuICAgIHJldHVybiBfc2lmdGRvd24oYXJyYXksIHN0YXJ0cG9zLCBwb3MsIGNtcCk7XG4gIH07XG5cbiAgSGVhcCA9IChmdW5jdGlvbigpIHtcbiAgICBIZWFwLnB1c2ggPSBoZWFwcHVzaDtcblxuICAgIEhlYXAucG9wID0gaGVhcHBvcDtcblxuICAgIEhlYXAucmVwbGFjZSA9IGhlYXByZXBsYWNlO1xuXG4gICAgSGVhcC5wdXNocG9wID0gaGVhcHB1c2hwb3A7XG5cbiAgICBIZWFwLmhlYXBpZnkgPSBoZWFwaWZ5O1xuXG4gICAgSGVhcC51cGRhdGVJdGVtID0gdXBkYXRlSXRlbTtcblxuICAgIEhlYXAubmxhcmdlc3QgPSBubGFyZ2VzdDtcblxuICAgIEhlYXAubnNtYWxsZXN0ID0gbnNtYWxsZXN0O1xuXG4gICAgZnVuY3Rpb24gSGVhcChjbXApIHtcbiAgICAgIHRoaXMuY21wID0gY21wICE9IG51bGwgPyBjbXAgOiBkZWZhdWx0Q21wO1xuICAgICAgdGhpcy5ub2RlcyA9IFtdO1xuICAgIH1cblxuICAgIEhlYXAucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gaGVhcHB1c2godGhpcy5ub2RlcywgeCwgdGhpcy5jbXApO1xuICAgIH07XG5cbiAgICBIZWFwLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBoZWFwcG9wKHRoaXMubm9kZXMsIHRoaXMuY21wKTtcbiAgICB9O1xuXG4gICAgSGVhcC5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbMF07XG4gICAgfTtcblxuICAgIEhlYXAucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXMuaW5kZXhPZih4KSAhPT0gLTE7XG4gICAgfTtcblxuICAgIEhlYXAucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gaGVhcHJlcGxhY2UodGhpcy5ub2RlcywgeCwgdGhpcy5jbXApO1xuICAgIH07XG5cbiAgICBIZWFwLnByb3RvdHlwZS5wdXNocG9wID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIGhlYXBwdXNocG9wKHRoaXMubm9kZXMsIHgsIHRoaXMuY21wKTtcbiAgICB9O1xuXG4gICAgSGVhcC5wcm90b3R5cGUuaGVhcGlmeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGhlYXBpZnkodGhpcy5ub2RlcywgdGhpcy5jbXApO1xuICAgIH07XG5cbiAgICBIZWFwLnByb3RvdHlwZS51cGRhdGVJdGVtID0gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZUl0ZW0odGhpcy5ub2RlcywgeCwgdGhpcy5jbXApO1xuICAgIH07XG5cbiAgICBIZWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXMgPSBbXTtcbiAgICB9O1xuXG4gICAgSGVhcC5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVzLmxlbmd0aCA9PT0gMDtcbiAgICB9O1xuXG4gICAgSGVhcC5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXMubGVuZ3RoO1xuICAgIH07XG5cbiAgICBIZWFwLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhlYXA7XG4gICAgICBoZWFwID0gbmV3IEhlYXAoKTtcbiAgICAgIGhlYXAubm9kZXMgPSB0aGlzLm5vZGVzLnNsaWNlKDApO1xuICAgICAgcmV0dXJuIGhlYXA7XG4gICAgfTtcblxuICAgIEhlYXAucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVzLnNsaWNlKDApO1xuICAgIH07XG5cbiAgICBIZWFwLnByb3RvdHlwZS5pbnNlcnQgPSBIZWFwLnByb3RvdHlwZS5wdXNoO1xuXG4gICAgSGVhcC5wcm90b3R5cGUudG9wID0gSGVhcC5wcm90b3R5cGUucGVlaztcblxuICAgIEhlYXAucHJvdG90eXBlLmZyb250ID0gSGVhcC5wcm90b3R5cGUucGVlaztcblxuICAgIEhlYXAucHJvdG90eXBlLmhhcyA9IEhlYXAucHJvdG90eXBlLmNvbnRhaW5zO1xuXG4gICAgSGVhcC5wcm90b3R5cGUuY29weSA9IEhlYXAucHJvdG90eXBlLmNsb25lO1xuXG4gICAgcmV0dXJuIEhlYXA7XG5cbiAgfSkoKTtcblxuICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUgIT09IG51bGwgPyBtb2R1bGUuZXhwb3J0cyA6IHZvaWQgMCkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gSGVhcDtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cuSGVhcCA9IEhlYXA7XG4gIH1cblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/heap/lib/heap.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/index.js":
/*!*******************************************!*\
  !*** ./node_modules/pathfinding/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{module.exports = __webpack_require__(/*! ./src/PathFinding */ \"./node_modules/pathfinding/src/PathFinding.js\");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsOEdBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL25vZGVfbW9kdWxlcy9wYXRoZmluZGluZy9pbmRleC5qcz84MDBlIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvUGF0aEZpbmRpbmcnKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/index.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/PathFinding.js":
/*!*****************************************************!*\
  !*** ./node_modules/pathfinding/src/PathFinding.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{module.exports = {\r\n    'Heap'                      : __webpack_require__(/*! heap */ \"./node_modules/heap/index.js\"),\r\n    'Node'                      : __webpack_require__(/*! ./core/Node */ \"./node_modules/pathfinding/src/core/Node.js\"),\r\n    'Grid'                      : __webpack_require__(/*! ./core/Grid */ \"./node_modules/pathfinding/src/core/Grid.js\"),\r\n    'Util'                      : __webpack_require__(/*! ./core/Util */ \"./node_modules/pathfinding/src/core/Util.js\"),\r\n    'DiagonalMovement'          : __webpack_require__(/*! ./core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\"),\r\n    'Heuristic'                 : __webpack_require__(/*! ./core/Heuristic */ \"./node_modules/pathfinding/src/core/Heuristic.js\"),\r\n    'AStarFinder'               : __webpack_require__(/*! ./finders/AStarFinder */ \"./node_modules/pathfinding/src/finders/AStarFinder.js\"),\r\n    'BestFirstFinder'           : __webpack_require__(/*! ./finders/BestFirstFinder */ \"./node_modules/pathfinding/src/finders/BestFirstFinder.js\"),\r\n    'BreadthFirstFinder'        : __webpack_require__(/*! ./finders/BreadthFirstFinder */ \"./node_modules/pathfinding/src/finders/BreadthFirstFinder.js\"),\r\n    'DijkstraFinder'            : __webpack_require__(/*! ./finders/DijkstraFinder */ \"./node_modules/pathfinding/src/finders/DijkstraFinder.js\"),\r\n    'BiAStarFinder'             : __webpack_require__(/*! ./finders/BiAStarFinder */ \"./node_modules/pathfinding/src/finders/BiAStarFinder.js\"),\r\n    'BiBestFirstFinder'         : __webpack_require__(/*! ./finders/BiBestFirstFinder */ \"./node_modules/pathfinding/src/finders/BiBestFirstFinder.js\"),\r\n    'BiBreadthFirstFinder'      : __webpack_require__(/*! ./finders/BiBreadthFirstFinder */ \"./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js\"),\r\n    'BiDijkstraFinder'          : __webpack_require__(/*! ./finders/BiDijkstraFinder */ \"./node_modules/pathfinding/src/finders/BiDijkstraFinder.js\"),\r\n    'IDAStarFinder'             : __webpack_require__(/*! ./finders/IDAStarFinder */ \"./node_modules/pathfinding/src/finders/IDAStarFinder.js\"),\r\n    'JumpPointFinder'           : __webpack_require__(/*! ./finders/JumpPointFinder */ \"./node_modules/pathfinding/src/finders/JumpPointFinder.js\"),\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL1BhdGhGaW5kaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0NBQWtDLG1CQUFPLENBQUMsMENBQU07QUFDaEQsa0NBQWtDLG1CQUFPLENBQUMsZ0VBQWE7QUFDdkQsa0NBQWtDLG1CQUFPLENBQUMsZ0VBQWE7QUFDdkQsa0NBQWtDLG1CQUFPLENBQUMsZ0VBQWE7QUFDdkQsa0NBQWtDLG1CQUFPLENBQUMsd0ZBQXlCO0FBQ25FLGtDQUFrQyxtQkFBTyxDQUFDLDBFQUFrQjtBQUM1RCxrQ0FBa0MsbUJBQU8sQ0FBQyxvRkFBdUI7QUFDakUsa0NBQWtDLG1CQUFPLENBQUMsNEZBQTJCO0FBQ3JFLGtDQUFrQyxtQkFBTyxDQUFDLGtHQUE4QjtBQUN4RSxrQ0FBa0MsbUJBQU8sQ0FBQywwRkFBMEI7QUFDcEUsa0NBQWtDLG1CQUFPLENBQUMsd0ZBQXlCO0FBQ25FLGtDQUFrQyxtQkFBTyxDQUFDLGdHQUE2QjtBQUN2RSxrQ0FBa0MsbUJBQU8sQ0FBQyxzR0FBZ0M7QUFDMUUsa0NBQWtDLG1CQUFPLENBQUMsOEZBQTRCO0FBQ3RFLGtDQUFrQyxtQkFBTyxDQUFDLHdGQUF5QjtBQUNuRSxrQ0FBa0MsbUJBQU8sQ0FBQyw0RkFBMkI7QUFDckUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9QYXRoRmluZGluZy5qcz83NTg3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgJ0hlYXAnICAgICAgICAgICAgICAgICAgICAgIDogcmVxdWlyZSgnaGVhcCcpLFxyXG4gICAgJ05vZGUnICAgICAgICAgICAgICAgICAgICAgIDogcmVxdWlyZSgnLi9jb3JlL05vZGUnKSxcclxuICAgICdHcmlkJyAgICAgICAgICAgICAgICAgICAgICA6IHJlcXVpcmUoJy4vY29yZS9HcmlkJyksXHJcbiAgICAnVXRpbCcgICAgICAgICAgICAgICAgICAgICAgOiByZXF1aXJlKCcuL2NvcmUvVXRpbCcpLFxyXG4gICAgJ0RpYWdvbmFsTW92ZW1lbnQnICAgICAgICAgIDogcmVxdWlyZSgnLi9jb3JlL0RpYWdvbmFsTW92ZW1lbnQnKSxcclxuICAgICdIZXVyaXN0aWMnICAgICAgICAgICAgICAgICA6IHJlcXVpcmUoJy4vY29yZS9IZXVyaXN0aWMnKSxcclxuICAgICdBU3RhckZpbmRlcicgICAgICAgICAgICAgICA6IHJlcXVpcmUoJy4vZmluZGVycy9BU3RhckZpbmRlcicpLFxyXG4gICAgJ0Jlc3RGaXJzdEZpbmRlcicgICAgICAgICAgIDogcmVxdWlyZSgnLi9maW5kZXJzL0Jlc3RGaXJzdEZpbmRlcicpLFxyXG4gICAgJ0JyZWFkdGhGaXJzdEZpbmRlcicgICAgICAgIDogcmVxdWlyZSgnLi9maW5kZXJzL0JyZWFkdGhGaXJzdEZpbmRlcicpLFxyXG4gICAgJ0RpamtzdHJhRmluZGVyJyAgICAgICAgICAgIDogcmVxdWlyZSgnLi9maW5kZXJzL0RpamtzdHJhRmluZGVyJyksXHJcbiAgICAnQmlBU3RhckZpbmRlcicgICAgICAgICAgICAgOiByZXF1aXJlKCcuL2ZpbmRlcnMvQmlBU3RhckZpbmRlcicpLFxyXG4gICAgJ0JpQmVzdEZpcnN0RmluZGVyJyAgICAgICAgIDogcmVxdWlyZSgnLi9maW5kZXJzL0JpQmVzdEZpcnN0RmluZGVyJyksXHJcbiAgICAnQmlCcmVhZHRoRmlyc3RGaW5kZXInICAgICAgOiByZXF1aXJlKCcuL2ZpbmRlcnMvQmlCcmVhZHRoRmlyc3RGaW5kZXInKSxcclxuICAgICdCaURpamtzdHJhRmluZGVyJyAgICAgICAgICA6IHJlcXVpcmUoJy4vZmluZGVycy9CaURpamtzdHJhRmluZGVyJyksXHJcbiAgICAnSURBU3RhckZpbmRlcicgICAgICAgICAgICAgOiByZXF1aXJlKCcuL2ZpbmRlcnMvSURBU3RhckZpbmRlcicpLFxyXG4gICAgJ0p1bXBQb2ludEZpbmRlcicgICAgICAgICAgIDogcmVxdWlyZSgnLi9maW5kZXJzL0p1bXBQb2ludEZpbmRlcicpLFxyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/PathFinding.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/core/DiagonalMovement.js":
/*!***************************************************************!*\
  !*** ./node_modules/pathfinding/src/core/DiagonalMovement.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("{var DiagonalMovement = {\r\n    Always: 1,\r\n    Never: 2,\r\n    IfAtMostOneObstacle: 3,\r\n    OnlyWhenNoObstacles: 4\r\n};\r\n\r\nmodule.exports = DiagonalMovement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2NvcmUvRGlhZ29uYWxNb3ZlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL25vZGVfbW9kdWxlcy9wYXRoZmluZGluZy9zcmMvY29yZS9EaWFnb25hbE1vdmVtZW50LmpzPzM5ZTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIERpYWdvbmFsTW92ZW1lbnQgPSB7XHJcbiAgICBBbHdheXM6IDEsXHJcbiAgICBOZXZlcjogMixcclxuICAgIElmQXRNb3N0T25lT2JzdGFjbGU6IDMsXHJcbiAgICBPbmx5V2hlbk5vT2JzdGFjbGVzOiA0XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IERpYWdvbmFsTW92ZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/core/DiagonalMovement.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/core/Grid.js":
/*!***************************************************!*\
  !*** ./node_modules/pathfinding/src/core/Grid.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Node = __webpack_require__(/*! ./Node */ \"./node_modules/pathfinding/src/core/Node.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ./DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\r\nfunction Grid(width_or_matrix, height, matrix) {\r\n    var width;\r\n\r\n    if (typeof width_or_matrix !== 'object') {\r\n        width = width_or_matrix;\r\n    } else {\r\n        height = width_or_matrix.length;\r\n        width = width_or_matrix[0].length;\r\n        matrix = width_or_matrix;\r\n    }\r\n\r\n    /**\r\n     * The number of columns of the grid.\r\n     * @type number\r\n     */\r\n    this.width = width;\r\n    /**\r\n     * The number of rows of the grid.\r\n     * @type number\r\n     */\r\n    this.height = height;\r\n\r\n    /**\r\n     * A 2D array of nodes.\r\n     */\r\n    this.nodes = this._buildNodes(width, height, matrix);\r\n}\r\n\r\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\r\nGrid.prototype._buildNodes = function(width, height, matrix) {\r\n    var i, j,\r\n        nodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        nodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            nodes[i][j] = new Node(j, i);\r\n        }\r\n    }\r\n\r\n\r\n    if (matrix === undefined) {\r\n        return nodes;\r\n    }\r\n\r\n    if (matrix.length !== height || matrix[0].length !== width) {\r\n        throw new Error('Matrix size does not fit');\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        for (j = 0; j < width; ++j) {\r\n            if (matrix[i][j]) {\r\n                // 0, false, null will be walkable\r\n                // while others will be un-walkable\r\n                nodes[i][j].walkable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n};\r\n\r\n\r\nGrid.prototype.getNodeAt = function(x, y) {\r\n    return this.nodes[y][x];\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\r\nGrid.prototype.isWalkableAt = function(x, y) {\r\n    return this.isInside(x, y) && this.nodes[y][x].walkable;\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isInside = function(x, y) {\r\n    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);\r\n};\r\n\r\n\r\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\r\nGrid.prototype.setWalkableAt = function(x, y, walkable) {\r\n    this.nodes[y][x].walkable = walkable;\r\n};\r\n\r\n\r\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\r\nGrid.prototype.getNeighbors = function(node, diagonalMovement) {\r\n    var x = node.x,\r\n        y = node.y,\r\n        neighbors = [],\r\n        s0 = false, d0 = false,\r\n        s1 = false, d1 = false,\r\n        s2 = false, d2 = false,\r\n        s3 = false, d3 = false,\r\n        nodes = this.nodes;\r\n\r\n    // ↑\r\n    if (this.isWalkableAt(x, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x]);\r\n        s0 = true;\r\n    }\r\n    // →\r\n    if (this.isWalkableAt(x + 1, y)) {\r\n        neighbors.push(nodes[y][x + 1]);\r\n        s1 = true;\r\n    }\r\n    // ↓\r\n    if (this.isWalkableAt(x, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x]);\r\n        s2 = true;\r\n    }\r\n    // ←\r\n    if (this.isWalkableAt(x - 1, y)) {\r\n        neighbors.push(nodes[y][x - 1]);\r\n        s3 = true;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.Never) {\r\n        return neighbors;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        d0 = s3 && s0;\r\n        d1 = s0 && s1;\r\n        d2 = s1 && s2;\r\n        d3 = s2 && s3;\r\n    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\r\n        d0 = s3 || s0;\r\n        d1 = s0 || s1;\r\n        d2 = s1 || s2;\r\n        d3 = s2 || s3;\r\n    } else if (diagonalMovement === DiagonalMovement.Always) {\r\n        d0 = true;\r\n        d1 = true;\r\n        d2 = true;\r\n        d3 = true;\r\n    } else {\r\n        throw new Error('Incorrect value of diagonalMovement');\r\n    }\r\n\r\n    // ↖\r\n    if (d0 && this.isWalkableAt(x - 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x - 1]);\r\n    }\r\n    // ↗\r\n    if (d1 && this.isWalkableAt(x + 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x + 1]);\r\n    }\r\n    // ↘\r\n    if (d2 && this.isWalkableAt(x + 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x + 1]);\r\n    }\r\n    // ↙\r\n    if (d3 && this.isWalkableAt(x - 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x - 1]);\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\n\r\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\r\nGrid.prototype.clone = function() {\r\n    var i, j,\r\n\r\n        width = this.width,\r\n        height = this.height,\r\n        thisNodes = this.nodes,\r\n\r\n        newGrid = new Grid(width, height),\r\n        newNodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        newNodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\r\n        }\r\n    }\r\n\r\n    newGrid.nodes = newNodes;\r\n\r\n    return newGrid;\r\n};\r\n\r\nmodule.exports = Grid;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/core/Grid.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/core/Heuristic.js":
/*!********************************************************!*\
  !*** ./node_modules/pathfinding/src/core/Heuristic.js ***!
  \********************************************************/
/***/ ((module) => {

eval("{/**\r\n * @namespace PF.Heuristic\r\n * @description A collection of heuristic functions.\r\n */\r\nmodule.exports = {\r\n\r\n  /**\r\n   * Manhattan distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} dx + dy\r\n   */\r\n  manhattan: function(dx, dy) {\r\n      return dx + dy;\r\n  },\r\n\r\n  /**\r\n   * Euclidean distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy)\r\n   */\r\n  euclidean: function(dx, dy) {\r\n      return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n\r\n  /**\r\n   * Octile distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy) for grids\r\n   */\r\n  octile: function(dx, dy) {\r\n      var F = Math.SQRT2 - 1;\r\n      return (dx < dy) ? F * dx + dy : F * dy + dx;\r\n  },\r\n\r\n  /**\r\n   * Chebyshev distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} max(dx, dy)\r\n   */\r\n  chebyshev: function(dx, dy) {\r\n      return Math.max(dx, dy);\r\n  }\r\n\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2NvcmUvSGV1cmlzdGljLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2NvcmUvSGV1cmlzdGljLmpzPzAwYzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lc3BhY2UgUEYuSGV1cmlzdGljXHJcbiAqIEBkZXNjcmlwdGlvbiBBIGNvbGxlY3Rpb24gb2YgaGV1cmlzdGljIGZ1bmN0aW9ucy5cclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICAvKipcclxuICAgKiBNYW5oYXR0YW4gZGlzdGFuY2UuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR4IC0gRGlmZmVyZW5jZSBpbiB4LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkeSAtIERpZmZlcmVuY2UgaW4geS5cclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IGR4ICsgZHlcclxuICAgKi9cclxuICBtYW5oYXR0YW46IGZ1bmN0aW9uKGR4LCBkeSkge1xyXG4gICAgICByZXR1cm4gZHggKyBkeTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBFdWNsaWRlYW4gZGlzdGFuY2UuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR4IC0gRGlmZmVyZW5jZSBpbiB4LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkeSAtIERpZmZlcmVuY2UgaW4geS5cclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IHNxcnQoZHggKiBkeCArIGR5ICogZHkpXHJcbiAgICovXHJcbiAgZXVjbGlkZWFuOiBmdW5jdGlvbihkeCwgZHkpIHtcclxuICAgICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogT2N0aWxlIGRpc3RhbmNlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkeCAtIERpZmZlcmVuY2UgaW4geC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gZHkgLSBEaWZmZXJlbmNlIGluIHkuXHJcbiAgICogQHJldHVybiB7bnVtYmVyfSBzcXJ0KGR4ICogZHggKyBkeSAqIGR5KSBmb3IgZ3JpZHNcclxuICAgKi9cclxuICBvY3RpbGU6IGZ1bmN0aW9uKGR4LCBkeSkge1xyXG4gICAgICB2YXIgRiA9IE1hdGguU1FSVDIgLSAxO1xyXG4gICAgICByZXR1cm4gKGR4IDwgZHkpID8gRiAqIGR4ICsgZHkgOiBGICogZHkgKyBkeDtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBDaGVieXNoZXYgZGlzdGFuY2UuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGR4IC0gRGlmZmVyZW5jZSBpbiB4LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkeSAtIERpZmZlcmVuY2UgaW4geS5cclxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IG1heChkeCwgZHkpXHJcbiAgICovXHJcbiAgY2hlYnlzaGV2OiBmdW5jdGlvbihkeCwgZHkpIHtcclxuICAgICAgcmV0dXJuIE1hdGgubWF4KGR4LCBkeSk7XHJcbiAgfVxyXG5cclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/core/Heuristic.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/core/Node.js":
/*!***************************************************!*\
  !*** ./node_modules/pathfinding/src/core/Node.js ***!
  \***************************************************/
/***/ ((module) => {

eval("{/**\r\n * A node in grid. \r\n * This class holds some basic information about a node and custom \r\n * attributes may be added, depending on the algorithms' needs.\r\n * @constructor\r\n * @param {number} x - The x coordinate of the node on the grid.\r\n * @param {number} y - The y coordinate of the node on the grid.\r\n * @param {boolean} [walkable] - Whether this node is walkable.\r\n */\r\nfunction Node(x, y, walkable) {\r\n    /**\r\n     * The x coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.x = x;\r\n    /**\r\n     * The y coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.y = y;\r\n    /**\r\n     * Whether this node can be walked through.\r\n     * @type boolean\r\n     */\r\n    this.walkable = (walkable === undefined ? true : walkable);\r\n}\r\n\r\nmodule.exports = Node;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2NvcmUvTm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2NvcmUvTm9kZS5qcz80ZDY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBBIG5vZGUgaW4gZ3JpZC4gXHJcbiAqIFRoaXMgY2xhc3MgaG9sZHMgc29tZSBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBhIG5vZGUgYW5kIGN1c3RvbSBcclxuICogYXR0cmlidXRlcyBtYXkgYmUgYWRkZWQsIGRlcGVuZGluZyBvbiB0aGUgYWxnb3JpdGhtcycgbmVlZHMuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG5vZGUgb24gdGhlIGdyaWQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgbm9kZSBvbiB0aGUgZ3JpZC5cclxuICogQHBhcmFtIHtib29sZWFufSBbd2Fsa2FibGVdIC0gV2hldGhlciB0aGlzIG5vZGUgaXMgd2Fsa2FibGUuXHJcbiAqL1xyXG5mdW5jdGlvbiBOb2RlKHgsIHksIHdhbGthYmxlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG5vZGUgb24gdGhlIGdyaWQuXHJcbiAgICAgKiBAdHlwZSBudW1iZXJcclxuICAgICAqL1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgbm9kZSBvbiB0aGUgZ3JpZC5cclxuICAgICAqIEB0eXBlIG51bWJlclxyXG4gICAgICovXHJcbiAgICB0aGlzLnkgPSB5O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoaXMgbm9kZSBjYW4gYmUgd2Fsa2VkIHRocm91Z2guXHJcbiAgICAgKiBAdHlwZSBib29sZWFuXHJcbiAgICAgKi9cclxuICAgIHRoaXMud2Fsa2FibGUgPSAod2Fsa2FibGUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiB3YWxrYWJsZSk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTm9kZTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/core/Node.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/core/Util.js":
/*!***************************************************!*\
  !*** ./node_modules/pathfinding/src/core/Util.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("{/**\r\n * Backtrace according to the parent records and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node} node End node\r\n * @return {Array<Array<number>>} the path\r\n */\r\nfunction backtrace(node) {\r\n    var path = [[node.x, node.y]];\r\n    while (node.parent) {\r\n        node = node.parent;\r\n        path.push([node.x, node.y]);\r\n    }\r\n    return path.reverse();\r\n}\r\nexports.backtrace = backtrace;\r\n\r\n/**\r\n * Backtrace from start and end node, and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node}\r\n * @param {Node}\r\n */\r\nfunction biBacktrace(nodeA, nodeB) {\r\n    var pathA = backtrace(nodeA),\r\n        pathB = backtrace(nodeB);\r\n    return pathA.concat(pathB.reverse());\r\n}\r\nexports.biBacktrace = biBacktrace;\r\n\r\n/**\r\n * Compute the length of the path.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {number} The length of the path\r\n */\r\nfunction pathLength(path) {\r\n    var i, sum = 0, a, b, dx, dy;\r\n    for (i = 1; i < path.length; ++i) {\r\n        a = path[i - 1];\r\n        b = path[i];\r\n        dx = a[0] - b[0];\r\n        dy = a[1] - b[1];\r\n        sum += Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    return sum;\r\n}\r\nexports.pathLength = pathLength;\r\n\r\n\r\n/**\r\n * Given the start and end coordinates, return all the coordinates lying\r\n * on the line formed by these coordinates, based on Bresenham's algorithm.\r\n * http://en.wikipedia.org/wiki/Bresenham's_line_algorithm#Simplification\r\n * @param {number} x0 Start x coordinate\r\n * @param {number} y0 Start y coordinate\r\n * @param {number} x1 End x coordinate\r\n * @param {number} y1 End y coordinate\r\n * @return {Array<Array<number>>} The coordinates on the line\r\n */\r\nfunction interpolate(x0, y0, x1, y1) {\r\n    var abs = Math.abs,\r\n        line = [],\r\n        sx, sy, dx, dy, err, e2;\r\n\r\n    dx = abs(x1 - x0);\r\n    dy = abs(y1 - y0);\r\n\r\n    sx = (x0 < x1) ? 1 : -1;\r\n    sy = (y0 < y1) ? 1 : -1;\r\n\r\n    err = dx - dy;\r\n\r\n    while (true) {\r\n        line.push([x0, y0]);\r\n\r\n        if (x0 === x1 && y0 === y1) {\r\n            break;\r\n        }\r\n        \r\n        e2 = 2 * err;\r\n        if (e2 > -dy) {\r\n            err = err - dy;\r\n            x0 = x0 + sx;\r\n        }\r\n        if (e2 < dx) {\r\n            err = err + dx;\r\n            y0 = y0 + sy;\r\n        }\r\n    }\r\n\r\n    return line;\r\n}\r\nexports.interpolate = interpolate;\r\n\r\n\r\n/**\r\n * Given a compressed path, return a new path that has all the segments\r\n * in it interpolated.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} expanded path\r\n */\r\nfunction expandPath(path) {\r\n    var expanded = [],\r\n        len = path.length,\r\n        coord0, coord1,\r\n        interpolated,\r\n        interpolatedLen,\r\n        i, j;\r\n\r\n    if (len < 2) {\r\n        return expanded;\r\n    }\r\n\r\n    for (i = 0; i < len - 1; ++i) {\r\n        coord0 = path[i];\r\n        coord1 = path[i + 1];\r\n\r\n        interpolated = interpolate(coord0[0], coord0[1], coord1[0], coord1[1]);\r\n        interpolatedLen = interpolated.length;\r\n        for (j = 0; j < interpolatedLen - 1; ++j) {\r\n            expanded.push(interpolated[j]);\r\n        }\r\n    }\r\n    expanded.push(path[len - 1]);\r\n\r\n    return expanded;\r\n}\r\nexports.expandPath = expandPath;\r\n\r\n\r\n/**\r\n * Smoothen the give path.\r\n * The original path will not be modified; a new path will be returned.\r\n * @param {PF.Grid} grid\r\n * @param {Array<Array<number>>} path The path\r\n */\r\nfunction smoothenPath(grid, path) {\r\n    var len = path.length,\r\n        x0 = path[0][0],        // path start x\r\n        y0 = path[0][1],        // path start y\r\n        x1 = path[len - 1][0],  // path end x\r\n        y1 = path[len - 1][1],  // path end y\r\n        sx, sy,                 // current start coordinate\r\n        ex, ey,                 // current end coordinate\r\n        newPath,\r\n        i, j, coord, line, testCoord, blocked;\r\n\r\n    sx = x0;\r\n    sy = y0;\r\n    newPath = [[sx, sy]];\r\n\r\n    for (i = 2; i < len; ++i) {\r\n        coord = path[i];\r\n        ex = coord[0];\r\n        ey = coord[1];\r\n        line = interpolate(sx, sy, ex, ey);\r\n\r\n        blocked = false;\r\n        for (j = 1; j < line.length; ++j) {\r\n            testCoord = line[j];\r\n\r\n            if (!grid.isWalkableAt(testCoord[0], testCoord[1])) {\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (blocked) {\r\n            lastValidCoord = path[i - 1];\r\n            newPath.push(lastValidCoord);\r\n            sx = lastValidCoord[0];\r\n            sy = lastValidCoord[1];\r\n        }\r\n    }\r\n    newPath.push([x1, y1]);\r\n\r\n    return newPath;\r\n}\r\nexports.smoothenPath = smoothenPath;\r\n\r\n\r\n/**\r\n * Compress a path, remove redundant nodes without altering the shape\r\n * The original path is not modified\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} The compressed path\r\n */\r\nfunction compressPath(path) {\r\n\r\n    // nothing to compress\r\n    if(path.length < 3) {\r\n        return path;\r\n    }\r\n\r\n    var compressed = [],\r\n        sx = path[0][0], // start x\r\n        sy = path[0][1], // start y\r\n        px = path[1][0], // second point x\r\n        py = path[1][1], // second point y\r\n        dx = px - sx, // direction between the two points\r\n        dy = py - sy, // direction between the two points\r\n        lx, ly,\r\n        ldx, ldy,\r\n        sq, i;\r\n\r\n    // normalize the direction\r\n    sq = Math.sqrt(dx*dx + dy*dy);\r\n    dx /= sq;\r\n    dy /= sq;\r\n\r\n    // start the new path\r\n    compressed.push([sx,sy]);\r\n\r\n    for(i = 2; i < path.length; i++) {\r\n\r\n        // store the last point\r\n        lx = px;\r\n        ly = py;\r\n\r\n        // store the last direction\r\n        ldx = dx;\r\n        ldy = dy;\r\n\r\n        // next point\r\n        px = path[i][0];\r\n        py = path[i][1];\r\n\r\n        // next direction\r\n        dx = px - lx;\r\n        dy = py - ly;\r\n\r\n        // normalize\r\n        sq = Math.sqrt(dx*dx + dy*dy);\r\n        dx /= sq;\r\n        dy /= sq;\r\n\r\n        // if the direction has changed, store the point\r\n        if ( dx !== ldx || dy !== ldy ) {\r\n            compressed.push([lx,ly]);\r\n        }\r\n    }\r\n\r\n    // store the last point\r\n    compressed.push([px,py]);\r\n\r\n    return compressed;\r\n}\r\nexports.compressPath = compressPath;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/core/Util.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/AStarFinder.js":
/*!*************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/AStarFinder.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Heap       = __webpack_require__(/*! heap */ \"./node_modules/heap/index.js\");\r\nvar Util       = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar Heuristic  = __webpack_require__(/*! ../core/Heuristic */ \"./node_modules/pathfinding/src/core/Heuristic.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction AStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    //admissible. It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        // if reached the end position, construct the path and return it\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    openList.push(neighbor);\r\n                    neighbor.opened = true;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    openList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = AStarFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/AStarFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BestFirstFinder.js":
/*!*****************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BestFirstFinder.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var AStarFinder = __webpack_require__(/*! ./AStarFinder */ \"./node_modules/pathfinding/src/finders/AStarFinder.js\");\r\n\r\n/**\r\n * Best-First-Search path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BestFirstFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBestFirstFinder.prototype = new AStarFinder();\r\nBestFirstFinder.prototype.constructor = BestFirstFinder;\r\n\r\nmodule.exports = BestFirstFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmVzdEZpcnN0RmluZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLDRFQUFlO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0IsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmVzdEZpcnN0RmluZGVyLmpzPzU1ZDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEFTdGFyRmluZGVyID0gcmVxdWlyZSgnLi9BU3RhckZpbmRlcicpO1xyXG5cclxuLyoqXHJcbiAqIEJlc3QtRmlyc3QtU2VhcmNoIHBhdGgtZmluZGVyLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMgQVN0YXJGaW5kZXJcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdC5hbGxvd0RpYWdvbmFsIFdoZXRoZXIgZGlhZ29uYWwgbW92ZW1lbnQgaXMgYWxsb3dlZC5cclxuICogICAgIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0LmRvbnRDcm9zc0Nvcm5lcnMgRGlzYWxsb3cgZGlhZ29uYWwgbW92ZW1lbnQgdG91Y2hpbmdcclxuICogICAgIGJsb2NrIGNvcm5lcnMuIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7RGlhZ29uYWxNb3ZlbWVudH0gb3B0LmRpYWdvbmFsTW92ZW1lbnQgQWxsb3dlZCBkaWFnb25hbCBtb3ZlbWVudC5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0LmhldXJpc3RpYyBIZXVyaXN0aWMgZnVuY3Rpb24gdG8gZXN0aW1hdGUgdGhlIGRpc3RhbmNlXHJcbiAqICAgICAoZGVmYXVsdHMgdG8gbWFuaGF0dGFuKS5cclxuICovXHJcbmZ1bmN0aW9uIEJlc3RGaXJzdEZpbmRlcihvcHQpIHtcclxuICAgIEFTdGFyRmluZGVyLmNhbGwodGhpcywgb3B0KTtcclxuXHJcbiAgICB2YXIgb3JpZyA9IHRoaXMuaGV1cmlzdGljO1xyXG4gICAgdGhpcy5oZXVyaXN0aWMgPSBmdW5jdGlvbihkeCwgZHkpIHtcclxuICAgICAgICByZXR1cm4gb3JpZyhkeCwgZHkpICogMTAwMDAwMDtcclxuICAgIH07XHJcbn1cclxuXHJcbkJlc3RGaXJzdEZpbmRlci5wcm90b3R5cGUgPSBuZXcgQVN0YXJGaW5kZXIoKTtcclxuQmVzdEZpcnN0RmluZGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJlc3RGaXJzdEZpbmRlcjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmVzdEZpcnN0RmluZGVyO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BestFirstFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BiAStarFinder.js":
/*!***************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BiAStarFinder.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Heap       = __webpack_require__(/*! heap */ \"./node_modules/heap/index.js\");\r\nvar Util       = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar Heuristic  = __webpack_require__(/*! ../core/Heuristic */ \"./node_modules/pathfinding/src/core/Heuristic.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * A* path-finder.\r\n * based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction BiAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    //When diagonal movement is allowed the manhattan heuristic is not admissible\r\n    //It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var cmp = function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        },\r\n        startOpenList = new Heap(cmp),\r\n        endOpenList = new Heap(cmp),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng,\r\n        BY_START = 1, BY_END = 2;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    // and push it into the start open list\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n    startOpenList.push(startNode);\r\n    startNode.opened = BY_START;\r\n\r\n    // set the `g` and `f` value of the end node to be 0\r\n    // and push it into the open open list\r\n    endNode.g = 0;\r\n    endNode.f = 0;\r\n    endOpenList.push(endNode);\r\n    endNode.opened = BY_END;\r\n\r\n    // while both the open lists are not empty\r\n    while (!startOpenList.empty() && !endOpenList.empty()) {\r\n\r\n        // pop the position of start node which has the minimum `f` value.\r\n        node = startOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_END) {\r\n                return Util.biBacktrace(node, neighbor);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    startOpenList.push(neighbor);\r\n                    neighbor.opened = BY_START;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    startOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n\r\n\r\n        // pop the position of end node which has the minimum `f` value.\r\n        node = endOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_START) {\r\n                return Util.biBacktrace(neighbor, node);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - startX), abs(y - startY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    endOpenList.push(neighbor);\r\n                    neighbor.opened = BY_END;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    endOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiAStarFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BiAStarFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BiBestFirstFinder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BiBestFirstFinder.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var BiAStarFinder = __webpack_require__(/*! ./BiAStarFinder */ \"./node_modules/pathfinding/src/finders/BiAStarFinder.js\");\r\n\r\n/**\r\n * Bi-direcitional Best-First-Search path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BiBestFirstFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBiBestFirstFinder.prototype = new BiAStarFinder();\r\nBiBestFirstFinder.prototype.constructor = BiBestFirstFinder;\r\n\r\nmodule.exports = BiBestFirstFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmlCZXN0Rmlyc3RGaW5kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CLG1CQUFPLENBQUMsZ0ZBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0IsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmlCZXN0Rmlyc3RGaW5kZXIuanM/NDc1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQmlBU3RhckZpbmRlciA9IHJlcXVpcmUoJy4vQmlBU3RhckZpbmRlcicpO1xyXG5cclxuLyoqXHJcbiAqIEJpLWRpcmVjaXRpb25hbCBCZXN0LUZpcnN0LVNlYXJjaCBwYXRoLWZpbmRlci5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBleHRlbmRzIEJpQVN0YXJGaW5kZXJcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdC5hbGxvd0RpYWdvbmFsIFdoZXRoZXIgZGlhZ29uYWwgbW92ZW1lbnQgaXMgYWxsb3dlZC5cclxuICogICAgIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0LmRvbnRDcm9zc0Nvcm5lcnMgRGlzYWxsb3cgZGlhZ29uYWwgbW92ZW1lbnQgdG91Y2hpbmdcclxuICogICAgIGJsb2NrIGNvcm5lcnMuIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7RGlhZ29uYWxNb3ZlbWVudH0gb3B0LmRpYWdvbmFsTW92ZW1lbnQgQWxsb3dlZCBkaWFnb25hbCBtb3ZlbWVudC5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0LmhldXJpc3RpYyBIZXVyaXN0aWMgZnVuY3Rpb24gdG8gZXN0aW1hdGUgdGhlIGRpc3RhbmNlXHJcbiAqICAgICAoZGVmYXVsdHMgdG8gbWFuaGF0dGFuKS5cclxuICovXHJcbmZ1bmN0aW9uIEJpQmVzdEZpcnN0RmluZGVyKG9wdCkge1xyXG4gICAgQmlBU3RhckZpbmRlci5jYWxsKHRoaXMsIG9wdCk7XHJcblxyXG4gICAgdmFyIG9yaWcgPSB0aGlzLmhldXJpc3RpYztcclxuICAgIHRoaXMuaGV1cmlzdGljID0gZnVuY3Rpb24oZHgsIGR5KSB7XHJcbiAgICAgICAgcmV0dXJuIG9yaWcoZHgsIGR5KSAqIDEwMDAwMDA7XHJcbiAgICB9O1xyXG59XHJcblxyXG5CaUJlc3RGaXJzdEZpbmRlci5wcm90b3R5cGUgPSBuZXcgQmlBU3RhckZpbmRlcigpO1xyXG5CaUJlc3RGaXJzdEZpbmRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCaUJlc3RGaXJzdEZpbmRlcjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQmlCZXN0Rmlyc3RGaW5kZXI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BiBestFirstFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Util = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Bi-directional Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiBreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        startOpenList = [], endOpenList = [],\r\n        neighbors, neighbor, node,\r\n        diagonalMovement = this.diagonalMovement,\r\n        BY_START = 0, BY_END = 1,\r\n        i, l;\r\n\r\n    // push the start and end nodes into the queues\r\n    startOpenList.push(startNode);\r\n    startNode.opened = true;\r\n    startNode.by = BY_START;\r\n\r\n    endOpenList.push(endNode);\r\n    endNode.opened = true;\r\n    endNode.by = BY_END;\r\n\r\n    // while both the queues are not empty\r\n    while (startOpenList.length && endOpenList.length) {\r\n\r\n        // expand start open list\r\n\r\n        node = startOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                // if this node has been inspected by the reversed search,\r\n                // then a path is found.\r\n                if (neighbor.by === BY_END) {\r\n                    return Util.biBacktrace(node, neighbor);\r\n                }\r\n                continue;\r\n            }\r\n            startOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_START;\r\n        }\r\n\r\n        // expand end open list\r\n\r\n        node = endOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                if (neighbor.by === BY_START) {\r\n                    return Util.biBacktrace(neighbor, node);\r\n                }\r\n                continue;\r\n            }\r\n            endOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_END;\r\n        }\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiBreadthFirstFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmlCcmVhZHRoRmlyc3RGaW5kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLGlFQUFjO0FBQ2pDLHVCQUF1QixtQkFBTyxDQUFDLHlGQUEwQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0JBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxPQUFPO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0JpQnJlYWR0aEZpcnN0RmluZGVyLmpzPzIwMTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFV0aWwgPSByZXF1aXJlKCcuLi9jb3JlL1V0aWwnKTtcclxudmFyIERpYWdvbmFsTW92ZW1lbnQgPSByZXF1aXJlKCcuLi9jb3JlL0RpYWdvbmFsTW92ZW1lbnQnKTtcclxuXHJcbi8qKlxyXG4gKiBCaS1kaXJlY3Rpb25hbCBCcmVhZHRoLUZpcnN0LVNlYXJjaCBwYXRoIGZpbmRlci5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRcclxuICogQHBhcmFtIHtib29sZWFufSBvcHQuYWxsb3dEaWFnb25hbCBXaGV0aGVyIGRpYWdvbmFsIG1vdmVtZW50IGlzIGFsbG93ZWQuXHJcbiAqICAgICBEZXByZWNhdGVkLCB1c2UgZGlhZ29uYWxNb3ZlbWVudCBpbnN0ZWFkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdC5kb250Q3Jvc3NDb3JuZXJzIERpc2FsbG93IGRpYWdvbmFsIG1vdmVtZW50IHRvdWNoaW5nXHJcbiAqICAgICBibG9jayBjb3JuZXJzLiBEZXByZWNhdGVkLCB1c2UgZGlhZ29uYWxNb3ZlbWVudCBpbnN0ZWFkLlxyXG4gKiBAcGFyYW0ge0RpYWdvbmFsTW92ZW1lbnR9IG9wdC5kaWFnb25hbE1vdmVtZW50IEFsbG93ZWQgZGlhZ29uYWwgbW92ZW1lbnQuXHJcbiAqL1xyXG5mdW5jdGlvbiBCaUJyZWFkdGhGaXJzdEZpbmRlcihvcHQpIHtcclxuICAgIG9wdCA9IG9wdCB8fCB7fTtcclxuICAgIHRoaXMuYWxsb3dEaWFnb25hbCA9IG9wdC5hbGxvd0RpYWdvbmFsO1xyXG4gICAgdGhpcy5kb250Q3Jvc3NDb3JuZXJzID0gb3B0LmRvbnRDcm9zc0Nvcm5lcnM7XHJcbiAgICB0aGlzLmRpYWdvbmFsTW92ZW1lbnQgPSBvcHQuZGlhZ29uYWxNb3ZlbWVudDtcclxuXHJcbiAgICBpZiAoIXRoaXMuZGlhZ29uYWxNb3ZlbWVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5hbGxvd0RpYWdvbmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlhZ29uYWxNb3ZlbWVudCA9IERpYWdvbmFsTW92ZW1lbnQuTmV2ZXI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZG9udENyb3NzQ29ybmVycykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFnb25hbE1vdmVtZW50ID0gRGlhZ29uYWxNb3ZlbWVudC5Pbmx5V2hlbk5vT2JzdGFjbGVzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFnb25hbE1vdmVtZW50ID0gRGlhZ29uYWxNb3ZlbWVudC5JZkF0TW9zdE9uZU9ic3RhY2xlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEZpbmQgYW5kIHJldHVybiB0aGUgdGhlIHBhdGguXHJcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fSBUaGUgcGF0aCwgaW5jbHVkaW5nIGJvdGggc3RhcnQgYW5kXHJcbiAqICAgICBlbmQgcG9zaXRpb25zLlxyXG4gKi9cclxuQmlCcmVhZHRoRmlyc3RGaW5kZXIucHJvdG90eXBlLmZpbmRQYXRoID0gZnVuY3Rpb24oc3RhcnRYLCBzdGFydFksIGVuZFgsIGVuZFksIGdyaWQpIHtcclxuICAgIHZhciBzdGFydE5vZGUgPSBncmlkLmdldE5vZGVBdChzdGFydFgsIHN0YXJ0WSksXHJcbiAgICAgICAgZW5kTm9kZSA9IGdyaWQuZ2V0Tm9kZUF0KGVuZFgsIGVuZFkpLFxyXG4gICAgICAgIHN0YXJ0T3Blbkxpc3QgPSBbXSwgZW5kT3Blbkxpc3QgPSBbXSxcclxuICAgICAgICBuZWlnaGJvcnMsIG5laWdoYm9yLCBub2RlLFxyXG4gICAgICAgIGRpYWdvbmFsTW92ZW1lbnQgPSB0aGlzLmRpYWdvbmFsTW92ZW1lbnQsXHJcbiAgICAgICAgQllfU1RBUlQgPSAwLCBCWV9FTkQgPSAxLFxyXG4gICAgICAgIGksIGw7XHJcblxyXG4gICAgLy8gcHVzaCB0aGUgc3RhcnQgYW5kIGVuZCBub2RlcyBpbnRvIHRoZSBxdWV1ZXNcclxuICAgIHN0YXJ0T3Blbkxpc3QucHVzaChzdGFydE5vZGUpO1xyXG4gICAgc3RhcnROb2RlLm9wZW5lZCA9IHRydWU7XHJcbiAgICBzdGFydE5vZGUuYnkgPSBCWV9TVEFSVDtcclxuXHJcbiAgICBlbmRPcGVuTGlzdC5wdXNoKGVuZE5vZGUpO1xyXG4gICAgZW5kTm9kZS5vcGVuZWQgPSB0cnVlO1xyXG4gICAgZW5kTm9kZS5ieSA9IEJZX0VORDtcclxuXHJcbiAgICAvLyB3aGlsZSBib3RoIHRoZSBxdWV1ZXMgYXJlIG5vdCBlbXB0eVxyXG4gICAgd2hpbGUgKHN0YXJ0T3Blbkxpc3QubGVuZ3RoICYmIGVuZE9wZW5MaXN0Lmxlbmd0aCkge1xyXG5cclxuICAgICAgICAvLyBleHBhbmQgc3RhcnQgb3BlbiBsaXN0XHJcblxyXG4gICAgICAgIG5vZGUgPSBzdGFydE9wZW5MaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgbm9kZS5jbG9zZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICBuZWlnaGJvcnMgPSBncmlkLmdldE5laWdoYm9ycyhub2RlLCBkaWFnb25hbE1vdmVtZW50KTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gbmVpZ2hib3JzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICBuZWlnaGJvciA9IG5laWdoYm9yc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZWlnaGJvci5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuZWlnaGJvci5vcGVuZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgbm9kZSBoYXMgYmVlbiBpbnNwZWN0ZWQgYnkgdGhlIHJldmVyc2VkIHNlYXJjaCxcclxuICAgICAgICAgICAgICAgIC8vIHRoZW4gYSBwYXRoIGlzIGZvdW5kLlxyXG4gICAgICAgICAgICAgICAgaWYgKG5laWdoYm9yLmJ5ID09PSBCWV9FTkQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbC5iaUJhY2t0cmFjZShub2RlLCBuZWlnaGJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGFydE9wZW5MaXN0LnB1c2gobmVpZ2hib3IpO1xyXG4gICAgICAgICAgICBuZWlnaGJvci5wYXJlbnQgPSBub2RlO1xyXG4gICAgICAgICAgICBuZWlnaGJvci5vcGVuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBuZWlnaGJvci5ieSA9IEJZX1NUQVJUO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZXhwYW5kIGVuZCBvcGVuIGxpc3RcclxuXHJcbiAgICAgICAgbm9kZSA9IGVuZE9wZW5MaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgbm9kZS5jbG9zZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICBuZWlnaGJvcnMgPSBncmlkLmdldE5laWdoYm9ycyhub2RlLCBkaWFnb25hbE1vdmVtZW50KTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gbmVpZ2hib3JzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICBuZWlnaGJvciA9IG5laWdoYm9yc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZWlnaGJvci5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuZWlnaGJvci5vcGVuZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZWlnaGJvci5ieSA9PT0gQllfU1RBUlQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbC5iaUJhY2t0cmFjZShuZWlnaGJvciwgbm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbmRPcGVuTGlzdC5wdXNoKG5laWdoYm9yKTtcclxuICAgICAgICAgICAgbmVpZ2hib3IucGFyZW50ID0gbm9kZTtcclxuICAgICAgICAgICAgbmVpZ2hib3Iub3BlbmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgbmVpZ2hib3IuYnkgPSBCWV9FTkQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGZhaWwgdG8gZmluZCB0aGUgcGF0aFxyXG4gICAgcmV0dXJuIFtdO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCaUJyZWFkdGhGaXJzdEZpbmRlcjtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BiDijkstraFinder.js":
/*!******************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BiDijkstraFinder.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var BiAStarFinder = __webpack_require__(/*! ./BiAStarFinder */ \"./node_modules/pathfinding/src/finders/BiAStarFinder.js\");\r\n\r\n/**\r\n * Bi-directional Dijkstra path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiDijkstraFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nBiDijkstraFinder.prototype = new BiAStarFinder();\r\nBiDijkstraFinder.prototype.constructor = BiDijkstraFinder;\r\n\r\nmodule.exports = BiDijkstraFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQmlEaWprc3RyYUZpbmRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0IsbUJBQU8sQ0FBQyxnRkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0JpRGlqa3N0cmFGaW5kZXIuanM/NDlhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQmlBU3RhckZpbmRlciA9IHJlcXVpcmUoJy4vQmlBU3RhckZpbmRlcicpO1xyXG5cclxuLyoqXHJcbiAqIEJpLWRpcmVjdGlvbmFsIERpamtzdHJhIHBhdGgtZmluZGVyLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMgQmlBU3RhckZpbmRlclxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0XHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0LmFsbG93RGlhZ29uYWwgV2hldGhlciBkaWFnb25hbCBtb3ZlbWVudCBpcyBhbGxvd2VkLlxyXG4gKiAgICAgRGVwcmVjYXRlZCwgdXNlIGRpYWdvbmFsTW92ZW1lbnQgaW5zdGVhZC5cclxuICogQHBhcmFtIHtib29sZWFufSBvcHQuZG9udENyb3NzQ29ybmVycyBEaXNhbGxvdyBkaWFnb25hbCBtb3ZlbWVudCB0b3VjaGluZ1xyXG4gKiAgICAgYmxvY2sgY29ybmVycy4gRGVwcmVjYXRlZCwgdXNlIGRpYWdvbmFsTW92ZW1lbnQgaW5zdGVhZC5cclxuICogQHBhcmFtIHtEaWFnb25hbE1vdmVtZW50fSBvcHQuZGlhZ29uYWxNb3ZlbWVudCBBbGxvd2VkIGRpYWdvbmFsIG1vdmVtZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gQmlEaWprc3RyYUZpbmRlcihvcHQpIHtcclxuICAgIEJpQVN0YXJGaW5kZXIuY2FsbCh0aGlzLCBvcHQpO1xyXG4gICAgdGhpcy5oZXVyaXN0aWMgPSBmdW5jdGlvbihkeCwgZHkpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbn1cclxuXHJcbkJpRGlqa3N0cmFGaW5kZXIucHJvdG90eXBlID0gbmV3IEJpQVN0YXJGaW5kZXIoKTtcclxuQmlEaWprc3RyYUZpbmRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCaURpamtzdHJhRmluZGVyO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCaURpamtzdHJhRmluZGVyO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BiDijkstraFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/BreadthFirstFinder.js":
/*!********************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/BreadthFirstFinder.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Util = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = [],\r\n        diagonalMovement = this.diagonalMovement,\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        neighbors, neighbor, node, i, l;\r\n\r\n    // push the start pos into the queue\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the queue is not empty\r\n    while (openList.length) {\r\n        // take the front node from the queue\r\n        node = openList.shift();\r\n        node.closed = true;\r\n\r\n        // reached the end position\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            // skip this neighbor if it has been inspected before\r\n            if (neighbor.closed || neighbor.opened) {\r\n                continue;\r\n            }\r\n\r\n            openList.push(neighbor);\r\n            neighbor.opened = true;\r\n            neighbor.parent = node;\r\n        }\r\n    }\r\n    \r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BreadthFirstFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvQnJlYWR0aEZpcnN0RmluZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyxpRUFBYztBQUNqQyx1QkFBdUIsbUJBQU8sQ0FBQyx5RkFBMEI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0JyZWFkdGhGaXJzdEZpbmRlci5qcz81OGM0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBVdGlsID0gcmVxdWlyZSgnLi4vY29yZS9VdGlsJyk7XHJcbnZhciBEaWFnb25hbE1vdmVtZW50ID0gcmVxdWlyZSgnLi4vY29yZS9EaWFnb25hbE1vdmVtZW50Jyk7XHJcblxyXG4vKipcclxuICogQnJlYWR0aC1GaXJzdC1TZWFyY2ggcGF0aCBmaW5kZXIuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0XHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0LmFsbG93RGlhZ29uYWwgV2hldGhlciBkaWFnb25hbCBtb3ZlbWVudCBpcyBhbGxvd2VkLlxyXG4gKiAgICAgRGVwcmVjYXRlZCwgdXNlIGRpYWdvbmFsTW92ZW1lbnQgaW5zdGVhZC5cclxuICogQHBhcmFtIHtib29sZWFufSBvcHQuZG9udENyb3NzQ29ybmVycyBEaXNhbGxvdyBkaWFnb25hbCBtb3ZlbWVudCB0b3VjaGluZ1xyXG4gKiAgICAgYmxvY2sgY29ybmVycy4gRGVwcmVjYXRlZCwgdXNlIGRpYWdvbmFsTW92ZW1lbnQgaW5zdGVhZC5cclxuICogQHBhcmFtIHtEaWFnb25hbE1vdmVtZW50fSBvcHQuZGlhZ29uYWxNb3ZlbWVudCBBbGxvd2VkIGRpYWdvbmFsIG1vdmVtZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gQnJlYWR0aEZpcnN0RmluZGVyKG9wdCkge1xyXG4gICAgb3B0ID0gb3B0IHx8IHt9O1xyXG4gICAgdGhpcy5hbGxvd0RpYWdvbmFsID0gb3B0LmFsbG93RGlhZ29uYWw7XHJcbiAgICB0aGlzLmRvbnRDcm9zc0Nvcm5lcnMgPSBvcHQuZG9udENyb3NzQ29ybmVycztcclxuICAgIHRoaXMuZGlhZ29uYWxNb3ZlbWVudCA9IG9wdC5kaWFnb25hbE1vdmVtZW50O1xyXG5cclxuICAgIGlmICghdGhpcy5kaWFnb25hbE1vdmVtZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFsbG93RGlhZ29uYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5kaWFnb25hbE1vdmVtZW50ID0gRGlhZ29uYWxNb3ZlbWVudC5OZXZlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kb250Q3Jvc3NDb3JuZXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWdvbmFsTW92ZW1lbnQgPSBEaWFnb25hbE1vdmVtZW50Lk9ubHlXaGVuTm9PYnN0YWNsZXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWdvbmFsTW92ZW1lbnQgPSBEaWFnb25hbE1vdmVtZW50LklmQXRNb3N0T25lT2JzdGFjbGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaW5kIGFuZCByZXR1cm4gdGhlIHRoZSBwYXRoLlxyXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gVGhlIHBhdGgsIGluY2x1ZGluZyBib3RoIHN0YXJ0IGFuZFxyXG4gKiAgICAgZW5kIHBvc2l0aW9ucy5cclxuICovXHJcbkJyZWFkdGhGaXJzdEZpbmRlci5wcm90b3R5cGUuZmluZFBhdGggPSBmdW5jdGlvbihzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSwgZ3JpZCkge1xyXG4gICAgdmFyIG9wZW5MaXN0ID0gW10sXHJcbiAgICAgICAgZGlhZ29uYWxNb3ZlbWVudCA9IHRoaXMuZGlhZ29uYWxNb3ZlbWVudCxcclxuICAgICAgICBzdGFydE5vZGUgPSBncmlkLmdldE5vZGVBdChzdGFydFgsIHN0YXJ0WSksXHJcbiAgICAgICAgZW5kTm9kZSA9IGdyaWQuZ2V0Tm9kZUF0KGVuZFgsIGVuZFkpLFxyXG4gICAgICAgIG5laWdoYm9ycywgbmVpZ2hib3IsIG5vZGUsIGksIGw7XHJcblxyXG4gICAgLy8gcHVzaCB0aGUgc3RhcnQgcG9zIGludG8gdGhlIHF1ZXVlXHJcbiAgICBvcGVuTGlzdC5wdXNoKHN0YXJ0Tm9kZSk7XHJcbiAgICBzdGFydE5vZGUub3BlbmVkID0gdHJ1ZTtcclxuXHJcbiAgICAvLyB3aGlsZSB0aGUgcXVldWUgaXMgbm90IGVtcHR5XHJcbiAgICB3aGlsZSAob3Blbkxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gdGFrZSB0aGUgZnJvbnQgbm9kZSBmcm9tIHRoZSBxdWV1ZVxyXG4gICAgICAgIG5vZGUgPSBvcGVuTGlzdC5zaGlmdCgpO1xyXG4gICAgICAgIG5vZGUuY2xvc2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gcmVhY2hlZCB0aGUgZW5kIHBvc2l0aW9uXHJcbiAgICAgICAgaWYgKG5vZGUgPT09IGVuZE5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFV0aWwuYmFja3RyYWNlKGVuZE5vZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbmVpZ2hib3JzID0gZ3JpZC5nZXROZWlnaGJvcnMobm9kZSwgZGlhZ29uYWxNb3ZlbWVudCk7XHJcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IG5laWdoYm9ycy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgbmVpZ2hib3IgPSBuZWlnaGJvcnNbaV07XHJcblxyXG4gICAgICAgICAgICAvLyBza2lwIHRoaXMgbmVpZ2hib3IgaWYgaXQgaGFzIGJlZW4gaW5zcGVjdGVkIGJlZm9yZVxyXG4gICAgICAgICAgICBpZiAobmVpZ2hib3IuY2xvc2VkIHx8IG5laWdoYm9yLm9wZW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9wZW5MaXN0LnB1c2gobmVpZ2hib3IpO1xyXG4gICAgICAgICAgICBuZWlnaGJvci5vcGVuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBuZWlnaGJvci5wYXJlbnQgPSBub2RlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gZmFpbCB0byBmaW5kIHRoZSBwYXRoXHJcbiAgICByZXR1cm4gW107XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJyZWFkdGhGaXJzdEZpbmRlcjtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/BreadthFirstFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/DijkstraFinder.js":
/*!****************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/DijkstraFinder.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var AStarFinder = __webpack_require__(/*! ./AStarFinder */ \"./node_modules/pathfinding/src/finders/AStarFinder.js\");\r\n\r\n/**\r\n * Dijkstra path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction DijkstraFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nDijkstraFinder.prototype = new AStarFinder();\r\nDijkstraFinder.prototype.constructor = DijkstraFinder;\r\n\r\nmodule.exports = DijkstraFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvRGlqa3N0cmFGaW5kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLG1CQUFPLENBQUMsNEVBQWU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0RpamtzdHJhRmluZGVyLmpzP2E1OTEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEFTdGFyRmluZGVyID0gcmVxdWlyZSgnLi9BU3RhckZpbmRlcicpO1xyXG5cclxuLyoqXHJcbiAqIERpamtzdHJhIHBhdGgtZmluZGVyLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMgQVN0YXJGaW5kZXJcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdC5hbGxvd0RpYWdvbmFsIFdoZXRoZXIgZGlhZ29uYWwgbW92ZW1lbnQgaXMgYWxsb3dlZC5cclxuICogICAgIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0LmRvbnRDcm9zc0Nvcm5lcnMgRGlzYWxsb3cgZGlhZ29uYWwgbW92ZW1lbnQgdG91Y2hpbmdcclxuICogICAgIGJsb2NrIGNvcm5lcnMuIERlcHJlY2F0ZWQsIHVzZSBkaWFnb25hbE1vdmVtZW50IGluc3RlYWQuXHJcbiAqIEBwYXJhbSB7RGlhZ29uYWxNb3ZlbWVudH0gb3B0LmRpYWdvbmFsTW92ZW1lbnQgQWxsb3dlZCBkaWFnb25hbCBtb3ZlbWVudC5cclxuICovXHJcbmZ1bmN0aW9uIERpamtzdHJhRmluZGVyKG9wdCkge1xyXG4gICAgQVN0YXJGaW5kZXIuY2FsbCh0aGlzLCBvcHQpO1xyXG4gICAgdGhpcy5oZXVyaXN0aWMgPSBmdW5jdGlvbihkeCwgZHkpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbn1cclxuXHJcbkRpamtzdHJhRmluZGVyLnByb3RvdHlwZSA9IG5ldyBBU3RhckZpbmRlcigpO1xyXG5EaWprc3RyYUZpbmRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEaWprc3RyYUZpbmRlcjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRGlqa3N0cmFGaW5kZXI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/DijkstraFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/IDAStarFinder.js":
/*!***************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/IDAStarFinder.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var Util       = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar Heuristic  = __webpack_require__(/*! ../core/Heuristic */ \"./node_modules/pathfinding/src/core/Heuristic.js\");\r\nvar Node       = __webpack_require__(/*! ../core/Node */ \"./node_modules/pathfinding/src/core/Node.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Iterative Deeping A Star (IDA*) path-finder.\r\n *\r\n * Recursion based on:\r\n *   http://www.apl.jhu.edu/~hall/AI-Programming/IDA-Star.html\r\n *\r\n * Path retracing based on:\r\n *  V. Nageshwara Rao, Vipin Kumar and K. Ramesh\r\n *  \"A Parallel Implementation of Iterative-Deeping-A*\", January 1987.\r\n *  ftp://ftp.cs.utexas.edu/.snapshot/hourly.1/pub/AI-Lab/tech-reports/UT-AI-TR-87-46.pdf\r\n *\r\n * @author Gerard Meier (www.gerardmeier.com)\r\n *\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n * @param {boolean} opt.trackRecursion Whether to track recursion for\r\n *     statistical purposes.\r\n * @param {number} opt.timeLimit Maximum execution time. Use <= 0 for infinite.\r\n */\r\nfunction IDAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.trackRecursion = opt.trackRecursion || false;\r\n    this.timeLimit = opt.timeLimit || Infinity; // Default: no time limit.\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    // admissible, it should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path. When an empty array is returned, either\r\n * no path is possible, or the maximum execution time is reached.\r\n *\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nIDAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    // Used for statistics:\r\n    var nodesVisited = 0;\r\n\r\n    // Execution time limitation:\r\n    var startTime = new Date().getTime();\r\n\r\n    // Heuristic helper:\r\n    var h = function(a, b) {\r\n        return this.heuristic(Math.abs(b.x - a.x), Math.abs(b.y - a.y));\r\n    }.bind(this);\r\n\r\n    // Step cost from a to b:\r\n    var cost = function(a, b) {\r\n        return (a.x === b.x || a.y === b.y) ? 1 : Math.SQRT2;\r\n    };\r\n\r\n    /**\r\n     * IDA* search implementation.\r\n     *\r\n     * @param {Node} The node currently expanding from.\r\n     * @param {number} Cost to reach the given node.\r\n     * @param {number} Maximum search depth (cut-off value).\r\n     * @param {Array<Array<number>>} The found route.\r\n     * @param {number} Recursion depth.\r\n     *\r\n     * @return {Object} either a number with the new optimal cut-off depth,\r\n     * or a valid node instance, in which case a path was found.\r\n     */\r\n    var search = function(node, g, cutoff, route, depth) {\r\n        nodesVisited++;\r\n\r\n        // Enforce timelimit:\r\n        if (this.timeLimit > 0 &&\r\n            new Date().getTime() - startTime > this.timeLimit * 1000) {\r\n            // Enforced as \"path-not-found\".\r\n            return Infinity;\r\n        }\r\n\r\n        var f = g + h(node, end) * this.weight;\r\n\r\n        // We've searched too deep for this iteration.\r\n        if (f > cutoff) {\r\n            return f;\r\n        }\r\n\r\n        if (node == end) {\r\n            route[depth] = [node.x, node.y];\r\n            return node;\r\n        }\r\n\r\n        var min, t, k, neighbour;\r\n\r\n        var neighbours = grid.getNeighbors(node, this.diagonalMovement);\r\n\r\n        // Sort the neighbours, gives nicer paths. But, this deviates\r\n        // from the original algorithm - so I left it out.\r\n        //neighbours.sort(function(a, b){\r\n        //    return h(a, end) - h(b, end);\r\n        //});\r\n\r\n        \r\n        /*jshint -W084 *///Disable warning: Expected a conditional expression and instead saw an assignment\r\n        for (k = 0, min = Infinity; neighbour = neighbours[k]; ++k) {\r\n        /*jshint +W084 *///Enable warning: Expected a conditional expression and instead saw an assignment\r\n            if (this.trackRecursion) {\r\n                // Retain a copy for visualisation. Due to recursion, this\r\n                // node may be part of other paths too.\r\n                neighbour.retainCount = neighbour.retainCount + 1 || 1;\r\n\r\n                if(neighbour.tested !== true) {\r\n                    neighbour.tested = true;\r\n                }\r\n            }\r\n\r\n            t = search(neighbour, g + cost(node, neighbour), cutoff, route, depth + 1);\r\n\r\n            if (t instanceof Node) {\r\n                route[depth] = [node.x, node.y];\r\n\r\n                // For a typical A* linked list, this would work:\r\n                // neighbour.parent = node;\r\n                return t;\r\n            }\r\n\r\n            // Decrement count, then determine whether it's actually closed.\r\n            if (this.trackRecursion && (--neighbour.retainCount) === 0) {\r\n                neighbour.tested = false;\r\n            }\r\n\r\n            if (t < min) {\r\n                min = t;\r\n            }\r\n        }\r\n\r\n        return min;\r\n\r\n    }.bind(this);\r\n\r\n    // Node instance lookups:\r\n    var start = grid.getNodeAt(startX, startY);\r\n    var end   = grid.getNodeAt(endX, endY);\r\n\r\n    // Initial search depth, given the typical heuristic contraints,\r\n    // there should be no cheaper route possible.\r\n    var cutOff = h(start, end);\r\n\r\n    var j, route, t;\r\n\r\n    // With an overflow protection.\r\n    for (j = 0; true; ++j) {\r\n\r\n        route = [];\r\n\r\n        // Search till cut-off depth:\r\n        t = search(start, 0, cutOff, route, 0);\r\n\r\n        // Route not possible, or not found in time limit.\r\n        if (t === Infinity) {\r\n            return [];\r\n        }\r\n\r\n        // If t is a node, it's also the end node. Route is now\r\n        // populated with a valid path to the end node.\r\n        if (t instanceof Node) {\r\n            return route;\r\n        }\r\n\r\n        // Try again, this time with a deeper cut-off. The t score\r\n        // is the closest we got to the end node.\r\n        cutOff = t;\r\n    }\r\n\r\n    // This _should_ never to be reached.\r\n    return [];\r\n};\r\n\r\nmodule.exports = IDAStarFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSURBU3RhckZpbmRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBYztBQUN2QyxpQkFBaUIsbUJBQU8sQ0FBQywyRUFBbUI7QUFDNUMsaUJBQWlCLG1CQUFPLENBQUMsaUVBQWM7QUFDdkMsdUJBQXVCLG1CQUFPLENBQUMseUZBQTBCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QixXQUFXLFVBQVU7QUFDckI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxzQkFBc0I7QUFDckMsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsMkJBQTJCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsTUFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0lEQVN0YXJGaW5kZXIuanM/ZWVjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVXRpbCAgICAgICA9IHJlcXVpcmUoJy4uL2NvcmUvVXRpbCcpO1xyXG52YXIgSGV1cmlzdGljICA9IHJlcXVpcmUoJy4uL2NvcmUvSGV1cmlzdGljJyk7XHJcbnZhciBOb2RlICAgICAgID0gcmVxdWlyZSgnLi4vY29yZS9Ob2RlJyk7XHJcbnZhciBEaWFnb25hbE1vdmVtZW50ID0gcmVxdWlyZSgnLi4vY29yZS9EaWFnb25hbE1vdmVtZW50Jyk7XHJcblxyXG4vKipcclxuICogSXRlcmF0aXZlIERlZXBpbmcgQSBTdGFyIChJREEqKSBwYXRoLWZpbmRlci5cclxuICpcclxuICogUmVjdXJzaW9uIGJhc2VkIG9uOlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBsLmpodS5lZHUvfmhhbGwvQUktUHJvZ3JhbW1pbmcvSURBLVN0YXIuaHRtbFxyXG4gKlxyXG4gKiBQYXRoIHJldHJhY2luZyBiYXNlZCBvbjpcclxuICogIFYuIE5hZ2VzaHdhcmEgUmFvLCBWaXBpbiBLdW1hciBhbmQgSy4gUmFtZXNoXHJcbiAqICBcIkEgUGFyYWxsZWwgSW1wbGVtZW50YXRpb24gb2YgSXRlcmF0aXZlLURlZXBpbmctQSpcIiwgSmFudWFyeSAxOTg3LlxyXG4gKiAgZnRwOi8vZnRwLmNzLnV0ZXhhcy5lZHUvLnNuYXBzaG90L2hvdXJseS4xL3B1Yi9BSS1MYWIvdGVjaC1yZXBvcnRzL1VULUFJLVRSLTg3LTQ2LnBkZlxyXG4gKlxyXG4gKiBAYXV0aG9yIEdlcmFyZCBNZWllciAod3d3LmdlcmFyZG1laWVyLmNvbSlcclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRcclxuICogQHBhcmFtIHtib29sZWFufSBvcHQuYWxsb3dEaWFnb25hbCBXaGV0aGVyIGRpYWdvbmFsIG1vdmVtZW50IGlzIGFsbG93ZWQuXHJcbiAqICAgICBEZXByZWNhdGVkLCB1c2UgZGlhZ29uYWxNb3ZlbWVudCBpbnN0ZWFkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdC5kb250Q3Jvc3NDb3JuZXJzIERpc2FsbG93IGRpYWdvbmFsIG1vdmVtZW50IHRvdWNoaW5nXHJcbiAqICAgICBibG9jayBjb3JuZXJzLiBEZXByZWNhdGVkLCB1c2UgZGlhZ29uYWxNb3ZlbWVudCBpbnN0ZWFkLlxyXG4gKiBAcGFyYW0ge0RpYWdvbmFsTW92ZW1lbnR9IG9wdC5kaWFnb25hbE1vdmVtZW50IEFsbG93ZWQgZGlhZ29uYWwgbW92ZW1lbnQuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wdC5oZXVyaXN0aWMgSGV1cmlzdGljIGZ1bmN0aW9uIHRvIGVzdGltYXRlIHRoZSBkaXN0YW5jZVxyXG4gKiAgICAgKGRlZmF1bHRzIHRvIG1hbmhhdHRhbikuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHQud2VpZ2h0IFdlaWdodCB0byBhcHBseSB0byB0aGUgaGV1cmlzdGljIHRvIGFsbG93IGZvclxyXG4gKiAgICAgc3Vib3B0aW1hbCBwYXRocywgaW4gb3JkZXIgdG8gc3BlZWQgdXAgdGhlIHNlYXJjaC5cclxuICogQHBhcmFtIHtib29sZWFufSBvcHQudHJhY2tSZWN1cnNpb24gV2hldGhlciB0byB0cmFjayByZWN1cnNpb24gZm9yXHJcbiAqICAgICBzdGF0aXN0aWNhbCBwdXJwb3Nlcy5cclxuICogQHBhcmFtIHtudW1iZXJ9IG9wdC50aW1lTGltaXQgTWF4aW11bSBleGVjdXRpb24gdGltZS4gVXNlIDw9IDAgZm9yIGluZmluaXRlLlxyXG4gKi9cclxuZnVuY3Rpb24gSURBU3RhckZpbmRlcihvcHQpIHtcclxuICAgIG9wdCA9IG9wdCB8fCB7fTtcclxuICAgIHRoaXMuYWxsb3dEaWFnb25hbCA9IG9wdC5hbGxvd0RpYWdvbmFsO1xyXG4gICAgdGhpcy5kb250Q3Jvc3NDb3JuZXJzID0gb3B0LmRvbnRDcm9zc0Nvcm5lcnM7XHJcbiAgICB0aGlzLmRpYWdvbmFsTW92ZW1lbnQgPSBvcHQuZGlhZ29uYWxNb3ZlbWVudDtcclxuICAgIHRoaXMuaGV1cmlzdGljID0gb3B0LmhldXJpc3RpYyB8fCBIZXVyaXN0aWMubWFuaGF0dGFuO1xyXG4gICAgdGhpcy53ZWlnaHQgPSBvcHQud2VpZ2h0IHx8IDE7XHJcbiAgICB0aGlzLnRyYWNrUmVjdXJzaW9uID0gb3B0LnRyYWNrUmVjdXJzaW9uIHx8IGZhbHNlO1xyXG4gICAgdGhpcy50aW1lTGltaXQgPSBvcHQudGltZUxpbWl0IHx8IEluZmluaXR5OyAvLyBEZWZhdWx0OiBubyB0aW1lIGxpbWl0LlxyXG5cclxuICAgIGlmICghdGhpcy5kaWFnb25hbE1vdmVtZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFsbG93RGlhZ29uYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5kaWFnb25hbE1vdmVtZW50ID0gRGlhZ29uYWxNb3ZlbWVudC5OZXZlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kb250Q3Jvc3NDb3JuZXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWdvbmFsTW92ZW1lbnQgPSBEaWFnb25hbE1vdmVtZW50Lk9ubHlXaGVuTm9PYnN0YWNsZXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWdvbmFsTW92ZW1lbnQgPSBEaWFnb25hbE1vdmVtZW50LklmQXRNb3N0T25lT2JzdGFjbGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gV2hlbiBkaWFnb25hbCBtb3ZlbWVudCBpcyBhbGxvd2VkIHRoZSBtYW5oYXR0YW4gaGV1cmlzdGljIGlzIG5vdFxyXG4gICAgLy8gYWRtaXNzaWJsZSwgaXQgc2hvdWxkIGJlIG9jdGlsZSBpbnN0ZWFkXHJcbiAgICBpZiAodGhpcy5kaWFnb25hbE1vdmVtZW50ID09PSBEaWFnb25hbE1vdmVtZW50Lk5ldmVyKSB7XHJcbiAgICAgICAgdGhpcy5oZXVyaXN0aWMgPSBvcHQuaGV1cmlzdGljIHx8IEhldXJpc3RpYy5tYW5oYXR0YW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaGV1cmlzdGljID0gb3B0LmhldXJpc3RpYyB8fCBIZXVyaXN0aWMub2N0aWxlO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRmluZCBhbmQgcmV0dXJuIHRoZSB0aGUgcGF0aC4gV2hlbiBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZCwgZWl0aGVyXHJcbiAqIG5vIHBhdGggaXMgcG9zc2libGUsIG9yIHRoZSBtYXhpbXVtIGV4ZWN1dGlvbiB0aW1lIGlzIHJlYWNoZWQuXHJcbiAqXHJcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fSBUaGUgcGF0aCwgaW5jbHVkaW5nIGJvdGggc3RhcnQgYW5kXHJcbiAqICAgICBlbmQgcG9zaXRpb25zLlxyXG4gKi9cclxuSURBU3RhckZpbmRlci5wcm90b3R5cGUuZmluZFBhdGggPSBmdW5jdGlvbihzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSwgZ3JpZCkge1xyXG4gICAgLy8gVXNlZCBmb3Igc3RhdGlzdGljczpcclxuICAgIHZhciBub2Rlc1Zpc2l0ZWQgPSAwO1xyXG5cclxuICAgIC8vIEV4ZWN1dGlvbiB0aW1lIGxpbWl0YXRpb246XHJcbiAgICB2YXIgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgLy8gSGV1cmlzdGljIGhlbHBlcjpcclxuICAgIHZhciBoID0gZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhldXJpc3RpYyhNYXRoLmFicyhiLnggLSBhLngpLCBNYXRoLmFicyhiLnkgLSBhLnkpKTtcclxuICAgIH0uYmluZCh0aGlzKTtcclxuXHJcbiAgICAvLyBTdGVwIGNvc3QgZnJvbSBhIHRvIGI6XHJcbiAgICB2YXIgY29zdCA9IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gKGEueCA9PT0gYi54IHx8IGEueSA9PT0gYi55KSA/IDEgOiBNYXRoLlNRUlQyO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIElEQSogc2VhcmNoIGltcGxlbWVudGF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Tm9kZX0gVGhlIG5vZGUgY3VycmVudGx5IGV4cGFuZGluZyBmcm9tLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IENvc3QgdG8gcmVhY2ggdGhlIGdpdmVuIG5vZGUuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gTWF4aW11bSBzZWFyY2ggZGVwdGggKGN1dC1vZmYgdmFsdWUpLlxyXG4gICAgICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gVGhlIGZvdW5kIHJvdXRlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFJlY3Vyc2lvbiBkZXB0aC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGVpdGhlciBhIG51bWJlciB3aXRoIHRoZSBuZXcgb3B0aW1hbCBjdXQtb2ZmIGRlcHRoLFxyXG4gICAgICogb3IgYSB2YWxpZCBub2RlIGluc3RhbmNlLCBpbiB3aGljaCBjYXNlIGEgcGF0aCB3YXMgZm91bmQuXHJcbiAgICAgKi9cclxuICAgIHZhciBzZWFyY2ggPSBmdW5jdGlvbihub2RlLCBnLCBjdXRvZmYsIHJvdXRlLCBkZXB0aCkge1xyXG4gICAgICAgIG5vZGVzVmlzaXRlZCsrO1xyXG5cclxuICAgICAgICAvLyBFbmZvcmNlIHRpbWVsaW1pdDpcclxuICAgICAgICBpZiAodGhpcy50aW1lTGltaXQgPiAwICYmXHJcbiAgICAgICAgICAgIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lID4gdGhpcy50aW1lTGltaXQgKiAxMDAwKSB7XHJcbiAgICAgICAgICAgIC8vIEVuZm9yY2VkIGFzIFwicGF0aC1ub3QtZm91bmRcIi5cclxuICAgICAgICAgICAgcmV0dXJuIEluZmluaXR5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGYgPSBnICsgaChub2RlLCBlbmQpICogdGhpcy53ZWlnaHQ7XHJcblxyXG4gICAgICAgIC8vIFdlJ3ZlIHNlYXJjaGVkIHRvbyBkZWVwIGZvciB0aGlzIGl0ZXJhdGlvbi5cclxuICAgICAgICBpZiAoZiA+IGN1dG9mZikge1xyXG4gICAgICAgICAgICByZXR1cm4gZjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChub2RlID09IGVuZCkge1xyXG4gICAgICAgICAgICByb3V0ZVtkZXB0aF0gPSBbbm9kZS54LCBub2RlLnldO1xyXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBtaW4sIHQsIGssIG5laWdoYm91cjtcclxuXHJcbiAgICAgICAgdmFyIG5laWdoYm91cnMgPSBncmlkLmdldE5laWdoYm9ycyhub2RlLCB0aGlzLmRpYWdvbmFsTW92ZW1lbnQpO1xyXG5cclxuICAgICAgICAvLyBTb3J0IHRoZSBuZWlnaGJvdXJzLCBnaXZlcyBuaWNlciBwYXRocy4gQnV0LCB0aGlzIGRldmlhdGVzXHJcbiAgICAgICAgLy8gZnJvbSB0aGUgb3JpZ2luYWwgYWxnb3JpdGhtIC0gc28gSSBsZWZ0IGl0IG91dC5cclxuICAgICAgICAvL25laWdoYm91cnMuc29ydChmdW5jdGlvbihhLCBiKXtcclxuICAgICAgICAvLyAgICByZXR1cm4gaChhLCBlbmQpIC0gaChiLCBlbmQpO1xyXG4gICAgICAgIC8vfSk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qanNoaW50IC1XMDg0ICovLy9EaXNhYmxlIHdhcm5pbmc6IEV4cGVjdGVkIGEgY29uZGl0aW9uYWwgZXhwcmVzc2lvbiBhbmQgaW5zdGVhZCBzYXcgYW4gYXNzaWdubWVudFxyXG4gICAgICAgIGZvciAoayA9IDAsIG1pbiA9IEluZmluaXR5OyBuZWlnaGJvdXIgPSBuZWlnaGJvdXJzW2tdOyArK2spIHtcclxuICAgICAgICAvKmpzaGludCArVzA4NCAqLy8vRW5hYmxlIHdhcm5pbmc6IEV4cGVjdGVkIGEgY29uZGl0aW9uYWwgZXhwcmVzc2lvbiBhbmQgaW5zdGVhZCBzYXcgYW4gYXNzaWdubWVudFxyXG4gICAgICAgICAgICBpZiAodGhpcy50cmFja1JlY3Vyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgLy8gUmV0YWluIGEgY29weSBmb3IgdmlzdWFsaXNhdGlvbi4gRHVlIHRvIHJlY3Vyc2lvbiwgdGhpc1xyXG4gICAgICAgICAgICAgICAgLy8gbm9kZSBtYXkgYmUgcGFydCBvZiBvdGhlciBwYXRocyB0b28uXHJcbiAgICAgICAgICAgICAgICBuZWlnaGJvdXIucmV0YWluQ291bnQgPSBuZWlnaGJvdXIucmV0YWluQ291bnQgKyAxIHx8IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobmVpZ2hib3VyLnRlc3RlZCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5laWdoYm91ci50ZXN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0ID0gc2VhcmNoKG5laWdoYm91ciwgZyArIGNvc3Qobm9kZSwgbmVpZ2hib3VyKSwgY3V0b2ZmLCByb3V0ZSwgZGVwdGggKyAxKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgcm91dGVbZGVwdGhdID0gW25vZGUueCwgbm9kZS55XTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBGb3IgYSB0eXBpY2FsIEEqIGxpbmtlZCBsaXN0LCB0aGlzIHdvdWxkIHdvcms6XHJcbiAgICAgICAgICAgICAgICAvLyBuZWlnaGJvdXIucGFyZW50ID0gbm9kZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBEZWNyZW1lbnQgY291bnQsIHRoZW4gZGV0ZXJtaW5lIHdoZXRoZXIgaXQncyBhY3R1YWxseSBjbG9zZWQuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrUmVjdXJzaW9uICYmICgtLW5laWdoYm91ci5yZXRhaW5Db3VudCkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIG5laWdoYm91ci50ZXN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHQgPCBtaW4pIHtcclxuICAgICAgICAgICAgICAgIG1pbiA9IHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtaW47XHJcblxyXG4gICAgfS5iaW5kKHRoaXMpO1xyXG5cclxuICAgIC8vIE5vZGUgaW5zdGFuY2UgbG9va3VwczpcclxuICAgIHZhciBzdGFydCA9IGdyaWQuZ2V0Tm9kZUF0KHN0YXJ0WCwgc3RhcnRZKTtcclxuICAgIHZhciBlbmQgICA9IGdyaWQuZ2V0Tm9kZUF0KGVuZFgsIGVuZFkpO1xyXG5cclxuICAgIC8vIEluaXRpYWwgc2VhcmNoIGRlcHRoLCBnaXZlbiB0aGUgdHlwaWNhbCBoZXVyaXN0aWMgY29udHJhaW50cyxcclxuICAgIC8vIHRoZXJlIHNob3VsZCBiZSBubyBjaGVhcGVyIHJvdXRlIHBvc3NpYmxlLlxyXG4gICAgdmFyIGN1dE9mZiA9IGgoc3RhcnQsIGVuZCk7XHJcblxyXG4gICAgdmFyIGosIHJvdXRlLCB0O1xyXG5cclxuICAgIC8vIFdpdGggYW4gb3ZlcmZsb3cgcHJvdGVjdGlvbi5cclxuICAgIGZvciAoaiA9IDA7IHRydWU7ICsraikge1xyXG5cclxuICAgICAgICByb3V0ZSA9IFtdO1xyXG5cclxuICAgICAgICAvLyBTZWFyY2ggdGlsbCBjdXQtb2ZmIGRlcHRoOlxyXG4gICAgICAgIHQgPSBzZWFyY2goc3RhcnQsIDAsIGN1dE9mZiwgcm91dGUsIDApO1xyXG5cclxuICAgICAgICAvLyBSb3V0ZSBub3QgcG9zc2libGUsIG9yIG5vdCBmb3VuZCBpbiB0aW1lIGxpbWl0LlxyXG4gICAgICAgIGlmICh0ID09PSBJbmZpbml0eSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB0IGlzIGEgbm9kZSwgaXQncyBhbHNvIHRoZSBlbmQgbm9kZS4gUm91dGUgaXMgbm93XHJcbiAgICAgICAgLy8gcG9wdWxhdGVkIHdpdGggYSB2YWxpZCBwYXRoIHRvIHRoZSBlbmQgbm9kZS5cclxuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIE5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJvdXRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVHJ5IGFnYWluLCB0aGlzIHRpbWUgd2l0aCBhIGRlZXBlciBjdXQtb2ZmLiBUaGUgdCBzY29yZVxyXG4gICAgICAgIC8vIGlzIHRoZSBjbG9zZXN0IHdlIGdvdCB0byB0aGUgZW5kIG5vZGUuXHJcbiAgICAgICAgY3V0T2ZmID0gdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGlzIF9zaG91bGRfIG5ldmVyIHRvIGJlIHJlYWNoZWQuXHJcbiAgICByZXR1cm4gW107XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IElEQVN0YXJGaW5kZXI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/IDAStarFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js":
/*!*************************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = __webpack_require__(/*! ./JumpPointFinderBase */ \"./node_modules/pathfinding/src/finders/JumpPointFinderBase.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which always moves\r\n * diagonally irrespective of the number of obstacles.\r\n */\r\nfunction JPFAlwaysMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFAlwaysMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFAlwaysMoveDiagonally.prototype.constructor = JPFAlwaysMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y + dy)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x + 1, y)) {\r\n                    neighbors.push([x + 1, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x - 1, y)) {\r\n                    neighbors.push([x - 1, y + dy]);\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y + 1)) {\r\n                    neighbors.push([x + dx, y + 1]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y - 1)) {\r\n                    neighbors.push([x + dx, y - 1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Always);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFAlwaysMoveDiagonally;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = __webpack_require__(/*! ./JumpPointFinderBase */ \"./node_modules/pathfinding/src/finders/JumpPointFinderBase.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there is at most one obstacle.\r\n */\r\nfunction JPFMoveDiagonallyIfAtMostOneObstacle(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype.constructor = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) || grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) || grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (!grid.isWalkableAt(x + 1, y)) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x - 1, y)) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (!grid.isWalkableAt(x, y + 1)) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x, y - 1)) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.IfAtMostOneObstacle);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js":
/*!********************************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = __webpack_require__(/*! ./JumpPointFinderBase */ \"./node_modules/pathfinding/src/finders/JumpPointFinderBase.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there are no obstacles.\r\n */\r\nfunction JPFMoveDiagonallyIfNoObstacles(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfNoObstacles.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfNoObstacles.prototype.constructor = JPFMoveDiagonallyIfNoObstacles;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        // if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            // (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            // return [x, y];\r\n        // }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if (dx !== 0) {\r\n            if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n                (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n                (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n                return [x, y];\r\n            }\r\n            // When moving vertically, must check for horizontal jump points\r\n            // if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n                // return [x, y];\r\n            // }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            var isNextWalkable;\r\n            if (dx !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x + dx, y);\r\n                var isTopWalkable = grid.isWalkableAt(x, y + 1);\r\n                var isBottomWalkable = grid.isWalkableAt(x, y - 1);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (isTopWalkable) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (isBottomWalkable) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n                if (isTopWalkable) {\r\n                    neighbors.push([x, y + 1]);\r\n                }\r\n                if (isBottomWalkable) {\r\n                    neighbors.push([x, y - 1]);\r\n                }\r\n            }\r\n            else if (dy !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x, y + dy);\r\n                var isRightWalkable = grid.isWalkableAt(x + 1, y);\r\n                var isLeftWalkable = grid.isWalkableAt(x - 1, y);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (isRightWalkable) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (isLeftWalkable) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n                if (isRightWalkable) {\r\n                    neighbors.push([x + 1, y]);\r\n                }\r\n                if (isLeftWalkable) {\r\n                    neighbors.push([x - 1, y]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.OnlyWhenNoObstacles);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfNoObstacles;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSlBGTW92ZURpYWdvbmFsbHlJZk5vT2JzdGFjbGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixtQkFBTyxDQUFDLDRGQUF1QjtBQUN6RCx1QkFBdUIsbUJBQU8sQ0FBQyx5RkFBMEI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0JBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxPQUFPO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSlBGTW92ZURpYWdvbmFsbHlJZk5vT2JzdGFjbGVzLmpzPzAwMjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBhdXRob3IgaW1vciAvIGh0dHBzOi8vZ2l0aHViLmNvbS9pbW9yXHJcbiAqL1xyXG52YXIgSnVtcFBvaW50RmluZGVyQmFzZSA9IHJlcXVpcmUoJy4vSnVtcFBvaW50RmluZGVyQmFzZScpO1xyXG52YXIgRGlhZ29uYWxNb3ZlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvRGlhZ29uYWxNb3ZlbWVudCcpO1xyXG5cclxuLyoqXHJcbiAqIFBhdGggZmluZGVyIHVzaW5nIHRoZSBKdW1wIFBvaW50IFNlYXJjaCBhbGdvcml0aG0gd2hpY2ggbW92ZXNcclxuICogZGlhZ29uYWxseSBvbmx5IHdoZW4gdGhlcmUgYXJlIG5vIG9ic3RhY2xlcy5cclxuICovXHJcbmZ1bmN0aW9uIEpQRk1vdmVEaWFnb25hbGx5SWZOb09ic3RhY2xlcyhvcHQpIHtcclxuICAgIEp1bXBQb2ludEZpbmRlckJhc2UuY2FsbCh0aGlzLCBvcHQpO1xyXG59XHJcblxyXG5KUEZNb3ZlRGlhZ29uYWxseUlmTm9PYnN0YWNsZXMucHJvdG90eXBlID0gbmV3IEp1bXBQb2ludEZpbmRlckJhc2UoKTtcclxuSlBGTW92ZURpYWdvbmFsbHlJZk5vT2JzdGFjbGVzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEpQRk1vdmVEaWFnb25hbGx5SWZOb09ic3RhY2xlcztcclxuXHJcbi8qKlxyXG4gKiBTZWFyY2ggcmVjdXJzaXZlbHkgaW4gdGhlIGRpcmVjdGlvbiAocGFyZW50IC0+IGNoaWxkKSwgc3RvcHBpbmcgb25seSB3aGVuIGFcclxuICoganVtcCBwb2ludCBpcyBmb3VuZC5cclxuICogQHByb3RlY3RlZFxyXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gVGhlIHgsIHkgY29vcmRpbmF0ZSBvZiB0aGUganVtcCBwb2ludFxyXG4gKiAgICAgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXHJcbiAqL1xyXG5KUEZNb3ZlRGlhZ29uYWxseUlmTm9PYnN0YWNsZXMucHJvdG90eXBlLl9qdW1wID0gZnVuY3Rpb24oeCwgeSwgcHgsIHB5KSB7XHJcbiAgICB2YXIgZ3JpZCA9IHRoaXMuZ3JpZCxcclxuICAgICAgICBkeCA9IHggLSBweCwgZHkgPSB5IC0gcHk7XHJcblxyXG4gICAgaWYgKCFncmlkLmlzV2Fsa2FibGVBdCh4LCB5KSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHRoaXMudHJhY2tKdW1wUmVjdXJzaW9uID09PSB0cnVlKSB7XHJcbiAgICAgICAgZ3JpZC5nZXROb2RlQXQoeCwgeSkudGVzdGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZ3JpZC5nZXROb2RlQXQoeCwgeSkgPT09IHRoaXMuZW5kTm9kZSkge1xyXG4gICAgICAgIHJldHVybiBbeCwgeV07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2hlY2sgZm9yIGZvcmNlZCBuZWlnaGJvcnNcclxuICAgIC8vIGFsb25nIHRoZSBkaWFnb25hbFxyXG4gICAgaWYgKGR4ICE9PSAwICYmIGR5ICE9PSAwKSB7XHJcbiAgICAgICAgLy8gaWYgKChncmlkLmlzV2Fsa2FibGVBdCh4IC0gZHgsIHkgKyBkeSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHggLSBkeCwgeSkpIHx8XHJcbiAgICAgICAgICAgIC8vIChncmlkLmlzV2Fsa2FibGVBdCh4ICsgZHgsIHkgLSBkeSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgLSBkeSkpKSB7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiBbeCwgeV07XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIHdoZW4gbW92aW5nIGRpYWdvbmFsbHksIG11c3QgY2hlY2sgZm9yIHZlcnRpY2FsL2hvcml6b250YWwganVtcCBwb2ludHNcclxuICAgICAgICBpZiAodGhpcy5fanVtcCh4ICsgZHgsIHksIHgsIHkpIHx8IHRoaXMuX2p1bXAoeCwgeSArIGR5LCB4LCB5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGhvcml6b250YWxseS92ZXJ0aWNhbGx5XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoZHggIT09IDApIHtcclxuICAgICAgICAgICAgaWYgKChncmlkLmlzV2Fsa2FibGVBdCh4LCB5IC0gMSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHggLSBkeCwgeSAtIDEpKSB8fFxyXG4gICAgICAgICAgICAgICAgKGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgKyAxKSAmJiAhZ3JpZC5pc1dhbGthYmxlQXQoeCAtIGR4LCB5ICsgMSkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGR5ICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICgoZ3JpZC5pc1dhbGthYmxlQXQoeCAtIDEsIHkpICYmICFncmlkLmlzV2Fsa2FibGVBdCh4IC0gMSwgeSAtIGR5KSkgfHxcclxuICAgICAgICAgICAgICAgIChncmlkLmlzV2Fsa2FibGVBdCh4ICsgMSwgeSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHggKyAxLCB5IC0gZHkpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXaGVuIG1vdmluZyB2ZXJ0aWNhbGx5LCBtdXN0IGNoZWNrIGZvciBob3Jpem9udGFsIGp1bXAgcG9pbnRzXHJcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLl9qdW1wKHggKyAxLCB5LCB4LCB5KSB8fCB0aGlzLl9qdW1wKHggLSAxLCB5LCB4LCB5KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIFt4LCB5XTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBtb3ZpbmcgZGlhZ29uYWxseSwgbXVzdCBtYWtlIHN1cmUgb25lIG9mIHRoZSB2ZXJ0aWNhbC9ob3Jpem9udGFsXHJcbiAgICAvLyBuZWlnaGJvcnMgaXMgb3BlbiB0byBhbGxvdyB0aGUgcGF0aFxyXG4gICAgaWYgKGdyaWQuaXNXYWxrYWJsZUF0KHggKyBkeCwgeSkgJiYgZ3JpZC5pc1dhbGthYmxlQXQoeCwgeSArIGR5KSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9qdW1wKHggKyBkeCwgeSArIGR5LCB4LCB5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogRmluZCB0aGUgbmVpZ2hib3JzIGZvciB0aGUgZ2l2ZW4gbm9kZS4gSWYgdGhlIG5vZGUgaGFzIGEgcGFyZW50LFxyXG4gKiBwcnVuZSB0aGUgbmVpZ2hib3JzIGJhc2VkIG9uIHRoZSBqdW1wIHBvaW50IHNlYXJjaCBhbGdvcml0aG0sIG90aGVyd2lzZVxyXG4gKiByZXR1cm4gYWxsIGF2YWlsYWJsZSBuZWlnaGJvcnMuXHJcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fSBUaGUgbmVpZ2hib3JzIGZvdW5kLlxyXG4gKi9cclxuSlBGTW92ZURpYWdvbmFsbHlJZk5vT2JzdGFjbGVzLnByb3RvdHlwZS5fZmluZE5laWdoYm9ycyA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCxcclxuICAgICAgICB4ID0gbm9kZS54LCB5ID0gbm9kZS55LFxyXG4gICAgICAgIGdyaWQgPSB0aGlzLmdyaWQsXHJcbiAgICAgICAgcHgsIHB5LCBueCwgbnksIGR4LCBkeSxcclxuICAgICAgICBuZWlnaGJvcnMgPSBbXSwgbmVpZ2hib3JOb2RlcywgbmVpZ2hib3JOb2RlLCBpLCBsO1xyXG5cclxuICAgIC8vIGRpcmVjdGVkIHBydW5pbmc6IGNhbiBpZ25vcmUgbW9zdCBuZWlnaGJvcnMsIHVubGVzcyBmb3JjZWQuXHJcbiAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgcHggPSBwYXJlbnQueDtcclxuICAgICAgICBweSA9IHBhcmVudC55O1xyXG4gICAgICAgIC8vIGdldCB0aGUgbm9ybWFsaXplZCBkaXJlY3Rpb24gb2YgdHJhdmVsXHJcbiAgICAgICAgZHggPSAoeCAtIHB4KSAvIE1hdGgubWF4KE1hdGguYWJzKHggLSBweCksIDEpO1xyXG4gICAgICAgIGR5ID0gKHkgLSBweSkgLyBNYXRoLm1heChNYXRoLmFicyh5IC0gcHkpLCAxKTtcclxuXHJcbiAgICAgICAgLy8gc2VhcmNoIGRpYWdvbmFsbHlcclxuICAgICAgICBpZiAoZHggIT09IDAgJiYgZHkgIT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgKyBkeSkpIHtcclxuICAgICAgICAgICAgICAgIG5laWdoYm9ycy5wdXNoKFt4LCB5ICsgZHldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZ3JpZC5pc1dhbGthYmxlQXQoeCArIGR4LCB5KSkge1xyXG4gICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3ggKyBkeCwgeV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChncmlkLmlzV2Fsa2FibGVBdCh4LCB5ICsgZHkpICYmIGdyaWQuaXNXYWxrYWJsZUF0KHggKyBkeCwgeSkpIHtcclxuICAgICAgICAgICAgICAgIG5laWdoYm9ycy5wdXNoKFt4ICsgZHgsIHkgKyBkeV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNlYXJjaCBob3Jpem9udGFsbHkvdmVydGljYWxseVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgaXNOZXh0V2Fsa2FibGU7XHJcbiAgICAgICAgICAgIGlmIChkeCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaXNOZXh0V2Fsa2FibGUgPSBncmlkLmlzV2Fsa2FibGVBdCh4ICsgZHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzVG9wV2Fsa2FibGUgPSBncmlkLmlzV2Fsa2FibGVBdCh4LCB5ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNCb3R0b21XYWxrYWJsZSA9IGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgLSAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOZXh0V2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCArIGR4LCB5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVG9wV2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3ggKyBkeCwgeSArIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQm90dG9tV2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3ggKyBkeCwgeSAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNUb3BXYWxrYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5laWdoYm9ycy5wdXNoKFt4LCB5ICsgMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzQm90dG9tV2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCwgeSAtIDFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkeSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaXNOZXh0V2Fsa2FibGUgPSBncmlkLmlzV2Fsa2FibGVBdCh4LCB5ICsgZHkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzUmlnaHRXYWxrYWJsZSA9IGdyaWQuaXNXYWxrYWJsZUF0KHggKyAxLCB5KTtcclxuICAgICAgICAgICAgICAgIHZhciBpc0xlZnRXYWxrYWJsZSA9IGdyaWQuaXNXYWxrYWJsZUF0KHggLSAxLCB5KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOZXh0V2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCwgeSArIGR5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmlnaHRXYWxrYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCArIDEsIHkgKyBkeV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNMZWZ0V2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3ggLSAxLCB5ICsgZHldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNSaWdodFdhbGthYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3ggKyAxLCB5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNMZWZ0V2Fsa2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCAtIDEsIHldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHJldHVybiBhbGwgbmVpZ2hib3JzXHJcbiAgICBlbHNlIHtcclxuICAgICAgICBuZWlnaGJvck5vZGVzID0gZ3JpZC5nZXROZWlnaGJvcnMobm9kZSwgRGlhZ29uYWxNb3ZlbWVudC5Pbmx5V2hlbk5vT2JzdGFjbGVzKTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gbmVpZ2hib3JOb2Rlcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgbmVpZ2hib3JOb2RlID0gbmVpZ2hib3JOb2Rlc1tpXTtcclxuICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW25laWdoYm9yTm9kZS54LCBuZWlnaGJvck5vZGUueV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmVpZ2hib3JzO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBKUEZNb3ZlRGlhZ29uYWxseUlmTm9PYnN0YWNsZXM7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js":
/*!************************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = __webpack_require__(/*! ./JumpPointFinderBase */ \"./node_modules/pathfinding/src/finders/JumpPointFinderBase.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm allowing only horizontal\r\n * or vertical movements.\r\n */\r\nfunction JPFNeverMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFNeverMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFNeverMoveDiagonally.prototype.constructor = JPFNeverMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFNeverMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    if (dx !== 0) {\r\n        if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n            (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else if (dy !== 0) {\r\n        if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n            (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        //When moving vertically, must check for horizontal jump points\r\n        if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Only horizontal and vertical movements are allowed\");\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFNeverMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        if (dx !== 0) {\r\n            if (grid.isWalkableAt(x, y - 1)) {\r\n                neighbors.push([x, y - 1]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + 1)) {\r\n                neighbors.push([x, y + 1]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if (grid.isWalkableAt(x - 1, y)) {\r\n                neighbors.push([x - 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + 1, y)) {\r\n                neighbors.push([x + 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Never);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFNeverMoveDiagonally;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSlBGTmV2ZXJNb3ZlRGlhZ29uYWxseS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUJBQU8sQ0FBQyw0RkFBdUI7QUFDekQsdUJBQXVCLG1CQUFPLENBQUMseUZBQTBCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLE9BQU87QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL25vZGVfbW9kdWxlcy9wYXRoZmluZGluZy9zcmMvZmluZGVycy9KUEZOZXZlck1vdmVEaWFnb25hbGx5LmpzP2I2MzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBhdXRob3IgaW1vciAvIGh0dHBzOi8vZ2l0aHViLmNvbS9pbW9yXHJcbiAqL1xyXG52YXIgSnVtcFBvaW50RmluZGVyQmFzZSA9IHJlcXVpcmUoJy4vSnVtcFBvaW50RmluZGVyQmFzZScpO1xyXG52YXIgRGlhZ29uYWxNb3ZlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvRGlhZ29uYWxNb3ZlbWVudCcpO1xyXG5cclxuLyoqXHJcbiAqIFBhdGggZmluZGVyIHVzaW5nIHRoZSBKdW1wIFBvaW50IFNlYXJjaCBhbGdvcml0aG0gYWxsb3dpbmcgb25seSBob3Jpem9udGFsXHJcbiAqIG9yIHZlcnRpY2FsIG1vdmVtZW50cy5cclxuICovXHJcbmZ1bmN0aW9uIEpQRk5ldmVyTW92ZURpYWdvbmFsbHkob3B0KSB7XHJcbiAgICBKdW1wUG9pbnRGaW5kZXJCYXNlLmNhbGwodGhpcywgb3B0KTtcclxufVxyXG5cclxuSlBGTmV2ZXJNb3ZlRGlhZ29uYWxseS5wcm90b3R5cGUgPSBuZXcgSnVtcFBvaW50RmluZGVyQmFzZSgpO1xyXG5KUEZOZXZlck1vdmVEaWFnb25hbGx5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEpQRk5ldmVyTW92ZURpYWdvbmFsbHk7XHJcblxyXG4vKipcclxuICogU2VhcmNoIHJlY3Vyc2l2ZWx5IGluIHRoZSBkaXJlY3Rpb24gKHBhcmVudCAtPiBjaGlsZCksIHN0b3BwaW5nIG9ubHkgd2hlbiBhXHJcbiAqIGp1bXAgcG9pbnQgaXMgZm91bmQuXHJcbiAqIEBwcm90ZWN0ZWRcclxuICogQHJldHVybiB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IFRoZSB4LCB5IGNvb3JkaW5hdGUgb2YgdGhlIGp1bXAgcG9pbnRcclxuICogICAgIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxyXG4gKi9cclxuSlBGTmV2ZXJNb3ZlRGlhZ29uYWxseS5wcm90b3R5cGUuX2p1bXAgPSBmdW5jdGlvbih4LCB5LCBweCwgcHkpIHtcclxuICAgIHZhciBncmlkID0gdGhpcy5ncmlkLFxyXG4gICAgICAgIGR4ID0geCAtIHB4LCBkeSA9IHkgLSBweTtcclxuXHJcbiAgICBpZiAoIWdyaWQuaXNXYWxrYWJsZUF0KHgsIHkpKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgaWYodGhpcy50cmFja0p1bXBSZWN1cnNpb24gPT09IHRydWUpIHtcclxuICAgICAgICBncmlkLmdldE5vZGVBdCh4LCB5KS50ZXN0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChncmlkLmdldE5vZGVBdCh4LCB5KSA9PT0gdGhpcy5lbmROb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZHggIT09IDApIHtcclxuICAgICAgICBpZiAoKGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgLSAxKSAmJiAhZ3JpZC5pc1dhbGthYmxlQXQoeCAtIGR4LCB5IC0gMSkpIHx8XHJcbiAgICAgICAgICAgIChncmlkLmlzV2Fsa2FibGVBdCh4LCB5ICsgMSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHggLSBkeCwgeSArIDEpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW3gsIHldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGR5ICE9PSAwKSB7XHJcbiAgICAgICAgaWYgKChncmlkLmlzV2Fsa2FibGVBdCh4IC0gMSwgeSkgJiYgIWdyaWQuaXNXYWxrYWJsZUF0KHggLSAxLCB5IC0gZHkpKSB8fFxyXG4gICAgICAgICAgICAoZ3JpZC5pc1dhbGthYmxlQXQoeCArIDEsIHkpICYmICFncmlkLmlzV2Fsa2FibGVBdCh4ICsgMSwgeSAtIGR5KSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFt4LCB5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9XaGVuIG1vdmluZyB2ZXJ0aWNhbGx5LCBtdXN0IGNoZWNrIGZvciBob3Jpem9udGFsIGp1bXAgcG9pbnRzXHJcbiAgICAgICAgaWYgKHRoaXMuX2p1bXAoeCArIDEsIHksIHgsIHkpIHx8IHRoaXMuX2p1bXAoeCAtIDEsIHksIHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbeCwgeV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT25seSBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBtb3ZlbWVudHMgYXJlIGFsbG93ZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2p1bXAoeCArIGR4LCB5ICsgZHksIHgsIHkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEZpbmQgdGhlIG5laWdoYm9ycyBmb3IgdGhlIGdpdmVuIG5vZGUuIElmIHRoZSBub2RlIGhhcyBhIHBhcmVudCxcclxuICogcHJ1bmUgdGhlIG5laWdoYm9ycyBiYXNlZCBvbiB0aGUganVtcCBwb2ludCBzZWFyY2ggYWxnb3JpdGhtLCBvdGhlcndpc2VcclxuICogcmV0dXJuIGFsbCBhdmFpbGFibGUgbmVpZ2hib3JzLlxyXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gVGhlIG5laWdoYm9ycyBmb3VuZC5cclxuICovXHJcbkpQRk5ldmVyTW92ZURpYWdvbmFsbHkucHJvdG90eXBlLl9maW5kTmVpZ2hib3JzID0gZnVuY3Rpb24obm9kZSkge1xyXG4gICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50LFxyXG4gICAgICAgIHggPSBub2RlLngsIHkgPSBub2RlLnksXHJcbiAgICAgICAgZ3JpZCA9IHRoaXMuZ3JpZCxcclxuICAgICAgICBweCwgcHksIG54LCBueSwgZHgsIGR5LFxyXG4gICAgICAgIG5laWdoYm9ycyA9IFtdLCBuZWlnaGJvck5vZGVzLCBuZWlnaGJvck5vZGUsIGksIGw7XHJcblxyXG4gICAgLy8gZGlyZWN0ZWQgcHJ1bmluZzogY2FuIGlnbm9yZSBtb3N0IG5laWdoYm9ycywgdW5sZXNzIGZvcmNlZC5cclxuICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICBweCA9IHBhcmVudC54O1xyXG4gICAgICAgIHB5ID0gcGFyZW50Lnk7XHJcbiAgICAgICAgLy8gZ2V0IHRoZSBub3JtYWxpemVkIGRpcmVjdGlvbiBvZiB0cmF2ZWxcclxuICAgICAgICBkeCA9ICh4IC0gcHgpIC8gTWF0aC5tYXgoTWF0aC5hYnMoeCAtIHB4KSwgMSk7XHJcbiAgICAgICAgZHkgPSAoeSAtIHB5KSAvIE1hdGgubWF4KE1hdGguYWJzKHkgLSBweSksIDEpO1xyXG5cclxuICAgICAgICBpZiAoZHggIT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgLSAxKSkge1xyXG4gICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3gsIHkgLSAxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGdyaWQuaXNXYWxrYWJsZUF0KHgsIHkgKyAxKSkge1xyXG4gICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3gsIHkgKyAxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGdyaWQuaXNXYWxrYWJsZUF0KHggKyBkeCwgeSkpIHtcclxuICAgICAgICAgICAgICAgIG5laWdoYm9ycy5wdXNoKFt4ICsgZHgsIHldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkeSAhPT0gMCkge1xyXG4gICAgICAgICAgICBpZiAoZ3JpZC5pc1dhbGthYmxlQXQoeCAtIDEsIHkpKSB7XHJcbiAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCAtIDEsIHldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZ3JpZC5pc1dhbGthYmxlQXQoeCArIDEsIHkpKSB7XHJcbiAgICAgICAgICAgICAgICBuZWlnaGJvcnMucHVzaChbeCArIDEsIHldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZ3JpZC5pc1dhbGthYmxlQXQoeCwgeSArIGR5KSkge1xyXG4gICAgICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW3gsIHkgKyBkeV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gcmV0dXJuIGFsbCBuZWlnaGJvcnNcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIG5laWdoYm9yTm9kZXMgPSBncmlkLmdldE5laWdoYm9ycyhub2RlLCBEaWFnb25hbE1vdmVtZW50Lk5ldmVyKTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gbmVpZ2hib3JOb2Rlcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgbmVpZ2hib3JOb2RlID0gbmVpZ2hib3JOb2Rlc1tpXTtcclxuICAgICAgICAgICAgbmVpZ2hib3JzLnB1c2goW25laWdoYm9yTm9kZS54LCBuZWlnaGJvck5vZGUueV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmVpZ2hib3JzO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBKUEZOZXZlck1vdmVEaWFnb25hbGx5O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JumpPointFinder.js":
/*!*****************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JumpPointFinder.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author aniero / https://github.com/aniero\r\n */\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\nvar JPFNeverMoveDiagonally = __webpack_require__(/*! ./JPFNeverMoveDiagonally */ \"./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js\");\r\nvar JPFAlwaysMoveDiagonally = __webpack_require__(/*! ./JPFAlwaysMoveDiagonally */ \"./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js\");\r\nvar JPFMoveDiagonallyIfNoObstacles = __webpack_require__(/*! ./JPFMoveDiagonallyIfNoObstacles */ \"./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js\");\r\nvar JPFMoveDiagonallyIfAtMostOneObstacle = __webpack_require__(/*! ./JPFMoveDiagonallyIfAtMostOneObstacle */ \"./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js\");\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm\r\n * @param {Object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {DiagonalMovement} opt.diagonalMovement Condition under which diagonal\r\n *      movement will be allowed.\r\n */\r\nfunction JumpPointFinder(opt) {\r\n    opt = opt || {};\r\n    if (opt.diagonalMovement === DiagonalMovement.Never) {\r\n        return new JPFNeverMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.Always) {\r\n        return new JPFAlwaysMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        return new JPFMoveDiagonallyIfNoObstacles(opt);\r\n    } else {\r\n        return new JPFMoveDiagonallyIfAtMostOneObstacle(opt);\r\n    }\r\n}\r\n\r\nmodule.exports = JumpPointFinder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSnVtcFBvaW50RmluZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLHlGQUEwQjtBQUN6RCw2QkFBNkIsbUJBQU8sQ0FBQyxrR0FBMEI7QUFDL0QsOEJBQThCLG1CQUFPLENBQUMsb0dBQTJCO0FBQ2pFLHFDQUFxQyxtQkFBTyxDQUFDLGtIQUFrQztBQUMvRSwyQ0FBMkMsbUJBQU8sQ0FBQyw4SEFBd0M7QUFDM0Y7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQjtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL25vZGVfbW9kdWxlcy9wYXRoZmluZGluZy9zcmMvZmluZGVycy9KdW1wUG9pbnRGaW5kZXIuanM/NGM2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGF1dGhvciBhbmllcm8gLyBodHRwczovL2dpdGh1Yi5jb20vYW5pZXJvXHJcbiAqL1xyXG52YXIgRGlhZ29uYWxNb3ZlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvRGlhZ29uYWxNb3ZlbWVudCcpO1xyXG52YXIgSlBGTmV2ZXJNb3ZlRGlhZ29uYWxseSA9IHJlcXVpcmUoJy4vSlBGTmV2ZXJNb3ZlRGlhZ29uYWxseScpO1xyXG52YXIgSlBGQWx3YXlzTW92ZURpYWdvbmFsbHkgPSByZXF1aXJlKCcuL0pQRkFsd2F5c01vdmVEaWFnb25hbGx5Jyk7XHJcbnZhciBKUEZNb3ZlRGlhZ29uYWxseUlmTm9PYnN0YWNsZXMgPSByZXF1aXJlKCcuL0pQRk1vdmVEaWFnb25hbGx5SWZOb09ic3RhY2xlcycpO1xyXG52YXIgSlBGTW92ZURpYWdvbmFsbHlJZkF0TW9zdE9uZU9ic3RhY2xlID0gcmVxdWlyZSgnLi9KUEZNb3ZlRGlhZ29uYWxseUlmQXRNb3N0T25lT2JzdGFjbGUnKTtcclxuXHJcbi8qKlxyXG4gKiBQYXRoIGZpbmRlciB1c2luZyB0aGUgSnVtcCBQb2ludCBTZWFyY2ggYWxnb3JpdGhtXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0LmhldXJpc3RpYyBIZXVyaXN0aWMgZnVuY3Rpb24gdG8gZXN0aW1hdGUgdGhlIGRpc3RhbmNlXHJcbiAqICAgICAoZGVmYXVsdHMgdG8gbWFuaGF0dGFuKS5cclxuICogQHBhcmFtIHtEaWFnb25hbE1vdmVtZW50fSBvcHQuZGlhZ29uYWxNb3ZlbWVudCBDb25kaXRpb24gdW5kZXIgd2hpY2ggZGlhZ29uYWxcclxuICogICAgICBtb3ZlbWVudCB3aWxsIGJlIGFsbG93ZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBKdW1wUG9pbnRGaW5kZXIob3B0KSB7XHJcbiAgICBvcHQgPSBvcHQgfHwge307XHJcbiAgICBpZiAob3B0LmRpYWdvbmFsTW92ZW1lbnQgPT09IERpYWdvbmFsTW92ZW1lbnQuTmV2ZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEpQRk5ldmVyTW92ZURpYWdvbmFsbHkob3B0KTtcclxuICAgIH0gZWxzZSBpZiAob3B0LmRpYWdvbmFsTW92ZW1lbnQgPT09IERpYWdvbmFsTW92ZW1lbnQuQWx3YXlzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBKUEZBbHdheXNNb3ZlRGlhZ29uYWxseShvcHQpO1xyXG4gICAgfSBlbHNlIGlmIChvcHQuZGlhZ29uYWxNb3ZlbWVudCA9PT0gRGlhZ29uYWxNb3ZlbWVudC5Pbmx5V2hlbk5vT2JzdGFjbGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBKUEZNb3ZlRGlhZ29uYWxseUlmTm9PYnN0YWNsZXMob3B0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBKUEZNb3ZlRGlhZ29uYWxseUlmQXRNb3N0T25lT2JzdGFjbGUob3B0KTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBKdW1wUG9pbnRGaW5kZXI7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JumpPointFinder.js\n\n}");

/***/ }),

/***/ "./node_modules/pathfinding/src/finders/JumpPointFinderBase.js":
/*!*********************************************************************!*\
  !*** ./node_modules/pathfinding/src/finders/JumpPointFinderBase.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar Heap       = __webpack_require__(/*! heap */ \"./node_modules/heap/index.js\");\r\nvar Util       = __webpack_require__(/*! ../core/Util */ \"./node_modules/pathfinding/src/core/Util.js\");\r\nvar Heuristic  = __webpack_require__(/*! ../core/Heuristic */ \"./node_modules/pathfinding/src/core/Heuristic.js\");\r\nvar DiagonalMovement = __webpack_require__(/*! ../core/DiagonalMovement */ \"./node_modules/pathfinding/src/core/DiagonalMovement.js\");\r\n\r\n/**\r\n * Base class for the Jump Point Search algorithm\r\n * @param {object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction JumpPointFinderBase(opt) {\r\n    opt = opt || {};\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.trackJumpRecursion = opt.trackJumpRecursion || false;\r\n}\r\n\r\n/**\r\n * Find and return the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nJumpPointFinderBase.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = this.openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = this.startNode = grid.getNodeAt(startX, startY),\r\n        endNode = this.endNode = grid.getNodeAt(endX, endY), node;\r\n\r\n    this.grid = grid;\r\n\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        if (node === endNode) {\r\n            return Util.expandPath(Util.backtrace(endNode));\r\n        }\r\n\r\n        this._identifySuccessors(node);\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\n/**\r\n * Identify successors for the given node. Runs a jump point search in the\r\n * direction of each available neighbor, adding any points found to the open\r\n * list.\r\n * @protected\r\n */\r\nJumpPointFinderBase.prototype._identifySuccessors = function(node) {\r\n    var grid = this.grid,\r\n        heuristic = this.heuristic,\r\n        openList = this.openList,\r\n        endX = this.endNode.x,\r\n        endY = this.endNode.y,\r\n        neighbors, neighbor,\r\n        jumpPoint, i, l,\r\n        x = node.x, y = node.y,\r\n        jx, jy, dx, dy, d, ng, jumpNode,\r\n        abs = Math.abs, max = Math.max;\r\n\r\n    neighbors = this._findNeighbors(node);\r\n    for(i = 0, l = neighbors.length; i < l; ++i) {\r\n        neighbor = neighbors[i];\r\n        jumpPoint = this._jump(neighbor[0], neighbor[1], x, y);\r\n        if (jumpPoint) {\r\n\r\n            jx = jumpPoint[0];\r\n            jy = jumpPoint[1];\r\n            jumpNode = grid.getNodeAt(jx, jy);\r\n\r\n            if (jumpNode.closed) {\r\n                continue;\r\n            }\r\n\r\n            // include distance, as parent may not be immediately adjacent:\r\n            d = Heuristic.octile(abs(jx - x), abs(jy - y));\r\n            ng = node.g + d; // next `g` value\r\n\r\n            if (!jumpNode.opened || ng < jumpNode.g) {\r\n                jumpNode.g = ng;\r\n                jumpNode.h = jumpNode.h || heuristic(abs(jx - endX), abs(jy - endY));\r\n                jumpNode.f = jumpNode.g + jumpNode.h;\r\n                jumpNode.parent = node;\r\n\r\n                if (!jumpNode.opened) {\r\n                    openList.push(jumpNode);\r\n                    jumpNode.opened = true;\r\n                } else {\r\n                    openList.updateItem(jumpNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = JumpPointFinderBase;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGF0aGZpbmRpbmcvc3JjL2ZpbmRlcnMvSnVtcFBvaW50RmluZGVyQmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQywwQ0FBTTtBQUMvQixpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBYztBQUN2QyxpQkFBaUIsbUJBQU8sQ0FBQywyRUFBbUI7QUFDNUMsdUJBQXVCLG1CQUFPLENBQUMseUZBQTBCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsT0FBTztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vbm9kZV9tb2R1bGVzL3BhdGhmaW5kaW5nL3NyYy9maW5kZXJzL0p1bXBQb2ludEZpbmRlckJhc2UuanM/MzA0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGF1dGhvciBpbW9yIC8gaHR0cHM6Ly9naXRodWIuY29tL2ltb3JcclxuICovXHJcbnZhciBIZWFwICAgICAgID0gcmVxdWlyZSgnaGVhcCcpO1xyXG52YXIgVXRpbCAgICAgICA9IHJlcXVpcmUoJy4uL2NvcmUvVXRpbCcpO1xyXG52YXIgSGV1cmlzdGljICA9IHJlcXVpcmUoJy4uL2NvcmUvSGV1cmlzdGljJyk7XHJcbnZhciBEaWFnb25hbE1vdmVtZW50ID0gcmVxdWlyZSgnLi4vY29yZS9EaWFnb25hbE1vdmVtZW50Jyk7XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgdGhlIEp1bXAgUG9pbnQgU2VhcmNoIGFsZ29yaXRobVxyXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0XHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wdC5oZXVyaXN0aWMgSGV1cmlzdGljIGZ1bmN0aW9uIHRvIGVzdGltYXRlIHRoZSBkaXN0YW5jZVxyXG4gKiAgICAgKGRlZmF1bHRzIHRvIG1hbmhhdHRhbikuXHJcbiAqL1xyXG5mdW5jdGlvbiBKdW1wUG9pbnRGaW5kZXJCYXNlKG9wdCkge1xyXG4gICAgb3B0ID0gb3B0IHx8IHt9O1xyXG4gICAgdGhpcy5oZXVyaXN0aWMgPSBvcHQuaGV1cmlzdGljIHx8IEhldXJpc3RpYy5tYW5oYXR0YW47XHJcbiAgICB0aGlzLnRyYWNrSnVtcFJlY3Vyc2lvbiA9IG9wdC50cmFja0p1bXBSZWN1cnNpb24gfHwgZmFsc2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaW5kIGFuZCByZXR1cm4gdGhlIHBhdGguXHJcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fSBUaGUgcGF0aCwgaW5jbHVkaW5nIGJvdGggc3RhcnQgYW5kXHJcbiAqICAgICBlbmQgcG9zaXRpb25zLlxyXG4gKi9cclxuSnVtcFBvaW50RmluZGVyQmFzZS5wcm90b3R5cGUuZmluZFBhdGggPSBmdW5jdGlvbihzdGFydFgsIHN0YXJ0WSwgZW5kWCwgZW5kWSwgZ3JpZCkge1xyXG4gICAgdmFyIG9wZW5MaXN0ID0gdGhpcy5vcGVuTGlzdCA9IG5ldyBIZWFwKGZ1bmN0aW9uKG5vZGVBLCBub2RlQikge1xyXG4gICAgICAgICAgICByZXR1cm4gbm9kZUEuZiAtIG5vZGVCLmY7XHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgc3RhcnROb2RlID0gdGhpcy5zdGFydE5vZGUgPSBncmlkLmdldE5vZGVBdChzdGFydFgsIHN0YXJ0WSksXHJcbiAgICAgICAgZW5kTm9kZSA9IHRoaXMuZW5kTm9kZSA9IGdyaWQuZ2V0Tm9kZUF0KGVuZFgsIGVuZFkpLCBub2RlO1xyXG5cclxuICAgIHRoaXMuZ3JpZCA9IGdyaWQ7XHJcblxyXG5cclxuICAgIC8vIHNldCB0aGUgYGdgIGFuZCBgZmAgdmFsdWUgb2YgdGhlIHN0YXJ0IG5vZGUgdG8gYmUgMFxyXG4gICAgc3RhcnROb2RlLmcgPSAwO1xyXG4gICAgc3RhcnROb2RlLmYgPSAwO1xyXG5cclxuICAgIC8vIHB1c2ggdGhlIHN0YXJ0IG5vZGUgaW50byB0aGUgb3BlbiBsaXN0XHJcbiAgICBvcGVuTGlzdC5wdXNoKHN0YXJ0Tm9kZSk7XHJcbiAgICBzdGFydE5vZGUub3BlbmVkID0gdHJ1ZTtcclxuXHJcbiAgICAvLyB3aGlsZSB0aGUgb3BlbiBsaXN0IGlzIG5vdCBlbXB0eVxyXG4gICAgd2hpbGUgKCFvcGVuTGlzdC5lbXB0eSgpKSB7XHJcbiAgICAgICAgLy8gcG9wIHRoZSBwb3NpdGlvbiBvZiBub2RlIHdoaWNoIGhhcyB0aGUgbWluaW11bSBgZmAgdmFsdWUuXHJcbiAgICAgICAgbm9kZSA9IG9wZW5MaXN0LnBvcCgpO1xyXG4gICAgICAgIG5vZGUuY2xvc2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKG5vZGUgPT09IGVuZE5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFV0aWwuZXhwYW5kUGF0aChVdGlsLmJhY2t0cmFjZShlbmROb2RlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9pZGVudGlmeVN1Y2Nlc3NvcnMobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZmFpbCB0byBmaW5kIHRoZSBwYXRoXHJcbiAgICByZXR1cm4gW107XHJcbn07XHJcblxyXG4vKipcclxuICogSWRlbnRpZnkgc3VjY2Vzc29ycyBmb3IgdGhlIGdpdmVuIG5vZGUuIFJ1bnMgYSBqdW1wIHBvaW50IHNlYXJjaCBpbiB0aGVcclxuICogZGlyZWN0aW9uIG9mIGVhY2ggYXZhaWxhYmxlIG5laWdoYm9yLCBhZGRpbmcgYW55IHBvaW50cyBmb3VuZCB0byB0aGUgb3BlblxyXG4gKiBsaXN0LlxyXG4gKiBAcHJvdGVjdGVkXHJcbiAqL1xyXG5KdW1wUG9pbnRGaW5kZXJCYXNlLnByb3RvdHlwZS5faWRlbnRpZnlTdWNjZXNzb3JzID0gZnVuY3Rpb24obm9kZSkge1xyXG4gICAgdmFyIGdyaWQgPSB0aGlzLmdyaWQsXHJcbiAgICAgICAgaGV1cmlzdGljID0gdGhpcy5oZXVyaXN0aWMsXHJcbiAgICAgICAgb3Blbkxpc3QgPSB0aGlzLm9wZW5MaXN0LFxyXG4gICAgICAgIGVuZFggPSB0aGlzLmVuZE5vZGUueCxcclxuICAgICAgICBlbmRZID0gdGhpcy5lbmROb2RlLnksXHJcbiAgICAgICAgbmVpZ2hib3JzLCBuZWlnaGJvcixcclxuICAgICAgICBqdW1wUG9pbnQsIGksIGwsXHJcbiAgICAgICAgeCA9IG5vZGUueCwgeSA9IG5vZGUueSxcclxuICAgICAgICBqeCwganksIGR4LCBkeSwgZCwgbmcsIGp1bXBOb2RlLFxyXG4gICAgICAgIGFicyA9IE1hdGguYWJzLCBtYXggPSBNYXRoLm1heDtcclxuXHJcbiAgICBuZWlnaGJvcnMgPSB0aGlzLl9maW5kTmVpZ2hib3JzKG5vZGUpO1xyXG4gICAgZm9yKGkgPSAwLCBsID0gbmVpZ2hib3JzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgIG5laWdoYm9yID0gbmVpZ2hib3JzW2ldO1xyXG4gICAgICAgIGp1bXBQb2ludCA9IHRoaXMuX2p1bXAobmVpZ2hib3JbMF0sIG5laWdoYm9yWzFdLCB4LCB5KTtcclxuICAgICAgICBpZiAoanVtcFBvaW50KSB7XHJcblxyXG4gICAgICAgICAgICBqeCA9IGp1bXBQb2ludFswXTtcclxuICAgICAgICAgICAgankgPSBqdW1wUG9pbnRbMV07XHJcbiAgICAgICAgICAgIGp1bXBOb2RlID0gZ3JpZC5nZXROb2RlQXQoangsIGp5KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChqdW1wTm9kZS5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBpbmNsdWRlIGRpc3RhbmNlLCBhcyBwYXJlbnQgbWF5IG5vdCBiZSBpbW1lZGlhdGVseSBhZGphY2VudDpcclxuICAgICAgICAgICAgZCA9IEhldXJpc3RpYy5vY3RpbGUoYWJzKGp4IC0geCksIGFicyhqeSAtIHkpKTtcclxuICAgICAgICAgICAgbmcgPSBub2RlLmcgKyBkOyAvLyBuZXh0IGBnYCB2YWx1ZVxyXG5cclxuICAgICAgICAgICAgaWYgKCFqdW1wTm9kZS5vcGVuZWQgfHwgbmcgPCBqdW1wTm9kZS5nKSB7XHJcbiAgICAgICAgICAgICAgICBqdW1wTm9kZS5nID0gbmc7XHJcbiAgICAgICAgICAgICAgICBqdW1wTm9kZS5oID0ganVtcE5vZGUuaCB8fCBoZXVyaXN0aWMoYWJzKGp4IC0gZW5kWCksIGFicyhqeSAtIGVuZFkpKTtcclxuICAgICAgICAgICAgICAgIGp1bXBOb2RlLmYgPSBqdW1wTm9kZS5nICsganVtcE5vZGUuaDtcclxuICAgICAgICAgICAgICAgIGp1bXBOb2RlLnBhcmVudCA9IG5vZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFqdW1wTm9kZS5vcGVuZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGVuTGlzdC5wdXNoKGp1bXBOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBqdW1wTm9kZS5vcGVuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGVuTGlzdC51cGRhdGVJdGVtKGp1bXBOb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSnVtcFBvaW50RmluZGVyQmFzZTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/pathfinding/src/finders/JumpPointFinderBase.js\n\n}");

/***/ }),

/***/ "./node_modules/pizzicato/distr/Pizzicato.min.js":
/*!*******************************************************!*\
  !*** ./node_modules/pizzicato/distr/Pizzicato.min.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("{var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(e){\"use strict\";function t(e,t){this.options={},e=e||this.options;var i={frequency:350,peak:1};this.inputNode=this.filterNode=s.context.createBiquadFilter(),this.filterNode.type=t,this.outputNode=o.context.createGain(),this.filterNode.connect(this.outputNode);for(var n in i)this[n]=e[n],this[n]=void 0===this[n]||null===this[n]?i[n]:this[n]}function i(){var e,t,i=s.context.sampleRate*this.time,n=o.context.createBuffer(2,i,s.context.sampleRate),a=n.getChannelData(0),r=n.getChannelData(1);for(t=0;i>t;t++)e=this.reverse?i-t:t,a[t]=(2*Math.random()-1)*Math.pow(1-e/i,this.decay),r[t]=(2*Math.random()-1)*Math.pow(1-e/i,this.decay);this.reverbNode.buffer&&(this.inputNode.disconnect(this.reverbNode),this.reverbNode.disconnect(this.wetGainNode),this.reverbNode=o.context.createConvolver(),this.inputNode.connect(this.reverbNode),this.reverbNode.connect(this.wetGainNode)),this.reverbNode.buffer=n}function n(e){for(var t=s.context.sampleRate,i=new Float32Array(t),n=Math.PI/180,o=0;t>o;o++){var a=2*o/t-1;i[o]=(3+e)*a*20*n/(Math.PI+e*Math.abs(a))}return i}var o={},s=o,a= true&&module.exports,r= true&&__webpack_require__.amdO;a?module.exports=o:r?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (o),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):e.Pizzicato=e.Pz=o;var c=e.AudioContext||e.webkitAudioContext;if(!c)return void console.error(\"No AudioContext found in this environment. Please ensure your window or global object contains a working AudioContext constructor function.\");o.context=new c;var h=o.context.createGain();h.connect(o.context.destination),o.Util={isString:function(e){return\"[object String]\"===toString.call(e)},isObject:function(e){return\"[object Object]\"===toString.call(e)},isFunction:function(e){return\"[object Function]\"===toString.call(e)},isNumber:function(e){return\"[object Number]\"===toString.call(e)&&e===+e},isArray:function(e){return\"[object Array]\"===toString.call(e)},isInRange:function(e,t,i){return s.Util.isNumber(e)&&s.Util.isNumber(t)&&s.Util.isNumber(i)?e>=t&&i>=e:!1},isBool:function(e){return\"boolean\"==typeof e},isOscillator:function(e){return e&&\"[object OscillatorNode]\"===e.toString()},isAudioBufferSourceNode:function(e){return e&&\"[object AudioBufferSourceNode]\"===e.toString()},isSound:function(e){return e instanceof s.Sound},isEffect:function(e){for(var t in o.Effects)if(e instanceof o.Effects[t])return!0;return!1},normalize:function(e,t,i){return s.Util.isNumber(e)&&s.Util.isNumber(t)&&s.Util.isNumber(i)?(i-t)*e/1+t:void 0},getDryLevel:function(e){return!s.Util.isNumber(e)||e>1||0>e?0:.5>=e?1:1-2*(e-.5)},getWetLevel:function(e){return!s.Util.isNumber(e)||e>1||0>e?0:e>=.5?1:1-2*(.5-e)}};var u=o.context.createGain(),d=Object.getPrototypeOf(Object.getPrototypeOf(u)),l=d.connect;d.connect=function(e){var t=s.Util.isEffect(e)?e.inputNode:e;return l.call(this,t),e},Object.defineProperty(o,\"volume\",{enumerable:!0,get:function(){return h.gain.value},set:function(e){s.Util.isInRange(e,0,1)&&h&&(h.gain.value=e)}}),Object.defineProperty(o,\"masterGainNode\",{enumerable:!1,get:function(){return h},set:function(e){console.error(\"Can't set the master gain node\")}}),o.Events={on:function(e,t,i){if(e&&t){this._events=this._events||{};var n=this._events[e]||(this._events[e]=[]);n.push({callback:t,context:i||this,handler:this})}},trigger:function(e){if(e){var t,i,n,o;if(this._events=this._events||{},t=this._events[e]||(this._events[e]=[])){for(i=Math.max(0,arguments.length-1),n=[],o=0;i>o;o++)n[o]=arguments[o+1];for(o=0;o<t.length;o++)t[o].callback.apply(t[o].context,n)}}},off:function(e){e?this._events[e]=void 0:this._events={}}},o.Sound=function(e,t){function i(e){var t=[\"wave\",\"file\",\"input\",\"script\",\"sound\"];if(e&&!d.isFunction(e)&&!d.isString(e)&&!d.isObject(e))return\"Description type not supported. Initialize a sound using an object, a function or a string.\";if(d.isObject(e)){if(!d.isString(e.source)||-1===t.indexOf(e.source))return\"Specified source not supported. Sources can be wave, file, input or script\";if(!(\"file\"!==e.source||e.options&&e.options.path))return\"A path is needed for sounds with a file source\";if(!(\"script\"!==e.source||e.options&&e.options.audioFunction))return\"An audio function is needed for sounds with a script source\"}}function n(e,t){e=e||{},this.getRawSourceNode=function(){var t=this.sourceNode?this.sourceNode.frequency.value:e.frequency,i=o.context.createOscillator();return i.type=e.type||\"sine\",i.frequency.value=t||440,i},this.sourceNode=this.getRawSourceNode(),this.sourceNode.gainSuccessor=s.context.createGain(),this.sourceNode.connect(this.sourceNode.gainSuccessor),d.isFunction(t)&&t()}function a(e,t){e=d.isArray(e)?e:[e];var i=new XMLHttpRequest;i.open(\"GET\",e[0],!0),i.responseType=\"arraybuffer\",i.onload=function(i){o.context.decodeAudioData(i.target.response,function(e){u.getRawSourceNode=function(){var t=o.context.createBufferSource();return t.loop=this.loop,t.buffer=e,t},d.isFunction(t)&&t()}.bind(u),function(i){return console.error(\"Error decoding audio file \"+e[0]),e.length>1?(e.shift(),void a(e,t)):(i=i||new Error(\"Error decoding audio file \"+e[0]),void(d.isFunction(t)&&t(i)))}.bind(u))},i.onreadystatechange=function(t){4===i.readyState&&200!==i.status&&console.error(\"Error while fetching \"+e[0]+\". \"+i.statusText)},i.send()}function r(e,t){if(navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia,!navigator.getUserMedia&&!navigator.mediaDevices.getUserMedia)return void console.error(\"Your browser does not support getUserMedia\");var i=function(e){u.getRawSourceNode=function(){return o.context.createMediaStreamSource(e)},d.isFunction(t)&&t()}.bind(u),n=function(e){d.isFunction(t)&&t(e)};navigator.mediaDevices.getUserMedia?navigator.mediaDevices.getUserMedia({audio:!0}).then(i)[\"catch\"](n):navigator.getUserMedia({audio:!0},i,n)}function c(e,t){var i=d.isFunction(e)?e:e.audioFunction,n=d.isObject(e)&&e.bufferSize?e.bufferSize:null;if(!n)try{o.context.createScriptProcessor()}catch(s){n=2048}this.getRawSourceNode=function(){var e=o.context.createScriptProcessor(n,1,1);return e.onaudioprocess=i,e}}function h(e,t){this.getRawSourceNode=e.sound.getRawSourceNode,e.sound.sourceNode&&s.Util.isOscillator(e.sound.sourceNode)&&(this.sourceNode=this.getRawSourceNode(),this.frequency=e.sound.frequency)}var u=this,d=o.Util,l=i(e),f=d.isObject(e)&&d.isObject(e.options),p=.04,v=.04;if(l)throw console.error(l),new Error(\"Error initializing Pizzicato Sound: \"+l);this.detached=f&&e.options.detached,this.masterVolume=o.context.createGain(),this.fadeNode=o.context.createGain(),this.fadeNode.gain.value=0,this.detached||this.masterVolume.connect(o.masterGainNode),this.lastTimePlayed=0,this.effects=[],this.effectConnectors=[],this.playing=this.paused=!1,this.loop=f&&e.options.loop,this.attack=f&&d.isNumber(e.options.attack)?e.options.attack:p,this.volume=f&&d.isNumber(e.options.volume)?e.options.volume:1,f&&d.isNumber(e.options.release)?this.release=e.options.release:f&&d.isNumber(e.options.sustain)?(console.warn(\"'sustain' is deprecated. Use 'release' instead.\"),this.release=e.options.sustain):this.release=v,e?d.isString(e)?a.bind(this)(e,t):d.isFunction(e)?c.bind(this)(e,t):\"file\"===e.source?a.bind(this)(e.options.path,t):\"wave\"===e.source?n.bind(this)(e.options,t):\"input\"===e.source?r.bind(this)(e,t):\"script\"===e.source?c.bind(this)(e.options,t):\"sound\"===e.source&&h.bind(this)(e.options,t):n.bind(this)({},t)},o.Sound.prototype=Object.create(o.Events,{play:{enumerable:!0,value:function(e,t){this.playing||(s.Util.isNumber(t)||(t=this.offsetTime||0),s.Util.isNumber(e)||(e=0),this.playing=!0,this.paused=!1,this.sourceNode=this.getSourceNode(),this.applyAttack(),s.Util.isFunction(this.sourceNode.start)&&(this.lastTimePlayed=o.context.currentTime-t,this.sourceNode.start(s.context.currentTime+e,t)),this.trigger(\"play\"))}},stop:{enumerable:!0,value:function(){(this.paused||this.playing)&&(this.paused=this.playing=!1,this.stopWithRelease(),this.offsetTime=0,this.trigger(\"stop\"))}},pause:{enumerable:!0,value:function(){if(!this.paused&&this.playing){this.paused=!0,this.playing=!1,this.stopWithRelease();var e=s.context.currentTime-this.lastTimePlayed;this.sourceNode.buffer?this.offsetTime=e%(this.sourceNode.buffer.length/s.context.sampleRate):this.offsetTime=e,this.trigger(\"pause\")}}},clone:{enumerable:!0,value:function(){for(var e=new o.Sound({source:\"sound\",options:{loop:this.loop,attack:this.attack,release:this.release,volume:this.volume,sound:this}}),t=0;t<this.effects.length;t++)e.addEffect(this.effects[t]);return e}},onEnded:{enumerable:!0,value:function(e){return function(){this.sourceNode&&this.sourceNode!==e||(this.playing&&this.stop(),this.paused||this.trigger(\"end\"))}}},addEffect:{enumerable:!0,value:function(e){if(!s.Util.isEffect(e))return console.error(\"The object provided is not a Pizzicato effect.\"),this;this.effects.push(e);var t=this.effectConnectors.length>0?this.effectConnectors[this.effectConnectors.length-1]:this.fadeNode;t.disconnect(),t.connect(e);var i=s.context.createGain();return this.effectConnectors.push(i),e.connect(i),i.connect(this.masterVolume),this}},removeEffect:{enumerable:!0,value:function(e){var t=this.effects.indexOf(e);if(-1===t)return console.warn(\"Cannot remove effect that is not applied to this sound.\"),this;var i=this.playing;i&&this.pause();var n=0===t?this.fadeNode:this.effectConnectors[t-1];n.disconnect();var o=this.effectConnectors[t];o.disconnect(),e.disconnect(o),this.effectConnectors.splice(t,1),this.effects.splice(t,1);var s;return s=t>this.effects.length-1||0===this.effects.length?this.masterVolume:this.effects[t],n.connect(s),i&&this.play(),this}},connect:{enumerable:!0,value:function(e){return this.masterVolume.connect(e),this}},disconnect:{enumerable:!0,value:function(e){return this.masterVolume.disconnect(e),this}},connectEffects:{enumerable:!0,value:function(){for(var e=[],t=0;t<this.effects.length;t++){var i=t===this.effects.length-1,n=i?this.masterVolume:this.effects[t+1].inputNode;e[t]=s.context.createGain(),this.effects[t].outputNode.disconnect(this.effectConnectors[t]),this.effects[t].outputNode.connect(n)}}},volume:{enumerable:!0,get:function(){return this.masterVolume?this.masterVolume.gain.value:void 0},set:function(e){s.Util.isInRange(e,0,1)&&this.masterVolume&&(this.masterVolume.gain.value=e)}},frequency:{enumerable:!0,get:function(){return this.sourceNode&&s.Util.isOscillator(this.sourceNode)?this.sourceNode.frequency.value:null},set:function(e){this.sourceNode&&s.Util.isOscillator(this.sourceNode)&&(this.sourceNode.frequency.value=e)}},sustain:{enumerable:!0,get:function(){return console.warn(\"'sustain' is deprecated. Use 'release' instead.\"),this.release},set:function(e){console.warn(\"'sustain' is deprecated. Use 'release' instead.\"),s.Util.isInRange(e,0,10)&&(this.release=e)}},getSourceNode:{enumerable:!0,value:function(){if(this.sourceNode){var e=this.sourceNode;e.gainSuccessor.gain.setValueAtTime(e.gainSuccessor.gain.value,s.context.currentTime),e.gainSuccessor.gain.linearRampToValueAtTime(1e-4,s.context.currentTime+.2),setTimeout(function(){e.disconnect(),e.gainSuccessor.disconnect()},200)}var t=this.getRawSourceNode();return t.gainSuccessor=s.context.createGain(),t.connect(t.gainSuccessor),t.gainSuccessor.connect(this.fadeNode),this.fadeNode.connect(this.getInputNode()),s.Util.isAudioBufferSourceNode(t)&&(t.onended=this.onEnded(t).bind(this)),t}},getInputNode:{enumerable:!0,value:function(){return this.effects.length>0?this.effects[0].inputNode:this.masterVolume}},applyAttack:{enumerable:!1,value:function(){this.fadeNode.gain.value;if(this.fadeNode.gain.cancelScheduledValues(s.context.currentTime),!this.attack)return void this.fadeNode.gain.setTargetAtTime(1,s.context.currentTime,.001);var e=navigator.userAgent.toLowerCase().indexOf(\"firefox\")>-1,t=this.attack;e||(t=(1-this.fadeNode.gain.value)*this.attack),this.fadeNode.gain.setTargetAtTime(1,s.context.currentTime,2*t)}},stopWithRelease:{enumerable:!1,value:function(e){var t=this.sourceNode,i=function(){return s.Util.isFunction(t.stop)?t.stop(0):t.disconnect()};this.fadeNode.gain.value;if(this.fadeNode.gain.cancelScheduledValues(s.context.currentTime),!this.release)return this.fadeNode.gain.setTargetAtTime(0,s.context.currentTime,.001),void i();var n=navigator.userAgent.toLowerCase().indexOf(\"firefox\")>-1,o=this.release;n||(o=this.fadeNode.gain.value*this.release),this.fadeNode.gain.setTargetAtTime(1e-5,s.context.currentTime,o/5),window.setTimeout(function(){i()},1e3*o)}}}),o.Group=function(e){e=e||[],this.mergeGainNode=s.context.createGain(),this.masterVolume=s.context.createGain(),this.sounds=[],this.effects=[],this.effectConnectors=[],this.mergeGainNode.connect(this.masterVolume),this.masterVolume.connect(s.masterGainNode);for(var t=0;t<e.length;t++)this.addSound(e[t])},o.Group.prototype=Object.create(s.Events,{connect:{enumerable:!0,value:function(e){return this.masterVolume.connect(e),this}},disconnect:{enumerable:!0,value:function(e){return this.masterVolume.disconnect(e),this}},addSound:{enumerable:!0,value:function(e){return s.Util.isSound(e)?this.sounds.indexOf(e)>-1?void console.warn(\"The Pizzicato.Sound object was already added to this group\"):e.detached?void console.warn(\"Groups do not support detached sounds. You can manually create an audio graph to group detached sounds together.\"):(e.disconnect(s.masterGainNode),e.connect(this.mergeGainNode),void this.sounds.push(e)):void console.error(\"You can only add Pizzicato.Sound objects\")}},removeSound:{enumerable:!0,value:function(e){var t=this.sounds.indexOf(e);return-1===t?void console.warn(\"Cannot remove a sound that is not part of this group.\"):(e.disconnect(this.mergeGainNode),e.connect(s.masterGainNode),void this.sounds.splice(t,1))}},volume:{enumerable:!0,get:function(){return this.masterVolume?this.masterVolume.gain.value:void 0},set:function(e){s.Util.isInRange(e,0,1)&&(this.masterVolume.gain.value=e)}},play:{enumerable:!0,value:function(){for(var e=0;e<this.sounds.length;e++)this.sounds[e].play();this.trigger(\"play\")}},stop:{enumerable:!0,value:function(){for(var e=0;e<this.sounds.length;e++)this.sounds[e].stop();this.trigger(\"stop\")}},pause:{enumerable:!0,value:function(){for(var e=0;e<this.sounds.length;e++)this.sounds[e].pause();this.trigger(\"pause\")}},addEffect:{enumerable:!0,value:function(e){if(!s.Util.isEffect(e))return console.error(\"The object provided is not a Pizzicato effect.\"),this;this.effects.push(e);var t=this.effectConnectors.length>0?this.effectConnectors[this.effectConnectors.length-1]:this.mergeGainNode;t.disconnect(),t.connect(e);var i=s.context.createGain();return this.effectConnectors.push(i),e.connect(i),i.connect(this.masterVolume),this}},removeEffect:{enumerable:!0,value:function(e){var t=this.effects.indexOf(e);if(-1===t)return console.warn(\"Cannot remove effect that is not applied to this group.\"),this;var i=0===t?this.mergeGainNode:this.effectConnectors[t-1];i.disconnect();var n=this.effectConnectors[t];n.disconnect(),e.disconnect(n),this.effectConnectors.splice(t,1),this.effects.splice(t,1);var o;return o=t>this.effects.length-1||0===this.effects.length?this.masterVolume:this.effects[t],i.connect(o),this}}}),o.Effects={};var f=Object.create(null,{connect:{enumerable:!0,value:function(e){return this.outputNode.connect(e),this}},disconnect:{enumerable:!0,value:function(e){return this.outputNode.disconnect(e),this}}});o.Effects.Delay=function(e){this.options={},e=e||this.options;var t={feedback:.5,time:.3,mix:.5};this.inputNode=o.context.createGain(),this.outputNode=o.context.createGain(),this.dryGainNode=o.context.createGain(),this.wetGainNode=o.context.createGain(),this.feedbackGainNode=o.context.createGain(),this.delayNode=o.context.createDelay(),this.inputNode.connect(this.dryGainNode),this.dryGainNode.connect(this.outputNode),this.delayNode.connect(this.feedbackGainNode),this.feedbackGainNode.connect(this.delayNode),this.inputNode.connect(this.delayNode),this.delayNode.connect(this.wetGainNode),this.wetGainNode.connect(this.outputNode);for(var i in t)this[i]=e[i],this[i]=void 0===this[i]||null===this[i]?t[i]:this[i]},o.Effects.Delay.prototype=Object.create(f,{mix:{enumerable:!0,get:function(){return this.options.mix},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.mix=e,this.dryGainNode.gain.value=o.Util.getDryLevel(this.mix),this.wetGainNode.gain.value=o.Util.getWetLevel(this.mix))}},time:{enumerable:!0,get:function(){return this.options.time},set:function(e){s.Util.isInRange(e,0,180)&&(this.options.time=e,this.delayNode.delayTime.value=e)}},feedback:{enumerable:!0,get:function(){return this.options.feedback},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.feedback=parseFloat(e,10),this.feedbackGainNode.gain.value=this.feedback)}}}),o.Effects.Compressor=function(e){this.options={},e=e||this.options;var t={threshold:-24,knee:30,attack:.003,release:.25,ratio:12};this.inputNode=this.compressorNode=o.context.createDynamicsCompressor(),this.outputNode=o.context.createGain(),this.compressorNode.connect(this.outputNode);for(var i in t)this[i]=e[i],this[i]=void 0===this[i]||null===this[i]?t[i]:this[i]},o.Effects.Compressor.prototype=Object.create(f,{threshold:{enumerable:!0,get:function(){return this.compressorNode.threshold.value},set:function(e){o.Util.isInRange(e,-100,0)&&(this.compressorNode.threshold.value=e)}},knee:{enumerable:!0,get:function(){return this.compressorNode.knee.value},set:function(e){o.Util.isInRange(e,0,40)&&(this.compressorNode.knee.value=e)}},attack:{enumerable:!0,get:function(){return this.compressorNode.attack.value},set:function(e){o.Util.isInRange(e,0,1)&&(this.compressorNode.attack.value=e)}},release:{enumerable:!0,get:function(){return this.compressorNode.release.value},set:function(e){o.Util.isInRange(e,0,1)&&(this.compressorNode.release.value=e)}},ratio:{enumerable:!0,get:function(){return this.compressorNode.ratio.value},set:function(e){o.Util.isInRange(e,1,20)&&(this.compressorNode.ratio.value=e)}},getCurrentGainReduction:function(){return this.compressorNode.reduction}}),o.Effects.LowPassFilter=function(e){t.call(this,e,\"lowpass\")},o.Effects.HighPassFilter=function(e){t.call(this,e,\"highpass\")};var p=Object.create(f,{frequency:{enumerable:!0,get:function(){return this.filterNode.frequency.value},set:function(e){o.Util.isInRange(e,10,22050)&&(this.filterNode.frequency.value=e)}},peak:{enumerable:!0,get:function(){return this.filterNode.Q.value},set:function(e){o.Util.isInRange(e,1e-4,1e3)&&(this.filterNode.Q.value=e)}}});o.Effects.LowPassFilter.prototype=p,o.Effects.HighPassFilter.prototype=p,o.Effects.Distortion=function(e){this.options={},e=e||this.options;var t={gain:.5};this.waveShaperNode=o.context.createWaveShaper(),this.inputNode=this.outputNode=this.waveShaperNode;for(var i in t)this[i]=e[i],this[i]=void 0===this[i]||null===this[i]?t[i]:this[i]},o.Effects.Distortion.prototype=Object.create(f,{gain:{enumerable:!0,get:function(){return this.options.gain},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.gain=e,this.adjustGain())}},adjustGain:{writable:!1,configurable:!1,enumerable:!1,value:function(){for(var e,t=s.Util.isNumber(this.options.gain)?parseInt(100*this.options.gain,10):50,i=44100,n=new Float32Array(i),o=Math.PI/180,a=0;i>a;++a)e=2*a/i-1,n[a]=(3+t)*e*20*o/(Math.PI+t*Math.abs(e));this.waveShaperNode.curve=n}}}),o.Effects.Flanger=function(e){this.options={},e=e||this.options;var t={time:.45,speed:.2,depth:.1,feedback:.1,mix:.5};this.inputNode=o.context.createGain(),this.outputNode=o.context.createGain(),this.inputFeedbackNode=o.context.createGain(),this.wetGainNode=o.context.createGain(),this.dryGainNode=o.context.createGain(),this.delayNode=o.context.createDelay(),this.oscillatorNode=o.context.createOscillator(),this.gainNode=o.context.createGain(),this.feedbackNode=o.context.createGain(),this.oscillatorNode.type=\"sine\",this.inputNode.connect(this.inputFeedbackNode),this.inputNode.connect(this.dryGainNode),this.inputFeedbackNode.connect(this.delayNode),this.inputFeedbackNode.connect(this.wetGainNode),this.delayNode.connect(this.wetGainNode),this.delayNode.connect(this.feedbackNode),this.feedbackNode.connect(this.inputFeedbackNode),this.oscillatorNode.connect(this.gainNode),this.gainNode.connect(this.delayNode.delayTime),this.dryGainNode.connect(this.outputNode),this.wetGainNode.connect(this.outputNode),this.oscillatorNode.start(0);for(var i in t)this[i]=e[i],this[i]=void 0===this[i]||null===this[i]?t[i]:this[i]},o.Effects.Flanger.prototype=Object.create(f,{time:{enumberable:!0,get:function(){return this.options.time},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.time=e,this.delayNode.delayTime.value=s.Util.normalize(e,.001,.02))}},speed:{enumberable:!0,get:function(){return this.options.speed},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.speed=e,this.oscillatorNode.frequency.value=s.Util.normalize(e,.5,5))}},depth:{enumberable:!0,get:function(){return this.options.depth},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.depth=e,this.gainNode.gain.value=s.Util.normalize(e,5e-4,.005))}},feedback:{enumberable:!0,get:function(){return this.options.feedback},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.feedback=e,this.feedbackNode.gain.value=s.Util.normalize(e,0,.8))}},mix:{enumberable:!0,get:function(){return this.options.mix},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.mix=e,this.dryGainNode.gain.value=o.Util.getDryLevel(this.mix),this.wetGainNode.gain.value=o.Util.getWetLevel(this.mix))}}}),o.Effects.StereoPanner=function(e){this.options={},e=e||this.options;var t={pan:0};this.inputNode=o.context.createGain(),this.outputNode=o.context.createGain(),o.context.createStereoPanner?(this.pannerNode=o.context.createStereoPanner(),this.inputNode.connect(this.pannerNode),this.pannerNode.connect(this.outputNode)):o.context.createPanner?(console.warn(\"Your browser does not support the StereoPannerNode. Will use PannerNode instead.\"),this.pannerNode=o.context.createPanner(),this.pannerNode.type=\"equalpower\",this.inputNode.connect(this.pannerNode),this.pannerNode.connect(this.outputNode)):(console.warn(\"Your browser does not support the Panner effect.\"),this.inputNode.connect(this.outputNode));for(var i in t)this[i]=e[i],this[i]=void 0===this[i]||null===this[i]?t[i]:this[i]},o.Effects.StereoPanner.prototype=Object.create(f,{pan:{enumerable:!0,get:function(){return this.options.pan},set:function(e){if(s.Util.isInRange(e,-1,1)&&(this.options.pan=e,this.pannerNode)){var t=this.pannerNode.toString().indexOf(\"StereoPannerNode\")>-1;t?this.pannerNode.pan.value=e:this.pannerNode.setPosition(e,0,1-Math.abs(e))}}}}),o.Effects.Convolver=function(e,t){this.options={},e=e||this.options;var i=this,n=new XMLHttpRequest,a={mix:.5};this.callback=t,this.inputNode=o.context.createGain(),this.convolverNode=o.context.createConvolver(),this.outputNode=o.context.createGain(),this.wetGainNode=o.context.createGain(),this.dryGainNode=o.context.createGain(),this.inputNode.connect(this.convolverNode),this.convolverNode.connect(this.wetGainNode),this.inputNode.connect(this.dryGainNode),this.dryGainNode.connect(this.outputNode),this.wetGainNode.connect(this.outputNode);for(var r in a)this[r]=e[r],this[r]=void 0===this[r]||null===this[r]?a[r]:this[r];return e.impulse?(n.open(\"GET\",e.impulse,!0),n.responseType=\"arraybuffer\",n.onload=function(e){var t=e.target.response;o.context.decodeAudioData(t,function(e){i.convolverNode.buffer=e,i.callback&&s.Util.isFunction(i.callback)&&i.callback()},function(e){e=e||new Error(\"Error decoding impulse file\"),i.callback&&s.Util.isFunction(i.callback)&&i.callback(e)})},n.onreadystatechange=function(t){4===n.readyState&&200!==n.status&&console.error(\"Error while fetching \"+e.impulse+\". \"+n.statusText)},void n.send()):void console.error(\"No impulse file specified.\")},o.Effects.Convolver.prototype=Object.create(f,{mix:{enumerable:!0,get:function(){return this.options.mix},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.mix=e,this.dryGainNode.gain.value=o.Util.getDryLevel(this.mix),this.wetGainNode.gain.value=o.Util.getWetLevel(this.mix))}}}),o.Effects.PingPongDelay=function(e){this.options={},e=e||this.options;var t={feedback:.5,time:.3,mix:.5};this.inputNode=o.context.createGain(),this.outputNode=o.context.createGain(),this.delayNodeLeft=o.context.createDelay(),this.delayNodeRight=o.context.createDelay(),this.dryGainNode=o.context.createGain(),this.wetGainNode=o.context.createGain(),this.feedbackGainNode=o.context.createGain(),this.channelMerger=o.context.createChannelMerger(2),this.inputNode.connect(this.dryGainNode),this.dryGainNode.connect(this.outputNode),this.delayNodeLeft.connect(this.channelMerger,0,0),this.delayNodeRight.connect(this.channelMerger,0,1),this.delayNodeLeft.connect(this.delayNodeRight),this.feedbackGainNode.connect(this.delayNodeLeft),this.delayNodeRight.connect(this.feedbackGainNode),this.inputNode.connect(this.feedbackGainNode),this.channelMerger.connect(this.wetGainNode),this.wetGainNode.connect(this.outputNode);for(var i in t)this[i]=e[i],this[i]=void 0===this[i]||null===this[i]?t[i]:this[i]},o.Effects.PingPongDelay.prototype=Object.create(f,{mix:{enumerable:!0,get:function(){return this.options.mix},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.mix=e,this.dryGainNode.gain.value=o.Util.getDryLevel(this.mix),this.wetGainNode.gain.value=o.Util.getWetLevel(this.mix))}},time:{enumerable:!0,get:function(){return this.options.time},set:function(e){s.Util.isInRange(e,0,180)&&(this.options.time=e,this.delayNodeLeft.delayTime.value=e,this.delayNodeRight.delayTime.value=e)}},feedback:{enumerable:!0,get:function(){return this.options.feedback},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.feedback=parseFloat(e,10),this.feedbackGainNode.gain.value=this.feedback)}}}),o.Effects.Reverb=function(e){this.options={},e=e||this.options;var t={mix:.5,time:.01,decay:.01,reverse:!1};this.inputNode=o.context.createGain(),this.reverbNode=o.context.createConvolver(),this.outputNode=o.context.createGain(),this.wetGainNode=o.context.createGain(),this.dryGainNode=o.context.createGain(),this.inputNode.connect(this.reverbNode),this.reverbNode.connect(this.wetGainNode),this.inputNode.connect(this.dryGainNode),this.dryGainNode.connect(this.outputNode),this.wetGainNode.connect(this.outputNode);for(var n in t)this[n]=e[n],this[n]=void 0===this[n]||null===this[n]?t[n]:this[n];i.bind(this)()},o.Effects.Reverb.prototype=Object.create(f,{mix:{enumerable:!0,get:function(){return this.options.mix},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.mix=e,this.dryGainNode.gain.value=o.Util.getDryLevel(this.mix),this.wetGainNode.gain.value=o.Util.getWetLevel(this.mix))}},time:{enumerable:!0,get:function(){return this.options.time},set:function(e){s.Util.isInRange(e,1e-4,10)&&(this.options.time=e,i.bind(this)())}},decay:{enumerable:!0,get:function(){return this.options.decay},set:function(e){s.Util.isInRange(e,1e-4,10)&&(this.options.decay=e,i.bind(this)())}},reverse:{enumerable:!0,get:function(){return this.options.reverse},set:function(e){s.Util.isBool(e)&&(this.options.reverse=e,i.bind(this)())}}}),o.Effects.Tremolo=function(e){this.options={},e=e||this.options;var t={speed:4,depth:1,mix:.8};this.inputNode=o.context.createGain(),this.outputNode=o.context.createGain(),this.dryGainNode=o.context.createGain(),this.wetGainNode=o.context.createGain(),this.tremoloGainNode=o.context.createGain(),this.tremoloGainNode.gain.value=0,this.lfoNode=o.context.createOscillator(),this.shaperNode=o.context.createWaveShaper(),this.shaperNode.curve=new Float32Array([0,1]),this.shaperNode.connect(this.tremoloGainNode.gain),this.inputNode.connect(this.dryGainNode),this.dryGainNode.connect(this.outputNode),this.lfoNode.connect(this.shaperNode),this.lfoNode.type=\"sine\",this.lfoNode.start(0),this.inputNode.connect(this.tremoloGainNode),this.tremoloGainNode.connect(this.wetGainNode),this.wetGainNode.connect(this.outputNode);for(var i in t)this[i]=e[i],this[i]=void 0===this[i]||null===this[i]?t[i]:this[i]},o.Effects.Tremolo.prototype=Object.create(f,{mix:{enumerable:!0,get:function(){return this.options.mix},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.mix=e,this.dryGainNode.gain.value=o.Util.getDryLevel(this.mix),this.wetGainNode.gain.value=o.Util.getWetLevel(this.mix))}},speed:{enumerable:!0,get:function(){return this.options.speed},set:function(e){s.Util.isInRange(e,0,20)&&(this.options.speed=e,this.lfoNode.frequency.value=e)}},depth:{enumerable:!0,get:function(){return this.options.depth},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.depth=e,this.shaperNode.curve=new Float32Array([1-e,1]))}}}),o.Effects.DubDelay=function(e){this.options={},e=e||this.options;var t={feedback:.6,time:.7,mix:.5,cutoff:700};this.inputNode=o.context.createGain(),this.outputNode=o.context.createGain(),this.dryGainNode=o.context.createGain(),this.wetGainNode=o.context.createGain(),this.feedbackGainNode=o.context.createGain(),this.delayNode=o.context.createDelay(),this.bqFilterNode=o.context.createBiquadFilter(),this.inputNode.connect(this.dryGainNode),this.dryGainNode.connect(this.outputNode),this.inputNode.connect(this.wetGainNode),this.inputNode.connect(this.feedbackGainNode),this.feedbackGainNode.connect(this.bqFilterNode),this.bqFilterNode.connect(this.delayNode),this.delayNode.connect(this.feedbackGainNode),this.delayNode.connect(this.wetGainNode),this.wetGainNode.connect(this.outputNode);for(var i in t)this[i]=e[i],this[i]=void 0===this[i]||null===this[i]?t[i]:this[i]},o.Effects.DubDelay.prototype=Object.create(f,{mix:{enumerable:!0,get:function(){return this.options.mix},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.mix=e,this.dryGainNode.gain.value=o.Util.getDryLevel(this.mix),this.wetGainNode.gain.value=o.Util.getWetLevel(this.mix))}},time:{enumerable:!0,get:function(){return this.options.time},set:function(e){s.Util.isInRange(e,0,180)&&(this.options.time=e,this.delayNode.delayTime.value=e)}},feedback:{enumerable:!0,get:function(){return this.options.feedback},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.feedback=parseFloat(e,10),this.feedbackGainNode.gain.value=this.feedback)}},cutoff:{enumerable:!0,get:function(){return this.options.cutoff},set:function(e){s.Util.isInRange(e,0,4e3)&&(this.options.cutoff=e,this.bqFilterNode.frequency.value=this.cutoff)}}}),o.Effects.RingModulator=function(e){this.options={},e=e||this.options;var t={speed:30,distortion:1,mix:.5};this.inputNode=o.context.createGain(),this.outputNode=o.context.createGain(),this.dryGainNode=o.context.createGain(),this.wetGainNode=o.context.createGain(),this.vIn=o.context.createOscillator(),this.vIn.start(0),this.vInGain=o.context.createGain(),this.vInGain.gain.value=.5,this.vInInverter1=o.context.createGain(),this.vInInverter1.gain.value=-1,this.vInInverter2=o.context.createGain(),this.vInInverter2.gain.value=-1,this.vInDiode1=new v(o.context),this.vInDiode2=new v(o.context),this.vInInverter3=o.context.createGain(),this.vInInverter3.gain.value=-1,this.vcInverter1=o.context.createGain(),this.vcInverter1.gain.value=-1,this.vcDiode3=new v(o.context),this.vcDiode4=new v(o.context),this.outGain=o.context.createGain(),this.outGain.gain.value=3,this.compressor=o.context.createDynamicsCompressor(),this.compressor.threshold.value=-24,this.compressor.ratio.value=16,this.inputNode.connect(this.dryGainNode),this.dryGainNode.connect(this.outputNode),this.inputNode.connect(this.vcInverter1),this.inputNode.connect(this.vcDiode4.node),this.vcInverter1.connect(this.vcDiode3.node),this.vIn.connect(this.vInGain),this.vInGain.connect(this.vInInverter1),this.vInGain.connect(this.vcInverter1),this.vInGain.connect(this.vcDiode4.node),this.vInInverter1.connect(this.vInInverter2),this.vInInverter1.connect(this.vInDiode2.node),this.vInInverter2.connect(this.vInDiode1.node),this.vInDiode1.connect(this.vInInverter3),this.vInDiode2.connect(this.vInInverter3),this.vInInverter3.connect(this.compressor),this.vcDiode3.connect(this.compressor),this.vcDiode4.connect(this.compressor),this.compressor.connect(this.outGain),\nthis.outGain.connect(this.wetGainNode),this.wetGainNode.connect(this.outputNode);for(var i in t)this[i]=e[i],this[i]=void 0===this[i]||null===this[i]?t[i]:this[i]};var v=function(e){this.context=e,this.node=this.context.createWaveShaper(),this.vb=.2,this.vl=.4,this.h=1,this.setCurve()};return v.prototype.setDistortion=function(e){return this.h=e,this.setCurve()},v.prototype.setCurve=function(){var e,t,i,n,o,s,a,r;for(t=1024,o=new Float32Array(t),e=s=0,a=o.length;a>=0?a>s:s>a;e=a>=0?++s:--s)i=(e-t/2)/(t/2),i=Math.abs(i),n=i<=this.vb?0:this.vb<i&&i<=this.vl?this.h*(Math.pow(i-this.vb,2)/(2*this.vl-2*this.vb)):this.h*i-this.h*this.vl+this.h*(Math.pow(this.vl-this.vb,2)/(2*this.vl-2*this.vb)),o[e]=n;return r=this.node.curve=o},v.prototype.connect=function(e){return this.node.connect(e)},o.Effects.RingModulator.prototype=Object.create(f,{mix:{enumerable:!0,get:function(){return this.options.mix},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.mix=e,this.dryGainNode.gain.value=o.Util.getDryLevel(this.mix),this.wetGainNode.gain.value=o.Util.getWetLevel(this.mix))}},speed:{enumerable:!0,get:function(){return this.options.speed},set:function(e){s.Util.isInRange(e,0,2e3)&&(this.options.speed=e,this.vIn.frequency.value=e)}},distortion:{enumerable:!0,get:function(){return this.options.distortion},set:function(e){if(s.Util.isInRange(e,.2,50)){this.options.distortion=parseFloat(e,10);for(var t=[this.vInDiode1,this.vInDiode2,this.vcDiode3,this.vcDiode4],i=0,n=t.length;n>i;i++)t[i].setDistortion(e)}}}}),o.Effects.Quadrafuzz=function(e){this.options={},e=e||this.options;var t={lowGain:.6,midLowGain:.8,midHighGain:.5,highGain:.6};this.inputNode=s.context.createGain(),this.outputNode=s.context.createGain(),this.dryGainNode=s.context.createGain(),this.wetGainNode=s.context.createGain(),this.lowpassLeft=s.context.createBiquadFilter(),this.lowpassLeft.type=\"lowpass\",this.lowpassLeft.frequency.value=147,this.lowpassLeft.Q.value=.7071,this.bandpass1Left=s.context.createBiquadFilter(),this.bandpass1Left.type=\"bandpass\",this.bandpass1Left.frequency.value=587,this.bandpass1Left.Q.value=.7071,this.bandpass2Left=s.context.createBiquadFilter(),this.bandpass2Left.type=\"bandpass\",this.bandpass2Left.frequency.value=2490,this.bandpass2Left.Q.value=.7071,this.highpassLeft=s.context.createBiquadFilter(),this.highpassLeft.type=\"highpass\",this.highpassLeft.frequency.value=4980,this.highpassLeft.Q.value=.7071,this.overdrives=[];for(var i=0;4>i;i++)this.overdrives[i]=s.context.createWaveShaper(),this.overdrives[i].curve=n();this.inputNode.connect(this.wetGainNode),this.inputNode.connect(this.dryGainNode),this.dryGainNode.connect(this.outputNode);var o=[this.lowpassLeft,this.bandpass1Left,this.bandpass2Left,this.highpassLeft];for(i=0;i<o.length;i++)this.wetGainNode.connect(o[i]),o[i].connect(this.overdrives[i]),this.overdrives[i].connect(this.outputNode);for(var a in t)this[a]=e[a],this[a]=void 0===this[a]||null===this[a]?t[a]:this[a]},o.Effects.Quadrafuzz.prototype=Object.create(f,{lowGain:{enumerable:!0,get:function(){return this.options.lowGain},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.lowGain=e,this.overdrives[0].curve=n(s.Util.normalize(this.lowGain,0,150)))}},midLowGain:{enumerable:!0,get:function(){return this.options.midLowGain},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.midLowGain=e,this.overdrives[1].curve=n(s.Util.normalize(this.midLowGain,0,150)))}},midHighGain:{enumerable:!0,get:function(){return this.options.midHighGain},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.midHighGain=e,this.overdrives[2].curve=n(s.Util.normalize(this.midHighGain,0,150)))}},highGain:{enumerable:!0,get:function(){return this.options.highGain},set:function(e){s.Util.isInRange(e,0,1)&&(this.options.highGain=e,this.overdrives[3].curve=n(s.Util.normalize(this.highGain,0,150)))}}}),o}(\"undefined\"!=typeof window?window:__webpack_require__.g);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pizzicato/distr/Pizzicato.min.js\n\n}");

/***/ }),

/***/ "./resources/assets/css/game.css":
/*!***************************************!*\
  !*** ./resources/assets/css/game.css ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2Nzcy9nYW1lLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXJhY29ubWFuLy4vcmVzb3VyY2VzL2Fzc2V0cy9jc3MvZ2FtZS5jc3M/OGE4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/css/game.css\n\n}");

/***/ }),

/***/ "./resources/assets/js/audio-handler.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/audio-handler.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var pizzicato__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pizzicato */ \"./node_modules/pizzicato/distr/Pizzicato.min.js\");\n/* harmony import */ var pizzicato__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pizzicato__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n/**\n * Audio handler for game sound effects using Pizzicato\n * Manages loading, playing, and controlling audio for the game\n */\nvar AudioHandler = /*#__PURE__*/function () {\n  function AudioHandler() {\n    var audioPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/vendor/laraconman/audio/';\n    _classCallCheck(this, AudioHandler);\n    this.sounds = new Map();\n    this.enabled = true;\n    this.volume = 0.7;\n    this.currentMusic = null;\n    this.musicLoop = null;\n    this.audioContextStarted = false;\n    if (audioPath.substr(-1) != '/') audioPath += '/';\n    this.audioPath = audioPath;\n\n    // Initialize audio files\n    this.initializeSounds();\n\n    // Try to start audio context on first user interaction\n    this.setupAudioContext();\n  }\n\n  /**\n   * Setup audio context for browser compatibility\n   */\n  return _createClass(AudioHandler, [{\n    key: \"setupAudioContext\",\n    value: function setupAudioContext() {\n      var _this = this;\n      var startAudioContext = function startAudioContext() {\n        if (!_this.audioContextStarted) {\n          // Resume or create audio context\n          if ((pizzicato__WEBPACK_IMPORTED_MODULE_0___default().context).state === 'suspended') {\n            pizzicato__WEBPACK_IMPORTED_MODULE_0___default().context.resume().then(function () {\n              _this.audioContextStarted = true;\n            });\n          } else {\n            _this.audioContextStarted = true;\n          }\n        }\n      };\n\n      // Add event listeners for user interaction\n      var events = ['click', 'keydown', 'touchstart'];\n      events.forEach(function (event) {\n        document.addEventListener(event, startAudioContext, {\n          once: true\n        });\n      });\n    }\n\n    /**\n     * Initialize and load all game sounds\n     */\n  }, {\n    key: \"initializeSounds\",\n    value: function initializeSounds() {\n      var _this2 = this;\n      var audioPath = this.audioPath;\n\n      // Define all game sounds\n      var soundDefinitions = {\n        beginning: {\n          file: 'pacman_beginning.mp3',\n          volume: 0.8,\n          loop: false\n        },\n        chomp: {\n          file: 'pacman_chomp.mp3',\n          volume: 0.6,\n          loop: false\n        },\n        death: {\n          file: 'pacman_death.mp3',\n          volume: 0.8,\n          loop: false\n        },\n        eatfruit: {\n          file: 'pacman_eatfruit.mp3',\n          volume: 0.7,\n          loop: false\n        },\n        eatghost: {\n          file: 'pacman_eatghost.mp3',\n          volume: 0.8,\n          loop: false\n        },\n        intermission: {\n          file: 'pacman_intermission.mp3',\n          volume: 0.6,\n          loop: true\n        }\n      };\n\n      // Load each sound\n      Object.entries(soundDefinitions).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          config = _ref2[1];\n        var fullPath = audioPath + config.file;\n        try {\n          var sound = new (pizzicato__WEBPACK_IMPORTED_MODULE_0___default().Sound)(fullPath, function () {\n            // Success callback\n            var soundData = _this2.sounds.get(key);\n            if (soundData) {\n              soundData.loading = false;\n              soundData.sound.volume = config.volume * _this2.volume;\n              soundData.sound.loop = config.loop;\n            }\n          }, function (error) {\n            // Error callback\n            _this2.sounds[\"delete\"](key);\n          });\n\n          // Store sound with its configuration\n          _this2.sounds.set(key, {\n            sound: sound,\n            config: config,\n            loading: true\n          });\n        } catch (error) {\n          console.error(\"Error initializing sound: \".concat(key), error);\n        }\n      });\n    }\n\n    /**\n     * Play a sound effect\n     * @param {string} soundName - Name of the sound to play\n     * @param {object} options - Optional playback options\n     */\n  }, {\n    key: \"play\",\n    value: function play(soundName) {\n      var _this3 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this.enabled) {\n        console.log(\"Audio disabled, not playing: \".concat(soundName));\n        return;\n      }\n\n      // Check audio context state\n      if ((pizzicato__WEBPACK_IMPORTED_MODULE_0___default().context).state === 'suspended') {\n        console.warn(\"Audio context suspended, attempting to resume for: \".concat(soundName));\n        pizzicato__WEBPACK_IMPORTED_MODULE_0___default().context.resume().then(function () {\n          _this3.audioContextStarted = true;\n          _this3.play(soundName, options);\n        });\n        return;\n      }\n      var soundData = this.sounds.get(soundName);\n      if (!soundData) {\n        console.warn(\"Sound not found: \".concat(soundName));\n        console.log('Available sounds:', this.getAvailableSounds());\n        return;\n      }\n      if (soundData.loading) {\n        console.warn(\"Sound still loading: \".concat(soundName, \", will retry in 100ms\"));\n        // Retry after a short delay (max 10 retries)\n        var retries = options.retries || 0;\n        if (retries < 10) {\n          setTimeout(function () {\n            return _this3.play(soundName, _objectSpread(_objectSpread({}, options), {}, {\n              retries: retries + 1\n            }));\n          }, 100);\n        } else {\n          console.error(\"Sound failed to load after 10 retries: \".concat(soundName));\n        }\n        return;\n      }\n      var sound = soundData.sound;\n      try {\n        // Stop if already playing (for non-looping sounds)\n        if (sound.playing && !soundData.config.loop) {\n          sound.stop();\n        }\n\n        // Apply any volume override\n        if (options.volume !== undefined) {\n          sound.volume = options.volume * this.volume;\n        }\n        sound.play();\n      } catch (error) {\n        console.error(\"Error playing sound: \".concat(soundName), error);\n      }\n    }\n\n    /**\n     * Stop a specific sound\n     * @param {string} soundName - Name of the sound to stop\n     */\n  }, {\n    key: \"stop\",\n    value: function stop(soundName) {\n      var soundData = this.sounds.get(soundName);\n      if (soundData && soundData.sound.playing) {\n        soundData.sound.stop();\n      }\n    }\n\n    /**\n     * Stop all currently playing sounds\n     */\n  }, {\n    key: \"stopAll\",\n    value: function stopAll() {\n      this.sounds.forEach(function (soundData) {\n        if (soundData.sound.playing) {\n          soundData.sound.stop();\n        }\n      });\n    }\n\n    /**\n     * Set master volume\n     * @param {number} volume - Volume level (0.0 to 1.0)\n     */\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(volume) {\n      var _this4 = this;\n      this.volume = Math.max(0, Math.min(1, volume));\n\n      // Update volume for all loaded sounds\n      this.sounds.forEach(function (soundData, key) {\n        if (!soundData.loading) {\n          soundData.sound.volume = soundData.config.volume * _this4.volume;\n        }\n      });\n    }\n\n    /**\n     * Enable/disable audio\n     * @param {boolean} enabled - Whether audio should be enabled\n     */\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(enabled) {\n      this.enabled = enabled;\n      if (!enabled) {\n        this.stopAll();\n      }\n    }\n\n    /**\n     * Play background music\n     * @param {string} soundName - Name of the music to play\n     */\n  }, {\n    key: \"playMusic\",\n    value: function playMusic(soundName) {\n      // Stop current music\n      if (this.currentMusic) {\n        this.stop(this.currentMusic);\n      }\n      this.currentMusic = soundName;\n      this.play(soundName);\n    }\n\n    /**\n     * Stop background music\n     */\n  }, {\n    key: \"stopMusic\",\n    value: function stopMusic() {\n      if (this.currentMusic) {\n        this.stop(this.currentMusic);\n        this.currentMusic = null;\n      }\n    }\n\n    /**\n     * Game-specific audio methods\n     */\n  }, {\n    key: \"playGameStart\",\n    value: function playGameStart() {\n      // Stop any existing music before starting\n      this.stopMusic();\n      this.currentMusic = 'beginning';\n      this.play('beginning');\n    }\n  }, {\n    key: \"playChomp\",\n    value: function playChomp() {\n      this.play('chomp');\n    }\n  }, {\n    key: \"playPlayerDeath\",\n    value: function playPlayerDeath() {\n      this.stopMusic();\n      this.play('death');\n    }\n  }, {\n    key: \"playFruitEaten\",\n    value: function playFruitEaten() {\n      this.play('eatfruit');\n    }\n  }, {\n    key: \"playGhostEaten\",\n    value: function playGhostEaten() {\n      this.play('eatghost');\n    }\n  }, {\n    key: \"playIntermission\",\n    value: function playIntermission() {\n      this.playMusic('intermission');\n    }\n\n    /**\n     * Check if a sound is currently playing\n     * @param {string} soundName - Name of the sound to check\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isPlaying\",\n    value: function isPlaying(soundName) {\n      var soundData = this.sounds.get(soundName);\n      return soundData && soundData.sound.playing;\n    }\n\n    /**\n     * Get list of available sounds\n     * @returns {string[]}\n     */\n  }, {\n    key: \"getAvailableSounds\",\n    value: function getAvailableSounds() {\n      return Array.from(this.sounds.keys());\n    }\n\n    /**\n     * Get loading status of all sounds\n     * @returns {object}\n     */\n  }, {\n    key: \"getLoadingStatus\",\n    value: function getLoadingStatus() {\n      var status = {};\n      this.sounds.forEach(function (soundData, key) {\n        status[key] = {\n          loading: soundData.loading,\n          hasSound: !!soundData.sound\n        };\n      });\n      return status;\n    }\n\n    /**\n     * Check if all sounds are loaded\n     * @returns {boolean}\n     */\n  }, {\n    key: \"allSoundsLoaded\",\n    value: function allSoundsLoaded() {\n      var _iterator = _createForOfIteratorHelper(this.sounds),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            key = _step$value[0],\n            soundData = _step$value[1];\n          if (soundData.loading) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return true;\n    }\n\n    /**\n     * Get detailed debug information\n     * @returns {object}\n     */\n  }, {\n    key: \"getDebugInfo\",\n    value: function getDebugInfo() {\n      return {\n        enabled: this.enabled,\n        volume: this.volume,\n        audioPath: this.audioPath,\n        audioContextState: (pizzicato__WEBPACK_IMPORTED_MODULE_0___default().context).state,\n        audioContextStarted: this.audioContextStarted,\n        soundsCount: this.sounds.size,\n        loadingStatus: this.getLoadingStatus(),\n        allLoaded: this.allSoundsLoaded()\n      };\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AudioHandler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/audio-handler.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/collectible-entity.js":
/*!***************************************************!*\
  !*** ./resources/assets/js/collectible-entity.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CollectibleEntity)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// CollectibleEntity: base class for dots and fruit\nvar CollectibleEntity = /*#__PURE__*/function () {\n  function CollectibleEntity(col, row) {\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'dot';\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, CollectibleEntity);\n    this.col = col;\n    this.row = row;\n    this.type = type; // 'dot', 'superdot', 'fruit', etc.\n    this.active = true;\n    this.options = options; // e.g., fruit type, points, image\n    this.eaten = false; // Add eaten state\n    this.exploding = false;\n    this.explodingAt = null;\n\n    // Animation properties\n    this.animating = false;\n    this.animationTimer = 0;\n    this.animationDuration = 30; // 0.5 seconds at 60fps\n    this.scale = 1.0;\n    this.targetScale = 1.5; // Scale up when eaten\n  }\n  return _createClass(CollectibleEntity, [{\n    key: \"startEatenAnimation\",\n    value: function startEatenAnimation() {\n      this.eaten = true;\n      this.animating = true;\n      this.animationTimer = this.animationDuration;\n    }\n  }, {\n    key: \"startExplodingAnimation\",\n    value: function startExplodingAnimation() {\n      this.exploding = true;\n      this.explodingAt = performance.now();\n    }\n  }, {\n    key: \"updateAnimation\",\n    value: function updateAnimation() {\n      if (!this.animating) return false;\n      this.animationTimer--;\n\n      // Calculate scale based on animation progress\n      var progress = (this.animationDuration - this.animationTimer) / this.animationDuration;\n      this.scale = 1.0 + (this.targetScale - 1.0) * progress;\n\n      // Animation finished\n      if (this.animationTimer <= 0) {\n        this.animating = false;\n        this.active = false; // Mark for removal\n        return true; // Animation complete\n      }\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx, tileSize, art) {\n      var _this = this;\n      if (!this.active) return;\n      if (this.type === 'dot') {\n        ctx.save();\n        ctx.fillStyle = '#fff';\n        ctx.beginPath();\n        ctx.arc(this.col * tileSize + tileSize / 2, this.row * tileSize + tileSize / 2, tileSize / 8, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.restore();\n      } else if (this.type === 'superdot') {\n        ctx.save();\n        ctx.fillStyle = '#ffd700';\n        ctx.beginPath();\n        ctx.arc(this.col * tileSize + tileSize / 2, this.row * tileSize + tileSize / 2, tileSize / 4, 0, 2 * Math.PI);\n        ctx.fill();\n        ctx.restore();\n      } else if (this.type === 'fruit') {\n        ctx.save();\n        var imgSrc = null;\n        var scale = 1;\n        // Explosion animation logic\n        if (this.exploding && this.explodingAt) {\n          var elapsed = (performance.now() - this.explodingAt) / 500; // 0.5s duration\n          scale = 1 + Math.min(elapsed, 1); // scale from 1 to 2\n          imgSrc = art && art.eatenImage ? art.eatenImage : this.options.svgEaten || null;\n        } else if (this.eaten && this.options.svgEaten) {\n          imgSrc = this.options.svgEaten;\n        } else if (this.options.svgNormal) {\n          imgSrc = this.options.svgNormal;\n        } else if (art && art.image) {\n          imgSrc = art.image;\n        }\n        if (imgSrc) {\n          var img = new window.Image();\n          img.src = imgSrc;\n          var draw = function draw() {\n            var centerX = _this.col * tileSize + tileSize / 2;\n            var centerY = _this.row * tileSize + tileSize / 2;\n            ctx.save();\n            ctx.translate(centerX, centerY);\n            ctx.scale(scale, scale);\n            ctx.drawImage(img, -tileSize / 2, -tileSize / 2, tileSize, tileSize);\n            ctx.restore();\n          };\n          img.onload = draw;\n          if (img.complete) draw();\n        } else {\n          ctx.fillStyle = '#f00';\n          ctx.beginPath();\n          ctx.arc(this.col * tileSize + tileSize / 2, this.row * tileSize + tileSize / 2, tileSize / 3 * scale, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/collectible-entity.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/collectible-spawner.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/collectible-spawner.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CollectibleSpawner)\n/* harmony export */ });\n/* harmony import */ var _collectible_entity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./collectible-entity.js */ \"./resources/assets/js/collectible-entity.js\");\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings.js */ \"./resources/assets/js/settings.js\");\n/* harmony import */ var _entity_art_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./entity-art.js */ \"./resources/assets/js/entity-art.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// CollectibleSpawner: generates dots and fruit on valid tiles\n\n\n\nvar CollectibleSpawner = /*#__PURE__*/function () {\n  function CollectibleSpawner(mapData, tileTypes) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, CollectibleSpawner);\n    this.mapData = mapData;\n    this.tileTypes = tileTypes; // { EMPTY, PORTAL, GHOST_SPAWN, GHOST_DOOR, ... }\n    this.options = options;\n  }\n\n  // Returns: { dots: [], fruit: [] }\n  return _createClass(CollectibleSpawner, [{\n    key: \"spawnCollectibles\",\n    value: function spawnCollectibles() {\n      var existingEntities = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var dots = [];\n      var fruit = [];\n      var superdots = [];\n      var occupied = new Set(existingEntities.map(function (e) {\n        return \"\".concat(e.col, \",\").concat(e.row);\n      }));\n\n      // SUPERDOTS: Place superdots at positions defined by the map (tileTypes.SUPER_DOT)\n      for (var row = 0; row < this.mapData.length; row++) {\n        for (var col = 0; col < this.mapData[0].length; col++) {\n          if (this.mapData[row][col] === this.tileTypes.SUPER_DOT && !occupied.has(\"\".concat(col, \",\").concat(row)) && !this._isInPen(col, row) && !this._isInPortalOrTunnel(col, row)) {\n            superdots.push(new _collectible_entity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](col, row, 'superdot', {\n              points: _settings_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].superDotPoints || 50\n            }));\n            occupied.add(\"\".concat(col, \",\").concat(row));\n          }\n        }\n      }\n\n      // FRUIT: Determine fruit locations FIRST before placing dots\n      var fruitMinDistance = 5;\n      var fruitCandidates = [];\n      for (var _row = 0; _row < this.mapData.length; _row++) {\n        for (var _col = 0; _col < this.mapData[0].length; _col++) {\n          if (this.mapData[_row][_col] === this.tileTypes.EMPTY && !occupied.has(\"\".concat(_col, \",\").concat(_row)) && !this._isInPen(_col, _row) && !this._isInPortalOrTunnel(_col, _row)) {\n            var tooClose = false;\n            var _iterator = _createForOfIteratorHelper(superdots),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var sd = _step.value;\n                var dx = Math.abs(_col - sd.col);\n                var dy = Math.abs(_row - sd.row);\n                if (dx + dy < fruitMinDistance) {\n                  tooClose = true;\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            if (!tooClose) {\n              fruitCandidates.push({\n                col: _col,\n                row: _row\n              });\n            }\n          }\n        }\n      }\n\n      // Spawn 2 fruit automatically\n      var fruitLocations = this.options.fruitLocations || [];\n      if (fruitLocations.length === 0) {\n        // Pick 2 random locations if we have enough candidates\n        var numFruit = Math.min(2, fruitCandidates.length);\n        var selectedLocations = [];\n        var usedIndices = new Set();\n        for (var i = 0; i < numFruit; i++) {\n          var idx = void 0;\n          do {\n            idx = Math.floor(Math.random() * fruitCandidates.length);\n          } while (usedIndices.has(idx));\n          usedIndices.add(idx);\n          selectedLocations.push(fruitCandidates[idx]);\n        }\n        fruitLocations = selectedLocations;\n      }\n\n      // Create fruit entities and mark their positions as occupied\n      for (var _i = 0; _i < fruitLocations.length; _i++) {\n        var loc = fruitLocations[_i];\n        if (loc) {\n          // Pick a random fruit type for each fruit\n          var fruitType = _entity_art_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].fruit[Math.floor(Math.random() * _entity_art_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].fruit.length)];\n          fruit.push(new _collectible_entity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](loc.col, loc.row, 'fruit', _objectSpread({}, fruitType)));\n          occupied.add(\"\".concat(loc.col, \",\").concat(loc.row));\n          console.log(\"Fruit placed at \".concat(loc.col, \",\").concat(loc.row, \" - marked as occupied\"));\n        }\n      }\n\n      // DOTS: Place dots AFTER fruit locations are determined and occupied\n      console.log('Occupied positions before placing dots:', Array.from(occupied));\n      for (var _row2 = 0; _row2 < this.mapData.length; _row2++) {\n        for (var _col2 = 0; _col2 < this.mapData[0].length; _col2++) {\n          var posKey = \"\".concat(_col2, \",\").concat(_row2);\n          if (this.mapData[_row2][_col2] === this.tileTypes.EMPTY && !occupied.has(posKey) && !this._isInPen(_col2, _row2) && !this._isInPortalOrTunnel(_col2, _row2)) {\n            dots.push(new _collectible_entity_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](_col2, _row2, 'dot', {\n              points: _settings_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dotPoints\n            }));\n          } else if (this.mapData[_row2][_col2] === this.tileTypes.EMPTY && occupied.has(posKey)) {\n            console.log(\"Skipping dot at \".concat(_col2, \",\").concat(_row2, \" - position is occupied\"));\n          }\n        }\n      }\n      return {\n        superdots: superdots,\n        dots: dots,\n        fruit: fruit\n      };\n    }\n  }, {\n    key: \"_pickRandomValidTile\",\n    value: function _pickRandomValidTile(occupied) {\n      var valid = [];\n      for (var row = 0; row < this.mapData.length; row++) {\n        for (var col = 0; col < this.mapData[0].length; col++) {\n          if (this.mapData[row][col] === this.tileTypes.EMPTY && !occupied.has(\"\".concat(col, \",\").concat(row)) && !this._isInPen(col, row) && !this._isInPortalOrTunnel(col, row)) {\n            valid.push({\n              col: col,\n              row: row\n            });\n          }\n        }\n      }\n      if (valid.length === 0) return null;\n      return valid[Math.floor(Math.random() * valid.length)];\n    }\n  }, {\n    key: \"_isInPen\",\n    value: function _isInPen(col, row) {\n      // Pen is GHOST_SPAWN or GHOST_DOOR\n      return this.mapData[row][col] === this.tileTypes.GHOST_SPAWN || this.mapData[row][col] === this.tileTypes.GHOST_DOOR;\n    }\n  }, {\n    key: \"_isInPortalOrTunnel\",\n    value: function _isInPortalOrTunnel(col, row) {\n      // Exclude portals and the empty tunnel path between them\n      if (this.mapData[row][col] === this.tileTypes.PORTAL) return true;\n      // Optionally: Exclude direct tunnel path (left/right edge)\n      if (col === 0 || col === this.mapData[0].length - 1) return true;\n      return false;\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/collectible-spawner.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/entity-art.js":
/*!*******************************************!*\
  !*** ./resources/assets/js/entity-art.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Central config for entity art assets and metadata\n// Use PNG or SVG paths (relative to public/vendor/laraconman/images/)\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  player: {\n    name: 'Player',\n    image: '/vendor/laraconman/images/pacman.png',\n    size: 32\n  },\n  ghosts: [{\n    name: 'NullPointer',\n    image: '/vendor/laraconman/images/ghost-blinky.svg',\n    size: 32\n  }, {\n    name: 'PushProduction',\n    image: '/vendor/laraconman/images/ghost-pinky.svg',\n    size: 32\n  }, {\n    name: 'Glitchy',\n    image: '/vendor/laraconman/images/ghost-inky.svg',\n    size: 32\n  }, {\n    name: 'Regexorcist',\n    image: '/vendor/laraconman/images/ghost-clyde.svg',\n    size: 32\n  }, {\n    name: 'RaceCondition',\n    image: '/vendor/laraconman/images/ghost-blinky.svg',\n    size: 32\n  }, {\n    name: 'HeapReaper',\n    image: '/vendor/laraconman/images/ghost-pinky.svg',\n    size: 32\n  }, {\n    name: 'GhostException',\n    image: '/vendor/laraconman/images/ghost-inky.svg',\n    size: 32\n  }, {\n    name: 'StackOverghost',\n    image: '/vendor/laraconman/images/ghost-clyde.svg',\n    size: 32\n  }, {\n    name: 'SyntaxTerror',\n    image: '/vendor/laraconman/images/ghost-blinky.svg',\n    size: 32\n  }],\n  dot: {\n    image: '/vendor/laraconman/images/dot.svg',\n    size: 8\n  },\n  powerPellets: [{\n    name: 'Classic',\n    image: '/vendor/laraconman/images/power-pellet-classic.svg',\n    size: 16\n  }, {\n    name: 'Star',\n    image: '/vendor/laraconman/images/power-pellet-star.svg',\n    size: 16\n  }],\n  fruit: [{\n    name: 'Nova',\n    image: '/vendor/laraconman/images/nova.svg',\n    eatenImage: '/vendor/laraconman/images/nova-explosion.svg',\n    size: 20\n  }, {\n    name: 'Filament',\n    image: '/vendor/laraconman/images/filament.png',\n    eatenImage: '/vendor/laraconman/images/filament.png',\n    size: 20\n  }]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2VudGl0eS1hcnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7O0FBRUEsaUVBQWU7RUFDWEEsTUFBTSxFQUFFO0lBQ0pDLElBQUksRUFBRSxRQUFRO0lBQ2RDLEtBQUssRUFBRSxzQ0FBc0M7SUFDN0NDLElBQUksRUFBRTtFQUNWLENBQUM7RUFDREMsTUFBTSxFQUFFLENBQ0o7SUFBRUgsSUFBSSxFQUFFLGFBQWE7SUFBS0MsS0FBSyxFQUFFLDRDQUE0QztJQUFFQyxJQUFJLEVBQUU7RUFBRyxDQUFDLEVBQ3pGO0lBQUVGLElBQUksRUFBRSxnQkFBZ0I7SUFBRUMsS0FBSyxFQUFFLDJDQUEyQztJQUFHQyxJQUFJLEVBQUU7RUFBRyxDQUFDLEVBQ3pGO0lBQUVGLElBQUksRUFBRSxTQUFTO0lBQVNDLEtBQUssRUFBRSwwQ0FBMEM7SUFBSUMsSUFBSSxFQUFFO0VBQUcsQ0FBQyxFQUN6RjtJQUFFRixJQUFJLEVBQUUsYUFBYTtJQUFLQyxLQUFLLEVBQUUsMkNBQTJDO0lBQUdDLElBQUksRUFBRTtFQUFHLENBQUMsRUFDekY7SUFBRUYsSUFBSSxFQUFFLGVBQWU7SUFBR0MsS0FBSyxFQUFFLDRDQUE0QztJQUFFQyxJQUFJLEVBQUU7RUFBRyxDQUFDLEVBQ3pGO0lBQUVGLElBQUksRUFBRSxZQUFZO0lBQU1DLEtBQUssRUFBRSwyQ0FBMkM7SUFBR0MsSUFBSSxFQUFFO0VBQUcsQ0FBQyxFQUN6RjtJQUFFRixJQUFJLEVBQUUsZ0JBQWdCO0lBQUVDLEtBQUssRUFBRSwwQ0FBMEM7SUFBSUMsSUFBSSxFQUFFO0VBQUcsQ0FBQyxFQUN6RjtJQUFFRixJQUFJLEVBQUUsZ0JBQWdCO0lBQUVDLEtBQUssRUFBRSwyQ0FBMkM7SUFBR0MsSUFBSSxFQUFFO0VBQUcsQ0FBQyxFQUN6RjtJQUFFRixJQUFJLEVBQUUsY0FBYztJQUFJQyxLQUFLLEVBQUUsNENBQTRDO0lBQUVDLElBQUksRUFBRTtFQUFHLENBQUMsQ0FDNUY7RUFDREUsR0FBRyxFQUFFO0lBQ0RILEtBQUssRUFBRSxtQ0FBbUM7SUFDMUNDLElBQUksRUFBRTtFQUNWLENBQUM7RUFDREcsWUFBWSxFQUFFLENBQ1Y7SUFBRUwsSUFBSSxFQUFFLFNBQVM7SUFBRUMsS0FBSyxFQUFFLG9EQUFvRDtJQUFFQyxJQUFJLEVBQUU7RUFBRyxDQUFDLEVBQzFGO0lBQUVGLElBQUksRUFBRSxNQUFNO0lBQUtDLEtBQUssRUFBRSxpREFBaUQ7SUFBS0MsSUFBSSxFQUFFO0VBQUcsQ0FBQyxDQUM3RjtFQUNESSxLQUFLLEVBQUUsQ0FDSDtJQUFFTixJQUFJLEVBQUUsTUFBTTtJQUFHQyxLQUFLLEVBQUUsb0NBQW9DO0lBQUVNLFVBQVUsRUFBRSw4Q0FBOEM7SUFBRUwsSUFBSSxFQUFFO0VBQUcsQ0FBQyxFQUNwSTtJQUFFRixJQUFJLEVBQUUsVUFBVTtJQUFHQyxLQUFLLEVBQUUsd0NBQXdDO0lBQUVNLFVBQVUsRUFBRSx3Q0FBd0M7SUFBRUwsSUFBSSxFQUFFO0VBQUcsQ0FBQztBQUU5SSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL3Jlc291cmNlcy9hc3NldHMvanMvZW50aXR5LWFydC5qcz8wMzA1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENlbnRyYWwgY29uZmlnIGZvciBlbnRpdHkgYXJ0IGFzc2V0cyBhbmQgbWV0YWRhdGFcbi8vIFVzZSBQTkcgb3IgU1ZHIHBhdGhzIChyZWxhdGl2ZSB0byBwdWJsaWMvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzLylcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHBsYXllcjoge1xuICAgICAgICBuYW1lOiAnUGxheWVyJyxcbiAgICAgICAgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL3BhY21hbi5wbmcnLFxuICAgICAgICBzaXplOiAzMlxuICAgIH0sXG4gICAgZ2hvc3RzOiBbXG4gICAgICAgIHsgbmFtZTogJ051bGxQb2ludGVyJywgICAgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2dob3N0LWJsaW5reS5zdmcnLCBzaXplOiAzMiB9LFxuICAgICAgICB7IG5hbWU6ICdQdXNoUHJvZHVjdGlvbicsIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9naG9zdC1waW5reS5zdmcnLCAgc2l6ZTogMzIgfSxcbiAgICAgICAgeyBuYW1lOiAnR2xpdGNoeScsICAgICAgICBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZ2hvc3QtaW5reS5zdmcnLCAgIHNpemU6IDMyIH0sXG4gICAgICAgIHsgbmFtZTogJ1JlZ2V4b3JjaXN0JywgICAgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2dob3N0LWNseWRlLnN2ZycsICBzaXplOiAzMiB9LFxuICAgICAgICB7IG5hbWU6ICdSYWNlQ29uZGl0aW9uJywgIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9naG9zdC1ibGlua3kuc3ZnJywgc2l6ZTogMzIgfSxcbiAgICAgICAgeyBuYW1lOiAnSGVhcFJlYXBlcicsICAgICBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZ2hvc3QtcGlua3kuc3ZnJywgIHNpemU6IDMyIH0sXG4gICAgICAgIHsgbmFtZTogJ0dob3N0RXhjZXB0aW9uJywgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2dob3N0LWlua3kuc3ZnJywgICBzaXplOiAzMiB9LFxuICAgICAgICB7IG5hbWU6ICdTdGFja092ZXJnaG9zdCcsIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9naG9zdC1jbHlkZS5zdmcnLCAgc2l6ZTogMzIgfSxcbiAgICAgICAgeyBuYW1lOiAnU3ludGF4VGVycm9yJywgICBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZ2hvc3QtYmxpbmt5LnN2ZycsIHNpemU6IDMyIH1cbiAgICBdLFxuICAgIGRvdDoge1xuICAgICAgICBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZG90LnN2ZycsXG4gICAgICAgIHNpemU6IDhcbiAgICB9LFxuICAgIHBvd2VyUGVsbGV0czogW1xuICAgICAgICB7IG5hbWU6ICdDbGFzc2ljJywgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL3Bvd2VyLXBlbGxldC1jbGFzc2ljLnN2ZycsIHNpemU6IDE2IH0sXG4gICAgICAgIHsgbmFtZTogJ1N0YXInLCAgICBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvcG93ZXItcGVsbGV0LXN0YXIuc3ZnJywgICAgc2l6ZTogMTYgfVxuICAgIF0sXG4gICAgZnJ1aXQ6IFtcbiAgICAgICAgeyBuYW1lOiAnTm92YScsICBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvbm92YS5zdmcnLCBlYXRlbkltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9ub3ZhLWV4cGxvc2lvbi5zdmcnLCBzaXplOiAyMCB9LFxuICAgICAgICB7IG5hbWU6ICdGaWxhbWVudCcsICBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZmlsYW1lbnQucG5nJywgZWF0ZW5JbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZmlsYW1lbnQucG5nJywgc2l6ZTogMjAgfSxcbiAgICBdXG59O1xuIl0sIm5hbWVzIjpbInBsYXllciIsIm5hbWUiLCJpbWFnZSIsInNpemUiLCJnaG9zdHMiLCJkb3QiLCJwb3dlclBlbGxldHMiLCJmcnVpdCIsImVhdGVuSW1hZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/js/entity-art.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/fx.js":
/*!***********************************!*\
  !*** ./resources/assets/js/fx.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   throttleLeading: () => (/* binding */ throttleLeading)\n/* harmony export */ });\n// further fx to come - send all ghosts to home, blow them all up, send pacman to co-ords or to a powerpill\n\n// Generic debounce utility\n// Usage: const debouncedFn = debounce(fn, wait)\nfunction debounce(fn) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n  var timeout;\n  return function () {\n    var _this = this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      return fn.apply(_this, args);\n    }, wait);\n  };\n}\nfunction throttleLeading(fn) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n  var locked = false;\n  return function () {\n    if (locked) return;\n    locked = true;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    fn.apply(this, args);\n    setTimeout(function () {\n      locked = false;\n    }, wait);\n  };\n}\n/* Quick Spin */\nfunction effect_quick_spin() {\n  movespeed = speed - 20;\n  ghostspeed = speed - 20;\n  effect_mushrooms = 1;\n  effectTimer = 60;\n  invincibility = 1;\n  document.getElementById(\"pacman-top\").style.background = \"orange\";\n  document.getElementById(\"pacman-bottom\").style.background = \"orange\";\n  wallColour(\"#6600ff\");\n  //eval (\"document.getElementById('pacman').classList.add('spin')\");\n  eval(\"document.getElementById('maze').classList.add('spin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.add('spin')\");\n  }\n}\nfunction effect_quick_spin_warn() {\n  eval(\"document.getElementById('maze').classList.remove('spin')\");\n  eval(\"document.getElementById('maze').classList.add('spin')\");\n}\nfunction effect_quick_spin_end() {\n  effect_mushrooms = 0;\n  wallColour(\"#3300ff\");\n  eval(\"document.getElementById('pacman').classList.remove('spin')\");\n  eval(\"document.getElementById('maze').classList.remove('spin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.remove('spin')\");\n  }\n  movespeed = speed;\n  ghostspeed = speed;\n  invincibility = 0;\n  document.getElementById(\"pacman-top\").style.background = \"yellow\";\n  document.getElementById(\"pacman-bottom\").style.background = \"yellow\";\n}\n\n/* Long spin */\n\nfunction effect_long_spin() {\n  movespeed = speed - 20;\n  ghostspeed = speed - 20;\n  effect_mushrooms = 1;\n  effectTimer = 150;\n  invincibility = 1;\n  document.getElementById(\"pacman-top\").style.background = \"orange\";\n  document.getElementById(\"pacman-bottom\").style.background = \"orange\";\n  wallColour(\"#6600ff\");\n  eval(\"document.getElementById('pacman').classList.add('spin')\");\n  eval(\"document.getElementById('maze').classList.add('longspin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.add('spin')\");\n  }\n}\nfunction effect_long_spin_warn() {\n  eval(\"document.getElementById('maze').classList.remove('longspin')\");\n  eval(\"document.getElementById('maze').classList.add('spin')\");\n}\nfunction effect_long_spin_end() {\n  effect_mushrooms = 0;\n  wallColour(\"#3300ff\");\n  eval(\"document.getElementById('pacman').classList.remove('spin')\");\n  eval(\"document.getElementById('maze').classList.remove('spin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.remove('spin')\");\n  }\n  movespeed = speed;\n  ghostspeed = speed;\n  invincibility = 0;\n  document.getElementById(\"pacman-top\").style.background = \"yellow\";\n  document.getElementById(\"pacman-bottom\").style.background = \"yellow\";\n}\nfunction effect_mushrooms() {\n  movespeed = speed - 20;\n  ghostspeed = speed - 20;\n  effect_mushrooms = 1;\n  effectTimer = 250;\n  invincibility = 1;\n  document.getElementById(\"pacman-top\").style.background = \"orange\";\n  document.getElementById(\"pacman-bottom\").style.background = \"orange\";\n  wallColour(\"#6600ff\");\n  eval(\"document.getElementById('pacman').classList.add('spin')\");\n  eval(\"document.getElementById('maze').classList.add('spin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.add('fastspin')\");\n  }\n}\nfunction effect_mushrooms_warn() {\n  eval(\"document.getElementById('maze').classList.remove('spin')\");\n  eval(\"document.getElementById('maze').classList.add('spin')\");\n  eval(\"document.getElementById('pacman').classList.remove('spin')\");\n  for (i = 0; i < total_ghosts; i++) {\n    eval(\"document.getElementById('ghost\" + i + \"').classList.remove('fastspin')\");\n  }\n  movespeed = speed;\n  ghostspeed = speed;\n}\nfunction effect_mushrooms_end() {\n  effect_mushrooms = 0;\n  wallColour(\"#3300ff\");\n  eval(\"document.getElementById('pacman').classList.remove('spin')\");\n  eval(\"document.getElementById('maze').classList.remove('spin')\");\n  invincibility = 0;\n  document.getElementById(\"pacman-top\").style.background = \"yellow\";\n  document.getElementById(\"pacman-bottom\").style.background = \"yellow\";\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2Z4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNPLFNBQVNBLFFBQVFBLENBQUNDLEVBQUUsRUFBYztFQUFBLElBQVpDLElBQUksR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsR0FBRztFQUNuQyxJQUFJRyxPQUFPO0VBQ1gsT0FBTyxZQUFrQjtJQUFBLElBQUFDLEtBQUE7SUFBQSxTQUFBQyxJQUFBLEdBQUFMLFNBQUEsQ0FBQUMsTUFBQSxFQUFOSyxJQUFJLE9BQUFDLEtBQUEsQ0FBQUYsSUFBQSxHQUFBRyxJQUFBLE1BQUFBLElBQUEsR0FBQUgsSUFBQSxFQUFBRyxJQUFBO01BQUpGLElBQUksQ0FBQUUsSUFBQSxJQUFBUixTQUFBLENBQUFRLElBQUE7SUFBQTtJQUNuQixJQUFJTCxPQUFPLEVBQUVNLFlBQVksQ0FBQ04sT0FBTyxDQUFDO0lBQ2xDQSxPQUFPLEdBQUdPLFVBQVUsQ0FBQztNQUFBLE9BQU1aLEVBQUUsQ0FBQ2EsS0FBSyxDQUFDUCxLQUFJLEVBQUVFLElBQUksQ0FBQztJQUFBLEdBQUVQLElBQUksQ0FBQztFQUMxRCxDQUFDO0FBQ0w7QUFDTyxTQUFTYSxlQUFlQSxDQUFDZCxFQUFFLEVBQWU7RUFBQSxJQUFiQyxJQUFJLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUk7RUFDM0MsSUFBSWEsTUFBTSxHQUFHLEtBQUs7RUFDbEIsT0FBTyxZQUFrQjtJQUNyQixJQUFJQSxNQUFNLEVBQUU7SUFDWkEsTUFBTSxHQUFHLElBQUk7SUFBQyxTQUFBQyxLQUFBLEdBQUFkLFNBQUEsQ0FBQUMsTUFBQSxFQUZDSyxJQUFJLE9BQUFDLEtBQUEsQ0FBQU8sS0FBQSxHQUFBQyxLQUFBLE1BQUFBLEtBQUEsR0FBQUQsS0FBQSxFQUFBQyxLQUFBO01BQUpULElBQUksQ0FBQVMsS0FBQSxJQUFBZixTQUFBLENBQUFlLEtBQUE7SUFBQTtJQUduQmpCLEVBQUUsQ0FBQ2EsS0FBSyxDQUFDLElBQUksRUFBRUwsSUFBSSxDQUFDO0lBQ3BCSSxVQUFVLENBQUMsWUFBTTtNQUFFRyxNQUFNLEdBQUcsS0FBSztJQUFFLENBQUMsRUFBRWQsSUFBSSxDQUFDO0VBQy9DLENBQUM7QUFDTDtBQUNBO0FBQ0EsU0FBU2lCLGlCQUFpQkEsQ0FBQSxFQUFFO0VBQ3hCQyxTQUFTLEdBQUdDLEtBQUssR0FBQyxFQUFFO0VBQ3BCQyxVQUFVLEdBQUdELEtBQUssR0FBQyxFQUFFO0VBQ3JCRSxnQkFBZ0IsR0FBQyxDQUFDO0VBQ2xCQyxXQUFXLEdBQUMsRUFBRTtFQUNkQyxhQUFhLEdBQUMsQ0FBQztFQUNmQyxRQUFRLENBQUNDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQ0MsS0FBSyxDQUFDQyxVQUFVLEdBQUMsUUFBUTtFQUMvREgsUUFBUSxDQUFDQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUNDLEtBQUssQ0FBQ0MsVUFBVSxHQUFDLFFBQVE7RUFDbEVDLFVBQVUsQ0FBQyxTQUFTLENBQUM7RUFDckI7RUFDQUMsSUFBSSxDQUFFLHVEQUF1RCxDQUFDO0VBQzlELEtBQUtDLENBQUMsR0FBQyxDQUFDLEVBQUNBLENBQUMsR0FBQ0MsWUFBWSxFQUFDRCxDQUFDLEVBQUUsRUFBQztJQUN4QkQsSUFBSSxDQUFFLGdDQUFnQyxHQUFHQyxDQUFDLEdBQUcsMEJBQTBCLENBQUM7RUFDNUU7QUFDSjtBQUVBLFNBQVNFLHNCQUFzQkEsQ0FBQSxFQUFFO0VBQzdCSCxJQUFJLENBQUUsMERBQTBELENBQUM7RUFDakVBLElBQUksQ0FBRSx1REFBdUQsQ0FBQztBQUNsRTtBQUVBLFNBQVNJLHFCQUFxQkEsQ0FBQSxFQUFFO0VBQzVCWixnQkFBZ0IsR0FBQyxDQUFDO0VBQ2xCTyxVQUFVLENBQUMsU0FBUyxDQUFDO0VBQ3JCQyxJQUFJLENBQUUsNERBQTRELENBQUM7RUFDbkVBLElBQUksQ0FBRSwwREFBMEQsQ0FBQztFQUNqRSxLQUFJQyxDQUFDLEdBQUMsQ0FBQyxFQUFDQSxDQUFDLEdBQUNDLFlBQVksRUFBQ0QsQ0FBQyxFQUFFLEVBQUM7SUFDdkJELElBQUksQ0FBRSxnQ0FBZ0MsR0FBR0MsQ0FBQyxHQUFHLDZCQUE2QixDQUFDO0VBQy9FO0VBQ0FaLFNBQVMsR0FBQ0MsS0FBSztFQUNmQyxVQUFVLEdBQUNELEtBQUs7RUFDaEJJLGFBQWEsR0FBQyxDQUFDO0VBQ2ZDLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDQyxLQUFLLENBQUNDLFVBQVUsR0FBQyxRQUFRO0VBQy9ESCxRQUFRLENBQUNDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQ0MsS0FBSyxDQUFDQyxVQUFVLEdBQUMsUUFBUTtBQUN0RTs7QUFFQTs7QUFFQSxTQUFTTyxnQkFBZ0JBLENBQUEsRUFBRTtFQUN2QmhCLFNBQVMsR0FBR0MsS0FBSyxHQUFDLEVBQUU7RUFDcEJDLFVBQVUsR0FBR0QsS0FBSyxHQUFDLEVBQUU7RUFDckJFLGdCQUFnQixHQUFDLENBQUM7RUFDbEJDLFdBQVcsR0FBQyxHQUFHO0VBQ2ZDLGFBQWEsR0FBQyxDQUFDO0VBQ2ZDLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDQyxLQUFLLENBQUNDLFVBQVUsR0FBQyxRQUFRO0VBQy9ESCxRQUFRLENBQUNDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQ0MsS0FBSyxDQUFDQyxVQUFVLEdBQUMsUUFBUTtFQUNsRUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztFQUNyQkMsSUFBSSxDQUFFLHlEQUF5RCxDQUFDO0VBQ2hFQSxJQUFJLENBQUUsMkRBQTJELENBQUM7RUFDbEUsS0FBS0MsQ0FBQyxHQUFDLENBQUMsRUFBQ0EsQ0FBQyxHQUFDQyxZQUFZLEVBQUNELENBQUMsRUFBRSxFQUFDO0lBQ3hCRCxJQUFJLENBQUUsZ0NBQWdDLEdBQUdDLENBQUMsR0FBRywwQkFBMEIsQ0FBQztFQUM1RTtBQUNKO0FBRUEsU0FBU0sscUJBQXFCQSxDQUFBLEVBQUU7RUFDNUJOLElBQUksQ0FBRSw4REFBOEQsQ0FBQztFQUNyRUEsSUFBSSxDQUFFLHVEQUF1RCxDQUFDO0FBQ2xFO0FBRUEsU0FBU08sb0JBQW9CQSxDQUFBLEVBQUU7RUFDM0JmLGdCQUFnQixHQUFDLENBQUM7RUFDbEJPLFVBQVUsQ0FBQyxTQUFTLENBQUM7RUFDckJDLElBQUksQ0FBRSw0REFBNEQsQ0FBQztFQUNuRUEsSUFBSSxDQUFFLDBEQUEwRCxDQUFDO0VBQ2pFLEtBQUlDLENBQUMsR0FBQyxDQUFDLEVBQUNBLENBQUMsR0FBQ0MsWUFBWSxFQUFDRCxDQUFDLEVBQUUsRUFBQztJQUN2QkQsSUFBSSxDQUFFLGdDQUFnQyxHQUFHQyxDQUFDLEdBQUcsNkJBQTZCLENBQUM7RUFDL0U7RUFDQVosU0FBUyxHQUFDQyxLQUFLO0VBQ2ZDLFVBQVUsR0FBQ0QsS0FBSztFQUNoQkksYUFBYSxHQUFDLENBQUM7RUFDZkMsUUFBUSxDQUFDQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUNDLEtBQUssQ0FBQ0MsVUFBVSxHQUFDLFFBQVE7RUFDL0RILFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDQyxLQUFLLENBQUNDLFVBQVUsR0FBQyxRQUFRO0FBQ3RFO0FBRUEsU0FBU04sZ0JBQWdCQSxDQUFBLEVBQUU7RUFDdkJILFNBQVMsR0FBR0MsS0FBSyxHQUFDLEVBQUU7RUFDcEJDLFVBQVUsR0FBR0QsS0FBSyxHQUFDLEVBQUU7RUFDckJFLGdCQUFnQixHQUFDLENBQUM7RUFDbEJDLFdBQVcsR0FBQyxHQUFHO0VBQ2ZDLGFBQWEsR0FBQyxDQUFDO0VBQ2ZDLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDQyxLQUFLLENBQUNDLFVBQVUsR0FBQyxRQUFRO0VBQy9ESCxRQUFRLENBQUNDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQ0MsS0FBSyxDQUFDQyxVQUFVLEdBQUMsUUFBUTtFQUNsRUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztFQUNyQkMsSUFBSSxDQUFFLHlEQUF5RCxDQUFDO0VBQ2hFQSxJQUFJLENBQUUsdURBQXVELENBQUM7RUFDOUQsS0FBS0MsQ0FBQyxHQUFDLENBQUMsRUFBQ0EsQ0FBQyxHQUFDQyxZQUFZLEVBQUNELENBQUMsRUFBRSxFQUFDO0lBQ3hCRCxJQUFJLENBQUUsZ0NBQWdDLEdBQUdDLENBQUMsR0FBRyw4QkFBOEIsQ0FBQztFQUNoRjtBQUNKO0FBRUEsU0FBU08scUJBQXFCQSxDQUFBLEVBQUU7RUFDNUJSLElBQUksQ0FBRSwwREFBMEQsQ0FBQztFQUNqRUEsSUFBSSxDQUFFLHVEQUF1RCxDQUFDO0VBQzlEQSxJQUFJLENBQUUsNERBQTRELENBQUM7RUFDbkUsS0FBSUMsQ0FBQyxHQUFDLENBQUMsRUFBQ0EsQ0FBQyxHQUFDQyxZQUFZLEVBQUNELENBQUMsRUFBRSxFQUFDO0lBQ3ZCRCxJQUFJLENBQUUsZ0NBQWdDLEdBQUdDLENBQUMsR0FBRyxpQ0FBaUMsQ0FBQztFQUNuRjtFQUNBWixTQUFTLEdBQUNDLEtBQUs7RUFDZkMsVUFBVSxHQUFDRCxLQUFLO0FBQ3BCO0FBRUEsU0FBU21CLG9CQUFvQkEsQ0FBQSxFQUFFO0VBQzNCakIsZ0JBQWdCLEdBQUMsQ0FBQztFQUNsQk8sVUFBVSxDQUFDLFNBQVMsQ0FBQztFQUNyQkMsSUFBSSxDQUFFLDREQUE0RCxDQUFDO0VBQ25FQSxJQUFJLENBQUUsMERBQTBELENBQUM7RUFDakVOLGFBQWEsR0FBQyxDQUFDO0VBQ2ZDLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDQyxLQUFLLENBQUNDLFVBQVUsR0FBQyxRQUFRO0VBQy9ESCxRQUFRLENBQUNDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQ0MsS0FBSyxDQUFDQyxVQUFVLEdBQUMsUUFBUTtBQUN0RSIsInNvdXJjZXMiOlsid2VicGFjazovL2xhcmFjb25tYW4vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2Z4LmpzP2Y4MzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZnVydGhlciBmeCB0byBjb21lIC0gc2VuZCBhbGwgZ2hvc3RzIHRvIGhvbWUsIGJsb3cgdGhlbSBhbGwgdXAsIHNlbmQgcGFjbWFuIHRvIGNvLW9yZHMgb3IgdG8gYSBwb3dlcnBpbGxcblxuLy8gR2VuZXJpYyBkZWJvdW5jZSB1dGlsaXR5XG4vLyBVc2FnZTogY29uc3QgZGVib3VuY2VkRm4gPSBkZWJvdW5jZShmbiwgd2FpdClcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmbiwgd2FpdCA9IDMwMCkge1xuICAgIGxldCB0aW1lb3V0O1xuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IGZuLmFwcGx5KHRoaXMsIGFyZ3MpLCB3YWl0KTtcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlTGVhZGluZyhmbiwgd2FpdCA9IDEwMDApIHtcbiAgICBsZXQgbG9ja2VkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKGxvY2tlZCkgcmV0dXJuO1xuICAgICAgICBsb2NrZWQgPSB0cnVlO1xuICAgICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IGxvY2tlZCA9IGZhbHNlOyB9LCB3YWl0KTtcbiAgICB9O1xufVxuLyogUXVpY2sgU3BpbiAqL1xuZnVuY3Rpb24gZWZmZWN0X3F1aWNrX3NwaW4oKXtcbiAgICBtb3Zlc3BlZWQgPSBzcGVlZC0yMDtcbiAgICBnaG9zdHNwZWVkID0gc3BlZWQtMjA7XG4gICAgZWZmZWN0X211c2hyb29tcz0xO1xuICAgIGVmZmVjdFRpbWVyPTYwO1xuICAgIGludmluY2liaWxpdHk9MTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhY21hbi10b3BcIikuc3R5bGUuYmFja2dyb3VuZD1cIm9yYW5nZVwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFjbWFuLWJvdHRvbVwiKS5zdHlsZS5iYWNrZ3JvdW5kPVwib3JhbmdlXCI7XG4gICAgd2FsbENvbG91cihcIiM2NjAwZmZcIik7XG4gICAgLy9ldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWNtYW4nKS5jbGFzc0xpc3QuYWRkKCdzcGluJylcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbiAgICBmb3IgKGk9MDtpPHRvdGFsX2dob3N0cztpKyspe1xuICAgICAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaG9zdFwiICsgaSArIFwiJykuY2xhc3NMaXN0LmFkZCgnc3BpbicpXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZWZmZWN0X3F1aWNrX3NwaW5fd2Fybigpe1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hemUnKS5jbGFzc0xpc3QucmVtb3ZlKCdzcGluJylcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0X3F1aWNrX3NwaW5fZW5kKCl7XG4gICAgZWZmZWN0X211c2hyb29tcz0wO1xuICAgIHdhbGxDb2xvdXIoXCIjMzMwMGZmXCIpO1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhY21hbicpLmNsYXNzTGlzdC5yZW1vdmUoJ3NwaW4nKVwiKTtcbiAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXplJykuY2xhc3NMaXN0LnJlbW92ZSgnc3BpbicpXCIpO1xuICAgIGZvcihpPTA7aTx0b3RhbF9naG9zdHM7aSsrKXtcbiAgICAgICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2hvc3RcIiArIGkgKyBcIicpLmNsYXNzTGlzdC5yZW1vdmUoJ3NwaW4nKVwiKTtcbiAgICB9XG4gICAgbW92ZXNwZWVkPXNwZWVkO1xuICAgIGdob3N0c3BlZWQ9c3BlZWQ7XG4gICAgaW52aW5jaWJpbGl0eT0wO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFjbWFuLXRvcFwiKS5zdHlsZS5iYWNrZ3JvdW5kPVwieWVsbG93XCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWNtYW4tYm90dG9tXCIpLnN0eWxlLmJhY2tncm91bmQ9XCJ5ZWxsb3dcIjtcbn1cblxuLyogTG9uZyBzcGluICovXG5cbmZ1bmN0aW9uIGVmZmVjdF9sb25nX3NwaW4oKXtcbiAgICBtb3Zlc3BlZWQgPSBzcGVlZC0yMDtcbiAgICBnaG9zdHNwZWVkID0gc3BlZWQtMjA7XG4gICAgZWZmZWN0X211c2hyb29tcz0xO1xuICAgIGVmZmVjdFRpbWVyPTE1MDtcbiAgICBpbnZpbmNpYmlsaXR5PTE7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWNtYW4tdG9wXCIpLnN0eWxlLmJhY2tncm91bmQ9XCJvcmFuZ2VcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhY21hbi1ib3R0b21cIikuc3R5bGUuYmFja2dyb3VuZD1cIm9yYW5nZVwiO1xuICAgIHdhbGxDb2xvdXIoXCIjNjYwMGZmXCIpO1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhY21hbicpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbiAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXplJykuY2xhc3NMaXN0LmFkZCgnbG9uZ3NwaW4nKVwiKTtcbiAgICBmb3IgKGk9MDtpPHRvdGFsX2dob3N0cztpKyspe1xuICAgICAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaG9zdFwiICsgaSArIFwiJykuY2xhc3NMaXN0LmFkZCgnc3BpbicpXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZWZmZWN0X2xvbmdfc3Bpbl93YXJuKCl7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5yZW1vdmUoJ2xvbmdzcGluJylcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0X2xvbmdfc3Bpbl9lbmQoKXtcbiAgICBlZmZlY3RfbXVzaHJvb21zPTA7XG4gICAgd2FsbENvbG91cihcIiMzMzAwZmZcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFjbWFuJykuY2xhc3NMaXN0LnJlbW92ZSgnc3BpbicpXCIpO1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hemUnKS5jbGFzc0xpc3QucmVtb3ZlKCdzcGluJylcIik7XG4gICAgZm9yKGk9MDtpPHRvdGFsX2dob3N0cztpKyspe1xuICAgICAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaG9zdFwiICsgaSArIFwiJykuY2xhc3NMaXN0LnJlbW92ZSgnc3BpbicpXCIpO1xuICAgIH1cbiAgICBtb3Zlc3BlZWQ9c3BlZWQ7XG4gICAgZ2hvc3RzcGVlZD1zcGVlZDtcbiAgICBpbnZpbmNpYmlsaXR5PTA7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWNtYW4tdG9wXCIpLnN0eWxlLmJhY2tncm91bmQ9XCJ5ZWxsb3dcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhY21hbi1ib3R0b21cIikuc3R5bGUuYmFja2dyb3VuZD1cInllbGxvd1wiO1xufVxuXG5mdW5jdGlvbiBlZmZlY3RfbXVzaHJvb21zKCl7XG4gICAgbW92ZXNwZWVkID0gc3BlZWQtMjA7XG4gICAgZ2hvc3RzcGVlZCA9IHNwZWVkLTIwO1xuICAgIGVmZmVjdF9tdXNocm9vbXM9MTtcbiAgICBlZmZlY3RUaW1lcj0yNTA7XG4gICAgaW52aW5jaWJpbGl0eT0xO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFjbWFuLXRvcFwiKS5zdHlsZS5iYWNrZ3JvdW5kPVwib3JhbmdlXCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYWNtYW4tYm90dG9tXCIpLnN0eWxlLmJhY2tncm91bmQ9XCJvcmFuZ2VcIjtcbiAgICB3YWxsQ29sb3VyKFwiIzY2MDBmZlwiKTtcbiAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWNtYW4nKS5jbGFzc0xpc3QuYWRkKCdzcGluJylcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbiAgICBmb3IgKGk9MDtpPHRvdGFsX2dob3N0cztpKyspe1xuICAgICAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaG9zdFwiICsgaSArIFwiJykuY2xhc3NMaXN0LmFkZCgnZmFzdHNwaW4nKVwiKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVmZmVjdF9tdXNocm9vbXNfd2Fybigpe1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hemUnKS5jbGFzc0xpc3QucmVtb3ZlKCdzcGluJylcIik7XG4gICAgZXZhbCAoXCJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF6ZScpLmNsYXNzTGlzdC5hZGQoJ3NwaW4nKVwiKTtcbiAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWNtYW4nKS5jbGFzc0xpc3QucmVtb3ZlKCdzcGluJylcIik7XG4gICAgZm9yKGk9MDtpPHRvdGFsX2dob3N0cztpKyspe1xuICAgICAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnaG9zdFwiICsgaSArIFwiJykuY2xhc3NMaXN0LnJlbW92ZSgnZmFzdHNwaW4nKVwiKTtcbiAgICB9XG4gICAgbW92ZXNwZWVkPXNwZWVkO1xuICAgIGdob3N0c3BlZWQ9c3BlZWQ7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdF9tdXNocm9vbXNfZW5kKCl7XG4gICAgZWZmZWN0X211c2hyb29tcz0wO1xuICAgIHdhbGxDb2xvdXIoXCIjMzMwMGZmXCIpO1xuICAgIGV2YWwgKFwiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhY21hbicpLmNsYXNzTGlzdC5yZW1vdmUoJ3NwaW4nKVwiKTtcbiAgICBldmFsIChcImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXplJykuY2xhc3NMaXN0LnJlbW92ZSgnc3BpbicpXCIpO1xuICAgIGludmluY2liaWxpdHk9MDtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhY21hbi10b3BcIikuc3R5bGUuYmFja2dyb3VuZD1cInllbGxvd1wiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFjbWFuLWJvdHRvbVwiKS5zdHlsZS5iYWNrZ3JvdW5kPVwieWVsbG93XCI7XG59Il0sIm5hbWVzIjpbImRlYm91bmNlIiwiZm4iLCJ3YWl0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidGltZW91dCIsIl90aGlzIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJ0aHJvdHRsZUxlYWRpbmciLCJsb2NrZWQiLCJfbGVuMiIsIl9rZXkyIiwiZWZmZWN0X3F1aWNrX3NwaW4iLCJtb3Zlc3BlZWQiLCJzcGVlZCIsImdob3N0c3BlZWQiLCJlZmZlY3RfbXVzaHJvb21zIiwiZWZmZWN0VGltZXIiLCJpbnZpbmNpYmlsaXR5IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiYmFja2dyb3VuZCIsIndhbGxDb2xvdXIiLCJldmFsIiwiaSIsInRvdGFsX2dob3N0cyIsImVmZmVjdF9xdWlja19zcGluX3dhcm4iLCJlZmZlY3RfcXVpY2tfc3Bpbl9lbmQiLCJlZmZlY3RfbG9uZ19zcGluIiwiZWZmZWN0X2xvbmdfc3Bpbl93YXJuIiwiZWZmZWN0X2xvbmdfc3Bpbl9lbmQiLCJlZmZlY3RfbXVzaHJvb21zX3dhcm4iLCJlZmZlY3RfbXVzaHJvb21zX2VuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/js/fx.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/game.js":
/*!*************************************!*\
  !*** ./resources/assets/js/game.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _settings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings.js */ \"./resources/assets/js/settings.js\");\n/* harmony import */ var _fx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fx.js */ \"./resources/assets/js/fx.js\");\n/* harmony import */ var _input_handler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./input-handler.js */ \"./resources/assets/js/input-handler.js\");\n/* harmony import */ var _map_renderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map-renderer.js */ \"./resources/assets/js/map-renderer.js\");\n/* harmony import */ var _player_entity_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./player-entity.js */ \"./resources/assets/js/player-entity.js\");\n/* harmony import */ var _ghost_entity_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ghost-entity.js */ \"./resources/assets/js/ghost-entity.js\");\n/* harmony import */ var pathfinding__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! pathfinding */ \"./node_modules/pathfinding/index.js\");\n/* harmony import */ var pathfinding__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(pathfinding__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _entity_art_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./entity-art.js */ \"./resources/assets/js/entity-art.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _collectible_entity_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./collectible-entity.js */ \"./resources/assets/js/collectible-entity.js\");\n/* harmony import */ var _collectible_spawner_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./collectible-spawner.js */ \"./resources/assets/js/collectible-spawner.js\");\n/* harmony import */ var _audio_handler_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./audio-handler.js */ \"./resources/assets/js/audio-handler.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n\n\n // Import PathFinding.js\n\n\n\n\n\n\n// Main game coordination using modular architecture\nvar Game = /*#__PURE__*/function () {\n  function Game() {\n    var _this = this;\n    _classCallCheck(this, Game);\n    _defineProperty(this, \"ghosts\", []);\n    this.canvas = null;\n    this.mapRenderer = null;\n    this.inputHandler = null;\n    this.gameState = 'welcome'; // gameover, welcome, stopped, playing, paused\n    this.currentMap = null;\n    this.player = null;\n\n    // Game elements initialized from settings\n    this.score = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].score;\n    this.lives = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lives;\n    this.level = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].level;\n    this.moveInc = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].moveInc;\n    this.speed = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].speed;\n    this.gameTime = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gameTime;\n    this.mazeSource = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mazeSource;\n    this.basicVision = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].basicVision;\n    this.resetModeOnResetGame = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].resetModeOnResetGame;\n    this.excludeReverseDirectionInRandomMode = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].excludeReverseDirectionInRandomMode;\n    this.fx = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fx;\n    this.extras = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].extras;\n    this.maxGhosts = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] && _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].maxGhosts || 3;\n\n    // Death message tracking\n    this.lastKillerGhost = null;\n    this.deathMessageTimer = 0;\n    this.deathMessageDuration = 180; // 3 seconds at 60fps\n\n    // Input handler: dump all input to console\n    this.inputHandler = new _input_handler_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n\n    // Initialize audio handler with path from view\n    var audioPath = window.laraconmanAudioPath || '/assets/audio/';\n    console.log(audioPath);\n    this.audioHandler = new _audio_handler_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"](audioPath);\n\n    // Make audio handler available globally for debugging\n    window.gameAudioHandler = this.audioHandler;\n    this.resetInputHandlerCallbacks();\n\n    // Initialize when DOM is ready\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', function () {\n        return _this.init();\n      });\n    } else {\n      this.init();\n    }\n\n    // Add event emitter for tile events\n    this.tileEventEmitter = new TileEventEmitter();\n    this.ghostReleaseTimer = 0;\n    this.ghostReleaseInterval = 200; // frames between releases (adjustable)\n    this.ghostPool = _toConsumableArray(_entity_art_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].ghosts); // All possible ghosts\n    this.activeGhosts = []; // Ghosts currently in play\n    this.collisionEmitter = new (events__WEBPACK_IMPORTED_MODULE_8___default())();\n    this.ghostPenTimers = new Map(); // Track time each ghost spends in pen\n    this.ghostExitTimers = new Map(); // Track how long a ghost has been trying to exit\n    this.ghostExitTimeout = 2 * 60; // 2 seconds at 60fps\n    // Ghost pen timeout (in frames, from settings)\n    this.ghostPenTimeout = (_settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ghostPenTimeout || 2) * 60;\n    this.collisionCooldowns = new Map(); // Track entity collision cooldowns\n    this.collisionCooldownFrames = 30; // Half a second at 60fps\n\n    // Portal teleportation cooldowns to prevent loops\n    this.portalCooldowns = new Map(); // Track entity portal usage\n    this.portalCooldownFrames = 30; // Half second cooldown after teleport\n\n    // Listen for superdot pickup events\n    this.tileEventEmitter.on(function (event) {\n      if (event.type === 'superdot') {\n        console.log('Superdot event triggered:', event);\n        // Set player super state\n        if (_this.player && typeof _this.player.setSuperState === 'function') {\n          _this.player.setSuperState(true);\n          setTimeout(function () {\n            _this.player.setSuperState(false);\n          }, (_settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].megaPelletDuration || 5) * 1000);\n        }\n        // For each ghost not in pen, pick a random destination away from player\n        var player = _this.player;\n        var ghosts = _this.ghosts || [];\n        var mapData = _this.mapRenderer.mapData;\n        var minDistance = 6; // tiles away from player\n        var usedSpots = new Set();\n        ghosts.forEach(function (ghost, idx) {\n          if (ghost.state !== 'in_pen' && ghost.state !== 'exiting') {\n            var tries = 0;\n            var dest;\n            do {\n              var angle = Math.random() * 2 * Math.PI;\n              var dist = minDistance + Math.floor(Math.random() * 4) + idx;\n              var col = Math.max(1, Math.min(mapData[0].length - 2, player.col + Math.round(Math.cos(angle) * dist)));\n              var row = Math.max(1, Math.min(mapData.length - 2, player.row + Math.round(Math.sin(angle) * dist)));\n              dest = {\n                col: col,\n                row: row\n              };\n              tries++;\n            } while ((mapData[dest.row][dest.col] !== _this.mapRenderer.TILES.EMPTY || usedSpots.has(\"\".concat(dest.col, \",\").concat(dest.row))) && tries < 10);\n            usedSpots.add(\"\".concat(dest.col, \",\").concat(dest.row));\n            ghost.setDestination(dest, mapData);\n            // Immediately update ghost direction and path\n            if (typeof ghost.moveToDestination === 'function') {\n              ghost.pathStep = 1;\n              ghost.moveToDestination();\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize the game\n   */\n  return _createClass(Game, [{\n    key: \"init\",\n    value: function init() {\n      this.canvas = document.getElementById('gameCanvas');\n      if (!this.canvas) {\n        console.error('Game canvas not found');\n        return;\n      }\n      this.gameState = 'welcome';\n      this.audioHandler.playGameStart();\n\n      // --- Maze rendering integration ---\n      this.level = 1;\n      this.score = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].score;\n      this.startRandomMap();\n      this.initEventListeners();\n      this.gameLoop();\n      console.log('Game initialized');\n    }\n\n    /**\n     * Utility: Parse and adapt CSV maze data from Blade\n     * Converts pass-through tunnel (4) to renderer's tunnel (5) if needed\n     */\n  }, {\n    key: \"setupUI\",\n    value:\n    /**\n     * Set up UI event listeners\n     */\n    function setupUI() {\n      var _this2 = this;\n      var startBtn = document.getElementById('startBtn');\n      var pauseBtn = document.getElementById('pauseBtn');\n      var resetBtn = document.getElementById('resetBtn');\n      if (startBtn) {\n        startBtn.addEventListener('click', function () {\n          return _this2.startGame();\n        });\n      }\n      if (pauseBtn) {\n        pauseBtn.addEventListener('click', function () {\n          return _this2.togglePause();\n        });\n      }\n      if (resetBtn) {\n        resetBtn.addEventListener('click', function () {\n          return _this2.resetGame();\n        });\n      }\n    }\n\n    /**\n     * Load map data from DOM (passed from PHP)\n     */\n  }, {\n    key: \"loadMapFromDOM\",\n    value: function loadMapFromDOM() {\n      // Look for map data in a script tag or data attribute\n      var mapDataScript = document.getElementById('mapData');\n      if (mapDataScript) {\n        try {\n          this.currentMap = JSON.parse(mapDataScript.textContent);\n          this.loadMap(this.currentMap);\n        } catch (e) {\n          console.error('Failed to parse map data:', e);\n        }\n      } else {\n        // Fallback: look for global window variable\n        if (window.gameMapData) {\n          this.currentMap = window.gameMapData;\n          this.loadMap(this.currentMap);\n        } else {\n          console.warn('No map data found. Using test map.');\n          this.loadTestMap();\n        }\n      }\n    }\n\n    /**\n     * Load a map into the renderer\n     * @param {object} mapData - Map data from database\n     */\n  }, {\n    key: \"loadMap\",\n    value: function loadMap(mapData) {\n      if (!mapData || !mapData.design) {\n        console.error('Invalid map data');\n        return;\n      }\n      console.log('Loading map:', mapData.name);\n\n      // Load map into renderer\n      this.mapRenderer.loadMap(mapData.design, mapData.width, mapData.height);\n\n      // Render the map\n      this.mapRenderer.render();\n\n      // Update UI\n      this.updateUI();\n    }\n\n    /**\n     * Load a test map for development\n     */\n  }, {\n    key: \"loadTestMap\",\n    value: function loadTestMap() {\n      var testMap = {\n        name: 'Test Map',\n        width: 19,\n        height: 21,\n        design: \"1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\\n1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1\\n1,2,1,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1\\n1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1\\n1,2,1,1,2,1,2,1,1,1,1,1,2,1,2,1,1,2,1\\n1,2,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,2,1\\n1,1,1,1,2,1,1,1,0,1,0,1,1,1,2,1,1,1,1\\n0,0,0,1,2,1,0,0,0,0,0,0,0,1,2,1,0,0,0\\n1,1,1,1,2,1,0,1,3,3,3,1,0,1,2,1,1,1,1\\n4,0,0,0,2,0,0,1,0,0,0,1,0,0,2,0,0,0,4\\n1,1,1,1,2,1,0,1,1,1,1,1,0,1,2,1,1,1,1\\n0,0,0,1,2,1,0,0,0,0,0,0,0,1,2,1,0,0,0\\n1,1,1,1,2,1,1,1,0,1,0,1,1,1,2,1,1,1,1\\n1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1\\n1,2,1,1,2,1,1,1,2,1,2,1,1,1,2,1,1,2,1\\n1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1\\n1,1,2,1,2,1,2,1,1,1,1,1,2,1,2,1,2,1,1\\n1,2,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,2,1\\n1,2,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,2,1\\n1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1\\n1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\"\n      };\n      this.currentMap = testMap;\n      this.loadMap(testMap);\n    }\n\n    /**\n     * Start the game\n     */\n  }, {\n    key: \"startGame\",\n    value: function startGame() {\n      if (this.gameState === 'stopped') {\n        this.gameState = 'playing';\n        this.updateUI();\n        console.log('Game started');\n\n        // Initialize entities if we have a map\n        if (this.mapRenderer && this.mapRenderer.mapData) {\n          this.initPlayer(this.mapRenderer.mapData, this.mapRenderer.tileSize);\n          this.initCollectibles();\n        }\n      } else if (this.gameState === 'paused') {\n        this.gameState = 'playing';\n        this.updateUI();\n        console.log('Game resumed');\n      }\n    }\n  }, {\n    key: \"resetInputHandlerCallbacks\",\n    value: function resetInputHandlerCallbacks() {\n      var _this3 = this;\n      var $this = this;\n      this.inputHandler.setCallbacks(_defineProperty(_defineProperty(_defineProperty(_defineProperty({\n        onDirectionChange: function onDirectionChange(dir) {\n          return console.log('Direction:', dir);\n        }\n      }, \"onDirectionChange\", function onDirectionChange(dir) {\n        if (_this3.player) {\n          $this.player.setDirection(dir);\n        }\n      }), \"onEnter\", function onEnter() {\n        if ($this.gameState === 'welcome') {\n          console.log('line 1');\n          /**\n           * stop welcome audio. start munching audio.\n           */\n          $this.audioHandler.stop('beginning'); // Stop the initial game start music\n          $this.gameState = 'playing';\n          return;\n        } else if ($this.gameState === 'gameover') {\n          console.log('line 2');\n          $this.restartGame();\n        } else {\n          console.log('line 3');\n          console.log($this.gameState);\n          $this.audioHandler.stopAll();\n        }\n      }), \"onPause\", function onPause() {\n        if ($this.gameState == 'paused') {\n          $this.gameState = 'playing';\n        } else if ($this.gameState == 'playing') {\n          $this.gameState = 'paused';\n          $this.audioHandler.stopAll();\n        }\n      }), \"onReset\", function onReset() {\n        if ($this.gameState === 'gameover') {\n          $this.restartGame();\n        } else {\n          console.log('Reset requested');\n        }\n      }));\n    }\n\n    /**\n     * Toggle pause state\n     */\n  }, {\n    key: \"togglePause\",\n    value: function togglePause() {\n      if (this.gameState === 'playing') {\n        this.gameState = 'paused';\n        console.log('Game paused');\n      } else if (this.gameState === 'paused') {\n        this.gameState = 'playing';\n        console.log('Game resumed');\n      }\n      this.updateUI();\n    }\n\n    /**\n     * Reset the game\n     */\n  }, {\n    key: \"resetGame\",\n    value: function resetGame() {\n      this.gameState = 'stopped';\n      this.score = 0;\n      this.lives = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lives;\n\n      // Reset input handler\n      this.inputHandler.reset();\n\n      // Reload current map\n      if (this.currentMap) {\n        this.loadMap(this.currentMap);\n      }\n      this.updateUI();\n      console.log('Game reset');\n    }\n\n    /**\n     * Restart game from game over screen\n     */\n  }, {\n    key: \"restartGame\",\n    value: function restartGame() {\n      // Reset game values\n      this.score = 0;\n      this.lives = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lives;\n\n      // Clear ghosts\n      this.ghosts = [];\n      this.activeGhosts = [];\n      this.ghostPenTimers.clear();\n      this.ghostExitTimers.clear();\n      this.collisionCooldowns.clear();\n      this.portalCooldowns.clear();\n      this.ghostReleaseTimer = 0;\n\n      // Reinitialize game components\n      this.initPlayer(this.mapRenderer.mapData, this.mapRenderer.tileSize);\n      this.initCollectibles();\n      console.log(this.gameState);\n      this.gameState = 'welcome';\n      // Update UI\n      this.updateUI();\n      console.log(this.gameState);\n      console.log('Game restarted');\n    }\n\n    /**\n     * Handle direction changes from input\n     * @param {string} direction - New movement direction\n     */\n  }, {\n    key: \"handleDirectionChange\",\n    value: function handleDirectionChange(direction) {\n      if (this.gameState !== 'playing') return;\n      console.log('Direction changed:', direction);\n      // TODO: Update player movement direction\n    }\n\n    /**\n     * Update UI elements\n     */\n  }, {\n    key: \"updateUI\",\n    value: function updateUI() {\n      // Update score and lives - show \"-\" when game is over or in welcome state\n      var scoreElement = document.getElementById('score');\n      var livesElement = document.getElementById('lives');\n      if (this.gameState === 'gameover' || this.gameState === 'welcome') {\n        if (scoreElement) {\n          scoreElement.textContent = '-';\n        }\n        if (livesElement) {\n          livesElement.textContent = '-';\n        }\n      } else {\n        if (scoreElement) {\n          scoreElement.textContent = this.score;\n        }\n        if (livesElement) {\n          livesElement.textContent = this.lives;\n        }\n      }\n\n      // Update button states\n      var startBtn = document.getElementById('startBtn');\n      var pauseBtn = document.getElementById('pauseBtn');\n      if (startBtn) {\n        startBtn.textContent = this.gameState === 'stopped' ? 'Start Game' : 'Resume';\n        startBtn.disabled = this.gameState === 'playing';\n      }\n      if (pauseBtn) {\n        pauseBtn.textContent = this.gameState === 'paused' ? 'Resume' : 'Pause';\n        pauseBtn.disabled = this.gameState === 'stopped';\n      }\n    }\n\n    /**\n     * Get current game state\n     * @returns {string} Current game state\n     */\n  }, {\n    key: \"getGameState\",\n    value: function getGameState() {\n      return this.gameState;\n    }\n\n    /**\n     * Get current map data\n     * @returns {object} Current map data\n     */\n  }, {\n    key: \"getCurrentMap\",\n    value: function getCurrentMap() {\n      return this.currentMap;\n    }\n\n    /**\n     * Initialize player entity\n     * @param {array} mapData - Map data\n     * @param {number} tileSize - Tile size\n     */\n  }, {\n    key: \"initPlayer\",\n    value: function initPlayer(mapData, tileSize) {\n      // Find ghost pen tiles\n      var penTiles = [];\n      for (var r = 0; r < mapData.length; r++) {\n        for (var c = 0; c < mapData[0].length; c++) {\n          if (mapData[r][c] === this.mapRenderer.TILES.GHOST_SPAWN) {\n            penTiles.push({\n              col: c,\n              row: r\n            });\n          }\n        }\n      }\n      // Find center-most tile below the pen that is EMPTY\n      var playerStart = {\n        col: 1,\n        row: 1\n      };\n      if (penTiles.length > 0) {\n        // Compute center col of pen\n        var penCols = penTiles.map(function (t) {\n          return t.col;\n        });\n        var penRows = penTiles.map(function (t) {\n          return t.row;\n        });\n        var minCol = Math.min.apply(Math, _toConsumableArray(penCols)),\n          maxCol = Math.max.apply(Math, _toConsumableArray(penCols));\n        var centerCol = Math.round((minCol + maxCol) / 2);\n        // Search downward from just below pen, only at centerCol\n        for (var _r = Math.max.apply(Math, _toConsumableArray(penRows)) + 1; _r < mapData.length - 1; _r++) {\n          if (mapData[_r][centerCol] === this.mapRenderer.TILES.EMPTY) {\n            playerStart = {\n              col: centerCol,\n              row: _r\n            };\n            break;\n          }\n        }\n      } else {\n        // fallback to old logic\n        outer: for (var _r2 = 1; _r2 < mapData.length - 1; _r2++) {\n          for (var _c = 1; _c < mapData[0].length - 1; _c++) {\n            if (mapData[_r2][_c] === 0) {\n              playerStart = {\n                col: _c,\n                row: _r2\n              };\n              break outer;\n            }\n          }\n        }\n      }\n      var speed = 2;\n      this.player = new _player_entity_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](playerStart.col, playerStart.row, tileSize, mapData, _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n      this.resetInputHandlerCallbacks();\n    }\n\n    /**\n     * --- COLLISION DETECTION: ALL COLLISION LOGIC HERE ---\n     * Check for item collision and emit event\n     */\n  }, {\n    key: \"checkCollisions\",\n    value: function checkCollisions(entity) {\n      if (!entity.hasMovedFromSpawn) {\n        return;\n      }\n\n      // Ghost collision\n      var _iterator = _createForOfIteratorHelper(this.ghosts),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ghost = _step.value;\n          if (ghost.col === entity.col && ghost.row === entity.row) {\n            if (entity.state == 'normal') {\n              // Player is not super: lose a life, respawn, etc.\n              var points = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].playerDeathPoints || 0; // Usually 0 for player death\n              this.collisionEmitter.emit('player-eaten', {\n                player: entity,\n                ghost: ghost,\n                points: points\n              });\n            } else {\n              var _ghost$options;\n              // Player is super: eat the ghost, award points\n              var _points = ((_ghost$options = ghost.options) === null || _ghost$options === void 0 ? void 0 : _ghost$options.points) || _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ghostPoints || 200;\n              this.collisionEmitter.emit('ghost-eaten', {\n                player: entity,\n                ghost: ghost,\n                points: _points\n              });\n              this.score += _points;\n            }\n            this.updateUI && this.updateUI();\n            return;\n          }\n        }\n        // Fruit collision\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(this.fruit || []),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var fruit = _step2.value;\n          if (fruit.col === entity.col && fruit.row === entity.row && !fruit.eaten && !fruit.animating) {\n            fruit.type = this.mapRenderer.TILES.FRUIT;\n            this.collisionEmitter.emit('collision-consumable', {\n              player: entity,\n              consumed: fruit\n            });\n            return;\n          }\n        }\n        // Dot collision\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      for (var i = this.dots.length - 1; i >= 0; i--) {\n        var sprite = this.dots[i];\n        if (sprite.col === entity.col && sprite.row === entity.row) {\n          // Handle dot collision (fire event, remove dot, etc.)\n          sprite.type = this.mapRenderer.TILES.DOT;\n          this.collisionEmitter.emit('collision-consumable', {\n            player: entity,\n            consumed: sprite\n          });\n          return;\n        }\n      }\n      // Superdot collision\n      if (this.superdots && this.superdots.length) {\n        for (var _i = this.superdots.length - 1; _i >= 0; _i--) {\n          var _sprite = this.superdots[_i];\n          if (_sprite.col === entity.col && _sprite.row === entity.row) {\n            //                    console.log('superdot collision');\n            // Handle superdot collision\n            _sprite.type = this.mapRenderer.TILES.SUPER_DOT;\n            this.collisionEmitter.emit('collision-consumable', {\n              player: entity,\n              consumed: _sprite\n            });\n            return;\n          }\n        }\n      }\n\n      // Portal collision\n      var tile = this.mapRenderer.mapData[entity.row][entity.col];\n      if (tile === this.mapRenderer.TILES.PORTAL) {\n        var entityType = entity.type;\n        var portalKey = \"\".concat(entityType, \":portal:\").concat(entity.col, \",\").concat(entity.row);\n        var cooldown = this.portalCooldowns.get(portalKey) || 0;\n        if (cooldown === 0) {\n          var dest = this.findOppositePortal(entity.col, entity.row);\n          if (dest) {\n            // Set cooldown for both entry and exit portal\n            var destKey = \"\".concat(entityType, \":portal:\").concat(dest.col, \",\").concat(dest.row);\n            this.portalCooldowns.set(portalKey, this.portalCooldownFrames);\n            this.portalCooldowns.set(destKey, this.portalCooldownFrames);\n            // Move entity one block away from portal exit toward map center\n            var dCol = 0,\n              dRow = 0;\n            var centerCol = Math.floor(this.mapRenderer.mapData[0].length / 2);\n            if (dest.col < centerCol) dCol = 1;else if (dest.col > centerCol) dCol = -1;\n            // If vertical tunnel, bias row\n            var centerRow = Math.floor(this.mapRenderer.mapData.length / 2);\n            if (dest.row < centerRow) dRow = 1;else if (dest.row > centerRow) dRow = -1;\n            var newCol = dest.col + dCol;\n            var newRow = dest.row + dRow;\n            // Only move if new tile is walkable\n            var walkable = [this.mapRenderer.TILES.EMPTY, this.mapRenderer.TILES.DOT, this.mapRenderer.TILES.SUPER_DOT];\n            if (newCol >= 0 && newCol < this.mapRenderer.mapData[0].length && newRow >= 0 && newRow < this.mapRenderer.mapData.length && walkable.includes(this.mapRenderer.mapData[newRow][newCol])) {\n              this.teleportEntity(entity, {\n                col: newCol,\n                row: newRow\n              });\n              // Set cooldown for the ejection tile as well\n              var ejectionKey = \"\".concat(entityType, \":portal:\").concat(newCol, \",\").concat(newRow);\n              this.portalCooldowns.set(ejectionKey, this.portalCooldownFrames);\n            } else {\n              this.teleportEntity(entity, dest);\n            }\n            // Emit appropriate event\n            var col = entity.col,\n              row = entity.row;\n            if (entityType === 'player') {\n              if (dCol !== 0) col += dCol;\n              this.collisionEmitter.emit('player-portal', {\n                player: entity,\n                from: {\n                  col: col,\n                  row: row\n                },\n                to: dest\n              });\n            } else if (entityType === 'ghost') {\n              this.collisionEmitter.emit('ghost-portal', {\n                ghost: entity,\n                from: {\n                  col: col,\n                  row: row\n                },\n                to: dest\n              });\n              entity.destination = null;\n              entity.path = null;\n              entity.pathStep = 0;\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Spawn a ghost at a random ghost spawn tile INSIDE THE PEN\n     */\n  }, {\n    key: \"spawnGhost\",\n    value: function spawnGhost() {\n      if (this.ghosts.length >= this.maxGhosts) return;\n      if (this.gameState !== 'playing') return; // Don't spawn when paused or stopped\n\n      // Find all ghost spawn tiles inside the pen (classic: 2 rows x 4 cols above door)\n      var spawns = [];\n      var data = this.mapRenderer.mapData;\n      for (var r = 0; r < data.length; r++) {\n        for (var c = 0; c < data[0].length; c++) {\n          if (data[r][c] === this.mapRenderer.TILES.GHOST_SPAWN) spawns.push({\n            col: c,\n            row: r\n          });\n        }\n      }\n      if (spawns.length === 0) return;\n      // Pick a random pen tile for each new ghost\n      var idx = Math.floor(Math.random() * spawns.length);\n      var spawn = spawns[idx];\n      var usedNames = this.activeGhosts.map(function (g) {\n        return g.name;\n      });\n      var available = this.ghostPool.filter(function (g) {\n        return !usedNames.includes(g.name);\n      });\n      if (available.length === 0 || this.ghosts.length >= this.maxGhosts) return;\n      var ghostConfig = available[Math.floor(Math.random() * available.length)];\n      var ghostSpeed = 2;\n      var ghostColor = ghostConfig.color || '#FF0000';\n      var ghost = new _ghost_entity_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](spawn.col, spawn.row, this.mapRenderer.tileSize, this.mapRenderer.mapData, ghostSpeed, ghostColor, this.mapRenderer.TILES);\n      ghost.image = ghostConfig.image;\n      ghost.displayName = ghostConfig.name;\n      this.ghosts.push(ghost);\n      this.activeGhosts.push(ghostConfig);\n    }\n\n    /**\n     * Move ghosts with pathfinding to a random destination outside the pen\n     */\n  }, {\n    key: \"moveGhosts\",\n    value: function moveGhosts() {\n      var _this4 = this;\n      if (this.gameState !== 'playing') {\n        return; // Don't move ghosts when stopped or paused\n      }\n      var data = this.mapRenderer.mapData;\n      var penTiles = [];\n      for (var r = 0; r < data.length; r++) {\n        for (var c = 0; c < data[0].length; c++) {\n          if (data[r][c] === this.mapRenderer.TILES.GHOST_SPAWN) penTiles.push(\"\".concat(c, \",\").concat(r));\n        }\n      }\n      var _iterator3 = _createForOfIteratorHelper(this.ghosts),\n        _step3;\n      try {\n        var _loop = function _loop() {\n          var ghost = _step3.value;\n          if (ghost.state === 'in_pen') {\n            // Move randomly within pen\n            var dirs = ['up', 'down', 'left', 'right'].filter(function (dir) {\n              return ghost.canMove(dir);\n            });\n            if (dirs.length > 0) {\n              var dir = dirs[Math.floor(Math.random() * dirs.length)];\n              ghost.setDirection(dir);\n            }\n            // Fallback: force-evict after timeout\n            var t = _this4.ghostPenTimers.get(ghost) || 0;\n            _this4.ghostPenTimers.set(ghost, t + 1);\n            if (t + 1 > _this4.ghostPenTimeout) {\n              ghost.setState('exiting');\n              _this4.ghostPenTimers[\"delete\"](ghost);\n              // Pick a destination OUTSIDE the pen ONLY if not already set\n              if (!ghost.destination) {\n                var candidates = [];\n                for (var _r3 = 0; _r3 < data.length; _r3++) {\n                  for (var _c2 = 0; _c2 < data[0].length; _c2++) {\n                    var tile = data[_r3][_c2];\n                    if ((tile === _this4.mapRenderer.TILES.EMPTY || tile === _this4.mapRenderer.TILES.DOT || tile === _this4.mapRenderer.TILES.SUPER_DOT) && !penTiles.includes(\"\".concat(_c2, \",\").concat(_r3)) && !(ghost.col === _c2 && ghost.row === _r3)) {\n                      candidates.push({\n                        col: _c2,\n                        row: _r3\n                      });\n                    }\n                  }\n                }\n                if (candidates.length > 0) {\n                  var dest = candidates[Math.floor(Math.random() * candidates.length)];\n                  ghost.setDestination(dest, data);\n                }\n              }\n              ghost.moveToDestination();\n            } else {\n              ghost.move();\n            }\n          } else if (ghost.state === 'exiting') {\n            // Always move to destination if exiting\n            ghost.moveToDestination();\n            if (ghost.atDestination() && !penTiles.includes(\"\".concat(ghost.col, \",\").concat(ghost.row))) {\n              ghost.setState('active');\n            }\n          } else if (ghost.state === 'active') {\n            // If ghost is active and has no destination or has reached its destination, pick a new one\n            if (!ghost.destination || ghost.atDestination()) {\n              var _candidates = [];\n              for (var _r4 = 0; _r4 < data.length; _r4++) {\n                for (var _c3 = 0; _c3 < data[0].length; _c3++) {\n                  var _tile = data[_r4][_c3];\n                  if ((_tile === _this4.mapRenderer.TILES.EMPTY || _tile === _this4.mapRenderer.TILES.DOT || _tile === _this4.mapRenderer.TILES.SUPER_DOT) && !penTiles.includes(\"\".concat(_c3, \",\").concat(_r4))) {\n                    _candidates.push({\n                      col: _c3,\n                      row: _r4\n                    });\n                  }\n                }\n              }\n              if (_candidates.length > 0) {\n                var _dest = _candidates[Math.floor(Math.random() * _candidates.length)];\n                ghost.setDestination(_dest, data);\n              }\n            }\n            ghost.moveToDestination();\n          } else {\n            _this4.ghostPenTimers[\"delete\"](ghost);\n            ghost.move();\n          }\n        };\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n\n    /**\n     * Game loop only\n     */\n  }, {\n    key: \"oldGameLoop\",\n    value: function oldGameLoop() {\n      var _this5 = this;\n      this.mapRenderer.render();\n      this.renderCollectibles(this.mapRenderer.ctx);\n      if (this.player) {\n        this.player.render(this.mapRenderer.ctx, _entity_art_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n        if (this.gameState == 'playing') {\n          this.player.move();\n          this.checkCollisions(this.player);\n        }\n      }\n      if (this.gameState === 'welcome') {\n        this.drawWelcomeScreen();\n      } else if (this.gameState === 'gameover') {\n        this.drawGameOverScreen();\n      } else if (this.gameState == 'highscore') {\n        alert('even more bad words');\n      } else if (this.gameState === 'paused') {\n        // When paused, still render ghosts but don't move or spawn them\n        var _iterator4 = _createForOfIteratorHelper(this.ghosts),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var ghost = _step4.value;\n            ghost.render(this.mapRenderer.ctx);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        this.drawOverlay('PAUSED', 'Press P to Resume');\n      } else {\n        // Only move and spawn ghosts when playing\n        this.moveGhosts();\n        var _iterator5 = _createForOfIteratorHelper(this.ghosts),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _ghost = _step5.value;\n            _ghost.render(this.mapRenderer.ctx);\n          }\n\n          // Ghost release logic\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        this.ghostReleaseTimer++;\n        if (this.ghostReleaseTimer >= this.ghostReleaseInterval) {\n          this.spawnGhost();\n          this.ghostReleaseTimer = 0;\n        }\n\n        // Update collision cooldowns\n        this.updateCollisionCooldowns();\n      }\n      requestAnimationFrame(function () {\n        return _this5.gameLoop();\n      });\n    }\n  }, {\n    key: \"drawWelcomeScreen\",\n    value: function drawWelcomeScreen() {\n      this.drawOverlay('WakaWaka', 'Press Enter to Start');\n    }\n  }, {\n    key: \"drawPauseScreen\",\n    value: function drawPauseScreen() {\n      this.drawOverlay('PAUSED', 'Press P to Resume');\n    }\n  }, {\n    key: \"drawGameOverScreen\",\n    value: function drawGameOverScreen() {\n      var ctx = this.mapRenderer.ctx;\n      ctx.save();\n      ctx.globalAlpha = 0.9;\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.globalAlpha = 1.0;\n      ctx.fillStyle = '#ff0000';\n      ctx.font = 'bold 48px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('GAME OVER', ctx.canvas.width / 2, ctx.canvas.height / 2 - 60);\n      ctx.fillStyle = 'white';\n      ctx.font = '24px Arial';\n      ctx.fillText(\"Final Score: \".concat(this.score), ctx.canvas.width / 2, ctx.canvas.height / 2 - 10);\n      ctx.font = '20px Arial';\n      ctx.fillText('Press R to Restart', ctx.canvas.width / 2, ctx.canvas.height / 2 + 30);\n      ctx.restore();\n    }\n  }, {\n    key: \"drawOverlay\",\n    value: function drawOverlay(title, subtitle) {\n      var ctx = this.mapRenderer.ctx;\n      ctx.save();\n      ctx.globalAlpha = 0.8;\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.globalAlpha = 1.0;\n      ctx.fillStyle = 'white';\n      ctx.font = 'bold 32px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(title, ctx.canvas.width / 2, ctx.canvas.height / 2 - 20);\n      ctx.font = '24px Arial';\n      ctx.fillText(subtitle, ctx.canvas.width / 2, ctx.canvas.height / 2 + 30);\n      ctx.restore();\n    }\n  }, {\n    key: \"drawDeathMessage\",\n    value: function drawDeathMessage() {\n      if (this.deathMessageTimer <= 0 || !this.lastKillerGhost) return;\n      var ctx = this.mapRenderer.ctx;\n      ctx.save();\n\n      // Semi-transparent background\n      ctx.globalAlpha = 0.9;\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n      // Death message\n      ctx.globalAlpha = 1.0;\n      ctx.fillStyle = '#ff0000';\n      ctx.font = 'bold 36px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('ELIMINATED BY', ctx.canvas.width / 2, ctx.canvas.height / 2 - 30);\n      ctx.fillStyle = '#ffff00';\n      ctx.font = 'bold 28px Arial';\n      ctx.fillText(this.lastKillerGhost, ctx.canvas.width / 2, ctx.canvas.height / 2 + 10);\n\n      // Fade effect based on remaining time\n      var fadeRatio = this.deathMessageTimer / this.deathMessageDuration;\n      ctx.globalAlpha = fadeRatio;\n      ctx.restore();\n    }\n  }, {\n    key: \"renderCollectibles\",\n    value: function renderCollectibles(ctx) {\n      var _this6 = this;\n      if (this.fruit) this.fruit.forEach(function (fruit) {\n        // Find the correct art based on the fruit's name\n        var artForFruit = _entity_art_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].fruit.find(function (art) {\n          return art.name === fruit.options.name;\n        });\n        fruit.render(ctx, _this6.mapRenderer.tileSize, artForFruit);\n      });\n      if (this.dots) this.dots.forEach(function (dot) {\n        return dot.render(ctx, _this6.mapRenderer.tileSize);\n      });\n    }\n  }, {\n    key: \"updateCollectibleAnimations\",\n    value: function updateCollectibleAnimations() {\n      if (this.fruit) {\n        // Update fruit animations and remove completed ones\n        this.fruit = this.fruit.filter(function (fruit) {\n          fruit.updateAnimation();\n          return fruit.active; // Keep only active fruits\n        });\n      }\n    }\n    /**\n     * Get everything at a specific coordinate\n     */\n  }, {\n    key: \"getWhatIsAt\",\n    value: function getWhatIsAt(col, row) {\n      var result = {\n        tile: this.mapRenderer.mapData[row] ? this.mapRenderer.mapData[row][col] : null,\n        entities: []\n      };\n\n      // Check for other entities at this position\n      if (this.player && this.player.col === col && this.player.row === row) {\n        result.entities.push({\n          type: 'player',\n          entity: this.player\n        });\n      }\n      var _iterator6 = _createForOfIteratorHelper(this.ghosts),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var ghost = _step6.value;\n          if (ghost.col === col && ghost.row === row) {\n            result.entities.push({\n              type: 'ghost',\n              entity: ghost\n            });\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      if (this.pellets) {\n        var _iterator7 = _createForOfIteratorHelper(this.pellets),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var pellet = _step7.value;\n            if (pellet.col === col && pellet.row === row) {\n              result.entities.push({\n                type: 'pellet',\n                entity: pellet\n              });\n            }\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n      if (this.fruits) {\n        var _iterator8 = _createForOfIteratorHelper(this.fruits),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var fruit = _step8.value;\n            if (fruit.col === col && fruit.row === row) {\n              result.entities.push({\n                type: 'fruit',\n                entity: fruit\n              });\n            }\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Fire collision events for entity hitting something\n     */\n  }, {\n    key: \"fireCollisionEvents\",\n    value: function fireCollisionEvents(entity, collisions) {\n      var entityType = this.getEntityType(entity);\n\n      // Handle entity vs entity collisions\n      var _iterator9 = _createForOfIteratorHelper(collisions.entities),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var collision = _step9.value;\n          if (collision.entity === entity) continue; // Don't collide with self\n\n          var key = \"\".concat(entityType, \":\").concat(collision.type, \":\").concat(collision.entity.id || collision.entity.displayName || collision.entity.color);\n          if (entityType == 'ghost' && collision.type === 'ghost') {\n            return;\n          }\n          if (entityType === 'ghost' && collision.type === 'player') {\n            /**\n             * We ignore this one.\n             */\n            return;\n          } else if (entityType === 'player' && collision.type === 'ghost') {\n            // Player collided with ghost\n            var isSuper = typeof entity.isSuperState === 'function' ? entity.isSuperState() : false;\n            if (isSuper) {\n              var _collision$entity$opt;\n              console.log('super user');\n              // Player wins: ghost should go to pen, award points\n              var points = ((_collision$entity$opt = collision.entity.options) === null || _collision$entity$opt === void 0 ? void 0 : _collision$entity$opt.points) || _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ghostPoints || 200;\n              this.collisionEmitter.emit('ghost-eaten', {\n                player: entity,\n                ghost: collision.entity,\n                points: points\n              });\n            } else {\n              console.log('ghosty!');\n              // Ghost wins: player should respawn, lose life\n              var _points2 = _settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].playerDeathPoints || 0; // Usually 0 for player death\n              this.collisionEmitter.emit('player-eaten', {\n                player: entity,\n                ghost: collision.entity,\n                points: _points2\n              });\n            }\n            this.setEventCooldown(key);\n            continue;\n          }\n          if (this.shouldFireEvent(key)) {\n            this.collisionEmitter.emit(\"\".concat(entityType, \"-\").concat(collision.type), _defineProperty(_defineProperty({}, entityType, entity), collision.type, collision.entity));\n            this.setEventCooldown(key);\n          } else {\n            console.log(key);\n          }\n        }\n        // Handle tile collisions (portals, collectibles on map)\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      if (collisions.tile) {\n        this.handleTileCollision(entity, collisions.tile, entity.col, entity.row);\n      }\n    }\n\n    /**\n     * Teleport entity to destination\n     */\n  }, {\n    key: \"teleportEntity\",\n    value: function teleportEntity(entity, dest) {\n      entity.col = dest.col;\n      entity.row = dest.row;\n      entity.x = dest.col * entity.tileSize;\n      entity.y = dest.row * entity.tileSize;\n      entity.targetX = entity.x;\n      entity.targetY = entity.y;\n      entity.moving = false;\n    }\n\n    /**\n     * Get entity type string\n     */\n  }, {\n    key: \"getEntityType\",\n    value: function getEntityType(entity) {\n      if (entity === this.player) return 'player';\n      if (this.ghosts.includes(entity)) return 'ghost';\n      return 'unknown';\n    }\n\n    /**\n     * Check if event should fire (not in cooldown)\n     */\n  }, {\n    key: \"shouldFireEvent\",\n    value: function shouldFireEvent(key) {\n      var cooldown = this.collisionCooldowns.get(key) || 0;\n      return cooldown === 0;\n    }\n\n    /**\n     * Set event cooldown\n     */\n  }, {\n    key: \"setEventCooldown\",\n    value: function setEventCooldown(key) {\n      this.collisionCooldowns.set(key, this.collisionCooldownFrames);\n    }\n\n    /**\n     * Update collision cooldowns each frame\n     */\n  }, {\n    key: \"updateCollisionCooldowns\",\n    value: function updateCollisionCooldowns() {\n      // Decrement collision cooldowns\n      var _iterator0 = _createForOfIteratorHelper(this.collisionCooldowns.entries()),\n        _step0;\n      try {\n        for (_iterator0.s(); !(_step0 = _iterator0.n()).done;) {\n          var _step0$value = _slicedToArray(_step0.value, 2),\n            key = _step0$value[0],\n            value = _step0$value[1];\n          if (value > 0) {\n            this.collisionCooldowns.set(key, value - 1);\n          }\n        }\n        // Decrement portal cooldowns\n      } catch (err) {\n        _iterator0.e(err);\n      } finally {\n        _iterator0.f();\n      }\n      var _iterator1 = _createForOfIteratorHelper(this.portalCooldowns.entries()),\n        _step1;\n      try {\n        for (_iterator1.s(); !(_step1 = _iterator1.n()).done;) {\n          var _step1$value = _slicedToArray(_step1.value, 2),\n            _key = _step1$value[0],\n            _value = _step1$value[1];\n          if (_value > 0) {\n            this.portalCooldowns.set(_key, _value - 1);\n          }\n        }\n      } catch (err) {\n        _iterator1.e(err);\n      } finally {\n        _iterator1.f();\n      }\n    }\n\n    // Find the portal/tunnel tile on the opposite side\n  }, {\n    key: \"findOppositePortal\",\n    value: function findOppositePortal(col, row) {\n      var portals = [];\n      var map = this.mapRenderer.mapData;\n      for (var r = 0; r < map.length; r++) {\n        for (var c = 0; c < map[0].length; c++) {\n          if (map[r][c] === this.mapRenderer.TILES.PORTAL && (c !== col || r !== row)) {\n            portals.push({\n              col: c,\n              row: r\n            });\n          }\n        }\n      }\n      if (portals.length === 0) return null;\n      if (portals.length === 1) return portals[0];\n      // Try to match by row (left/right tunnels)\n      for (var _i2 = 0, _portals = portals; _i2 < _portals.length; _i2++) {\n        var p = _portals[_i2];\n        if (p.row === row) return p;\n      }\n      // If not found, try to match by column (top/bottom tunnels)\n      for (var _i3 = 0, _portals2 = portals; _i3 < _portals2.length; _i3++) {\n        var _p = _portals2[_i3];\n        if (_p.col === col) return _p;\n      }\n      // Fallback: pick the farthest (classic Pac-Man: left/right edge)\n      var maxDist = -1,\n        best = null;\n      for (var _i4 = 0, _portals3 = portals; _i4 < _portals3.length; _i4++) {\n        var _p2 = _portals3[_i4];\n        var dist = Math.abs(_p2.col - col) + Math.abs(_p2.row - row);\n        if (dist > maxDist) {\n          maxDist = dist;\n          best = _p2;\n        }\n      }\n      return best;\n    }\n\n    // Helper: bounding-box collision for entities\n  }, {\n    key: \"isEntityColliding\",\n    value: function isEntityColliding(a, b) {\n      var size = Math.min(a.tileSize, b.tileSize) * 0.6; // 60% of tile size for hitbox\n      return Math.abs(a.x - b.x) < size && Math.abs(a.y - b.y) < size;\n    }\n  }, {\n    key: \"setScore\",\n    value: function setScore(val) {\n      this.score = val;\n      console.log('Score updated:', val);\n      this.updateUI && this.updateUI();\n    }\n  }, {\n    key: \"getScore\",\n    value: function getScore() {\n      return this.score;\n    }\n\n    /**\n     * Game loop 2 wtf\n     */\n  }, {\n    key: \"gameLoop\",\n    value: function gameLoop() {\n      var _this7 = this;\n      this.mapRenderer.render();\n\n      // Update collectible animations\n      this.updateCollectibleAnimations();\n      this.renderCollectibles(this.mapRenderer.ctx);\n      if (this.player) {\n        this.player.render(this.mapRenderer.ctx, _entity_art_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n        if (this.gameState == 'playing' && this.deathMessageTimer <= 0) {\n          this.player.move();\n          this.checkCollisions(this.player);\n        }\n      }\n      if (this.gameState === 'welcome') {\n        this.drawWelcomeScreen();\n      } else if (this.gameState === 'paused') {\n        // When paused, still render ghosts but don't move or spawn them\n        var _iterator10 = _createForOfIteratorHelper(this.ghosts),\n          _step10;\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var ghost = _step10.value;\n            ghost.render(this.mapRenderer.ctx);\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n        this.drawPauseScreen();\n      } else if (this.gameState === 'gameover') {\n        this.drawGameOverScreen();\n      } else if (this.gameState == 'highscore') {} else {\n        // Only move and spawn ghosts when playing\n        this.moveGhosts();\n        var _iterator11 = _createForOfIteratorHelper(this.ghosts),\n          _step11;\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var _ghost2 = _step11.value;\n            _ghost2.render(this.mapRenderer.ctx);\n          }\n\n          // Ghost release logic\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n        this.ghostReleaseTimer++;\n        if (this.ghostReleaseTimer >= this.ghostReleaseInterval) {\n          this.spawnGhost();\n          this.ghostReleaseTimer = 0;\n        }\n\n        // Update collision cooldowns\n        this.updateCollisionCooldowns();\n      }\n\n      // Handle death message display and timer\n      if (this.deathMessageTimer > 0) {\n        this.drawDeathMessage();\n        this.deathMessageTimer--;\n      }\n      requestAnimationFrame(function () {\n        return _this7.gameLoop();\n      });\n    }\n  }, {\n    key: \"pickRandomMap\",\n    value: function pickRandomMap() {\n      if (window.laraconmanMazeCsvs) {\n        var mapKeys = Object.keys(window.laraconmanMazeCsvs);\n        console.log('Available maps:', mapKeys.length);\n        var playedMaps = [];\n        var idx;\n        do {\n          idx = Math.floor(Math.random() * mapKeys.length);\n        } while (playedMaps.includes(idx) && playedMaps.length < mapKeys.length);\n        playedMaps.push(idx);\n        var selectedKey = mapKeys[idx];\n        return window.laraconmanMazeCsvs[selectedKey];\n      }\n      return null;\n    }\n  }, {\n    key: \"startRandomMap\",\n    value: function startRandomMap() {\n      var _mapArray$;\n      var csv = this.pickRandomMap();\n      if (!csv) return;\n      var mapArray = Game.parseAndAdaptMazeCsv(csv);\n      var width = ((_mapArray$ = mapArray[0]) === null || _mapArray$ === void 0 ? void 0 : _mapArray$.length) || 0;\n      var height = mapArray.length;\n      this.mapRenderer = new _map_renderer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.canvas);\n      var normalizedCsv = mapArray.map(function (row) {\n        return row.join(',');\n      }).join('\\n');\n      this.mapRenderer.loadMap(normalizedCsv, width, height);\n      this.mapRenderer.render();\n      this.initPlayer(this.mapRenderer.mapData, this.mapRenderer.tileSize);\n      this.initCollectibles();\n      this.level = this.level || 1;\n      this.updateUI();\n    }\n  }, {\n    key: \"checkLevelComplete\",\n    value: function checkLevelComplete() {\n      // No more dots, superdots, or fruit\n      if (this.dots && this.dots.length === 0 && this.superdots && this.superdots.length === 0 && this.fruit && this.fruit.length === 0) {\n        this.level = (this.level || 1) + 1;\n        this.updateUI();\n        this.startRandomMap();\n      }\n    }\n  }, {\n    key: \"initCollectibles\",\n    value: function initCollectibles() {\n      // Use the map and tile types from mapRenderer\n      var mapData = this.mapRenderer.mapData;\n      var tileTypes = this.mapRenderer.TILES;\n      var spawner = new _collectible_spawner_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](mapData, tileTypes);\n      var _spawner$spawnCollect = spawner.spawnCollectibles(),\n        superdots = _spawner$spawnCollect.superdots,\n        dots = _spawner$spawnCollect.dots,\n        fruit = _spawner$spawnCollect.fruit;\n      this.dots = dots;\n      console.log('Fruit spawned:', fruit.length);\n      console.log(fruit);\n      // Fruit now comes directly from entityArt, so no need to override\n      this.fruit = fruit;\n      this.superdots = superdots;\n      console.log('Final fruit array length:', this.fruit.length);\n      if (this.fruit.length > 0) {\n        console.log('First fruit:', this.fruit[0]);\n      }\n      this.checkLevelComplete();\n    }\n  }, {\n    key: \"initEventListeners\",\n    value: function initEventListeners() {\n      var _this8 = this;\n      this.collisionEmitter.on('collision-consumable', function (_ref) {\n        var player = _ref.player,\n          consumed = _ref.consumed;\n        if (!consumed || !consumed.type) {\n          return;\n        }\n        if (!consumed.options.points) {\n          if (consumed.type === _this8.mapRenderer.TILES.FRUIT) {\n            // Pac-Man fruit score progression: 100, 300, 500, 700, 1000, 2000, 3000, 5000\n            if (!_this8.fruitScoreIndex) _this8.fruitScoreIndex = 0;\n            var fruitScores = [100, 300, 500, 700, 1000, 2000, 3000, 5000];\n            consumed.options.points = fruitScores[Math.min(_this8.fruitScoreIndex, fruitScores.length - 1)];\n            _this8.fruitScoreIndex++;\n            console.log(\"Fruit score set to \".concat(consumed.options.points));\n          }\n        }\n        _this8.setScore(_this8.getScore() + consumed.options.points);\n        // Remove dot from this.dots if it is a dot\n        if (consumed.type === _this8.mapRenderer.TILES.DOT) {\n          _this8.dots = _this8.dots.filter(function (dot) {\n            return !(dot.col === consumed.col && dot.row === consumed.row);\n          });\n          _this8.audioHandler.playChomp();\n          return;\n        } else if (consumed.type === _this8.mapRenderer.TILES.SUPER_DOT) {\n          _this8.superdots = _this8.superdots.filter(function (dot) {\n            return !(dot.col === consumed.col && dot.row === consumed.row);\n          });\n          if (_this8.mapRenderer && _this8.mapRenderer.mapData) {\n            _this8.mapRenderer.mapData[consumed.row][consumed.col] = _this8.mapRenderer.TILES.EMPTY;\n          }\n          if (player && typeof player.setSuperState === 'function') {\n            player.setSuperState(true);\n            setTimeout(function () {\n              player.setSuperState(false);\n            }, (_settings_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].megaPelletDuration || 5) * 1000);\n            console.log('user is a super dot!');\n          } else {\n            console.log('fn or player no exist.');\n          }\n        } else if (consumed.type === _this8.mapRenderer.TILES.FRUIT) {\n          var fruit = _this8.fruit.find(function (f) {\n            return f.col === consumed.col && f.row === consumed.row;\n          });\n          if (fruit) {\n            _this8.setScore(_this8.getScore() + fruit.options.points); // Ensure score increments on fruit eaten\n            fruit.startExplodingAnimation();\n            // Remove after explosion animation (0.5s)\n            setTimeout(function () {\n              fruit.eaten = true;\n              _this8.fruit = _this8.fruit.filter(function (f) {\n                return f !== fruit;\n              });\n            }, 500);\n            _this8.audioHandler.playFruitEaten();\n          }\n        }\n        _this8.checkLevelComplete();\n      });\n      // Add default event handlers for collisions\n      this.collisionEmitter.on('collision-ghost', function (_ref2) {\n        var player = _ref2.player,\n          ghost = _ref2.ghost;\n        console.log('Player collided with ghost:', ghost.displayName || ghost.color);\n      });\n\n      // Debounced player-eaten event handler\n      this.collisionEmitter.on('player-eaten', (0,_fx_js__WEBPACK_IMPORTED_MODULE_1__.throttleLeading)(function (_ref3) {\n        var player = _ref3.player,\n          ghost = _ref3.ghost;\n        // Store killer ghost info and start death message timer\n        _this8.lastKillerGhost = ghost.displayName || ghost.name || 'Unknown Ghost';\n        _this8.deathMessageTimer = _this8.deathMessageDuration;\n\n        // Animate player death, decrement lives, respawn player\n        _this8.lives -= 1;\n        if (player && typeof player.die === 'function') {\n          player.die();\n        }\n        _this8.audioHandler.playPlayerDeath();\n        _this8.gameState = 'stopped';\n        _this8.updateUI && _this8.updateUI();\n        if (_this8.lives > 0) {\n          if (typeof _this8.initPlayer === 'function') {\n            _this8.initPlayer(_this8.mapRenderer.mapData, _this8.mapRenderer.tileSize);\n            _this8.resetInputHandlerCallbacks();\n            /*\n            this.inputHandler.setCallbacks({\n                onDirectionChange: dir => this.player.setDirection(dir)\n            });\n             */\n          }\n          _this8.gameState = 'playing';\n        } else {\n          _this8.gameState = 'gameover';\n          _this8.updateUI && _this8.updateUI();\n        }\n        console.log(_this8.gameState);\n      }, 1500));\n      this.collisionEmitter.on('ghost-eaten', function (_ref4) {\n        var player = _ref4.player,\n          ghost = _ref4.ghost,\n          points = _ref4.points;\n        // Example: Animate ghost death, award points\n        if (ghost && typeof ghost.die === 'function') {\n          ghost.die(); // You may want to implement this\n        }\n        _this8.audioHandler.playGhostEaten();\n        // Banish ghost to pen (set to first GHOST_SPAWN tile found)\n        var map = _this8.mapRenderer.mapData;\n        var found = false;\n        for (var r = 0; r < map.length; r++) {\n          for (var c = 0; c < map[0].length; c++) {\n            if (map[r][c] === _this8.mapRenderer.TILES.GHOST_SPAWN) {\n              ghost.col = c;\n              ghost.row = r;\n              ghost.x = c * _this8.mapRenderer.tileSize;\n              ghost.y = r * _this8.mapRenderer.tileSize;\n              ghost.state = 'in_pen';\n              found = true;\n              break;\n            }\n          }\n        }\n        _this8.score += points;\n        _this8.updateUI && _this8.updateUI();\n      });\n    }\n  }], [{\n    key: \"parseAndAdaptMazeCsv\",\n    value: function parseAndAdaptMazeCsv(csvString) {\n      var rows = csvString.trim().split('\\n');\n      return rows.map(function (row) {\n        return row.trim().split(',').map(function (val) {\n          var n = Number(val.trim());\n          // Example: adapt 4 to 5 if renderer expects 5 for tunnel\n          // If MapRenderer expects 4 for tunnel, no change needed\n          return n;\n        });\n      });\n    }\n  }]);\n}(); // Utility to convert mapData to PathFinding.js grid format\nfunction makePFGrid(mapData, walkableTiles) {\n  var grid = [];\n  for (var r = 0; r < mapData.length; r++) {\n    var row = [];\n    for (var c = 0; c < mapData[0].length; c++) {\n      // 0 = walkable, 1 = blocked\n      row.push(walkableTiles.includes(mapData[r][c]) ? 0 : 1);\n    }\n    grid.push(row);\n  }\n  return new (pathfinding__WEBPACK_IMPORTED_MODULE_6___default().Grid)(grid);\n}\n\n// Add event emitter for tile events\nvar TileEventEmitter = /*#__PURE__*/function () {\n  function TileEventEmitter() {\n    _classCallCheck(this, TileEventEmitter);\n    this.listeners = [];\n  }\n  return _createClass(TileEventEmitter, [{\n    key: \"on\",\n    value: function on(cb) {\n      this.listeners.push(cb);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      this.listeners.forEach(function (cb) {\n        return cb(event);\n      });\n    }\n  }]);\n}(); // Initialize game when script loads\nvar game = new Game();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/game.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/ghost-entity.js":
/*!*********************************************!*\
  !*** ./resources/assets/js/ghost-entity.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GhostEntity)\n/* harmony export */ });\n/* harmony import */ var pathfinding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pathfinding */ \"./node_modules/pathfinding/index.js\");\n/* harmony import */ var pathfinding__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pathfinding__WEBPACK_IMPORTED_MODULE_0__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// ghost-entity.js\n// Minimal, extensible GhostEntity class for movement, collision, and future pathfinding\n\n\nvar GhostEntity = /*#__PURE__*/function () {\n  function GhostEntity(startCol, startRow, tileSize, mapData) {\n    var speed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n    var color = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '#FF0000';\n    var tiles = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    var image = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n    _classCallCheck(this, GhostEntity);\n    this.col = startCol;\n    this.row = startRow;\n    this.tileSize = tileSize;\n    this.mapData = mapData; // reference to current map\n    this.direction = 'left'; // default\n    this.nextDirection = null;\n    this.speed = speed;\n    this.x = this.col * tileSize;\n    this.y = this.row * tileSize;\n    this.targetX = this.x;\n    this.targetY = this.y;\n    this.moving = false;\n    this.color = color;\n    this.image = image;\n    this.state = 'in_pen'; // 'in_pen', 'exiting', 'active'\n    this.exitTarget = null;\n    this.destination = null;\n    this.path = null;\n    this.pathStep = 0;\n    this.TILES = tiles;\n    this.lastPosition = null; // Track previous tile\n  }\n  return _createClass(GhostEntity, [{\n    key: \"setState\",\n    value: function setState(state) {\n      var exitTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this.state = state;\n      this.exitTarget = exitTarget;\n      // When entering 'exiting', clear previous destination if just left pen\n      if (state === 'exiting' && this.destination && this.state !== 'exiting') {\n        this.destination = null;\n        this.path = null;\n        this.pathStep = 0;\n      }\n    }\n  }, {\n    key: \"setDirection\",\n    value: function setDirection(dir) {\n      this.nextDirection = dir;\n    }\n  }, {\n    key: \"canMove\",\n    value: function canMove(dir) {\n      var _GhostEntity$directio = GhostEntity.directionDelta(dir),\n        _GhostEntity$directio2 = _slicedToArray(_GhostEntity$directio, 2),\n        dCol = _GhostEntity$directio2[0],\n        dRow = _GhostEntity$directio2[1];\n      var nCol = this.col + dCol;\n      var nRow = this.row + dRow;\n      if (nCol < 0 || nRow < 0 || nRow >= this.mapData.length || nCol >= this.mapData[0].length) return false;\n      // Allow movement on walkable tiles always if not in_pen\n\n      if (this.state === 'exiting') {\n\n        //            return walkable.some(Boolean);\n      }\n      if (this.state === 'exiting' || this.state === 'active') {\n        var walkable = [this.mapData[nRow][nCol] === this.TILES.EMPTY, this.mapData[nRow][nCol] === this.TILES.DOT, this.mapData[nRow][nCol] === this.TILES.SUPER_DOT, this.mapData[nRow][nCol] === this.TILES.GHOST_DOOR, this.mapData[nRow][nCol] === this.TILES.GHOST_SPAWN];\n        return walkable.some(Boolean);\n      }\n      // If in_pen, only allow movement inside pen (GHOST_SPAWN)\n      return this.mapData[nRow][nCol] === this.TILES.GHOST_SPAWN;\n    }\n  }, {\n    key: \"move\",\n    value: function move() {\n      if (!this.moving) {\n        if (this.nextDirection && this.canMove(this.nextDirection)) {\n          this.direction = this.nextDirection;\n          this.nextDirection = null;\n        }\n        if (this.canMove(this.direction)) {\n          var _GhostEntity$directio3 = GhostEntity.directionDelta(this.direction),\n            _GhostEntity$directio4 = _slicedToArray(_GhostEntity$directio3, 2),\n            dCol = _GhostEntity$directio4[0],\n            dRow = _GhostEntity$directio4[1];\n          this.targetX = (this.col + dCol) * this.tileSize;\n          this.targetY = (this.row + dRow) * this.tileSize;\n          this.moving = true;\n        }\n      }\n      if (this.moving) {\n        var dx = this.targetX - this.x;\n        var dy = this.targetY - this.y;\n        var dist = Math.sqrt(dx * dx + dy * dy);\n        if (dist <= this.speed) {\n          this.x = this.targetX;\n          this.y = this.targetY;\n          var _GhostEntity$directio5 = GhostEntity.directionDelta(this.direction),\n            _GhostEntity$directio6 = _slicedToArray(_GhostEntity$directio5, 2),\n            _dCol = _GhostEntity$directio6[0],\n            _dRow = _GhostEntity$directio6[1];\n          this.col += _dCol;\n          this.row += _dRow;\n          this.moving = false;\n        } else {\n          var angle = Math.atan2(dy, dx);\n          this.x += this.speed * Math.cos(angle);\n          this.y += this.speed * Math.sin(angle);\n        }\n      }\n    }\n  }, {\n    key: \"isAt\",\n    value: function isAt(col, row) {\n      return this.col === col && this.row === row;\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      var _this = this;\n      ctx.save();\n      if (this.image) {\n        // Draw PNG/SVG art\n        var img = this._artImg || (this._artImg = new Image());\n        if (!img.src) img.src = this.image;\n        if (img.complete) {\n          ctx.drawImage(img, this.x, this.y, this.tileSize, this.tileSize);\n        } else {\n          img.onload = function () {\n            ctx.drawImage(img, _this.x, _this.y, _this.tileSize, _this.tileSize);\n          };\n        }\n      } else {\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(this.x + this.tileSize / 2, this.y + this.tileSize / 2, this.tileSize / 2 - 2, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n      ctx.restore();\n    }\n  }, {\n    key: \"setDestination\",\n    value: function setDestination(dest, mapData) {\n      if (this.lastPosition && dest.col === this.lastPosition.col && dest.row === this.lastPosition.row) {\n        // Don't allow immediate reversal to previous position\n        return;\n      }\n      this.destination = dest;\n      // Convert mapData to PF grid for full maze\n      var walkable = [this.TILES.EMPTY, this.TILES.DOT, this.TILES.SUPER_DOT, this.TILES.GHOST_DOOR, this.TILES.GHOST_SPAWN];\n      var pfGrid = makePFGrid(mapData, walkable);\n      var finder = new (pathfinding__WEBPACK_IMPORTED_MODULE_0___default().AStarFinder)();\n      var pathArr = finder.findPath(this.col, this.row, dest.col, dest.row, pfGrid);\n      // Convert [col,row] array to [{col,row}] for compatibility\n      this.path = pathArr.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          c = _ref2[0],\n          r = _ref2[1];\n        return {\n          col: c,\n          row: r\n        };\n      });\n      this.pathStep = 1;\n    }\n  }, {\n    key: \"moveToDestination\",\n    value: function moveToDestination() {\n      // If path is missing or blocked, try to recompute a new path\n      if (!this.path || this.pathStep >= this.path.length) {\n        if (this.destination) {\n          this.path = GhostEntity.bfsPath(this.mapData, {\n            col: this.col,\n            row: this.row\n          }, this.destination);\n          this.pathStep = 1;\n        }\n        // If still no path, abandon destination\n        if (!this.path || this.path.length < 2) {\n          this.destination = null;\n          this.path = null;\n          this.pathStep = 0;\n          return;\n        }\n      }\n\n      // --- FORCE EXIT LOGIC ---\n      if (this.state === 'exiting') {\n        // If the next step is a GHOST_DOOR or EMPTY, always take it immediately\n        var _next = this.path[this.pathStep];\n        if (!_next) return;\n        var nextType = this.mapData[_next.row][_next.col];\n        if (nextType === this.TILES.GHOST_DOOR || nextType === this.TILES.EMPTY) {\n          if (_next.col > this.col) this.setDirection('right');else if (_next.col < this.col) this.setDirection('left');else if (_next.row > this.row) this.setDirection('down');else if (_next.row < this.row) this.setDirection('up');\n          this.move();\n          if (this.col === _next.col && this.row === _next.row) this.pathStep++;\n          return;\n        }\n      }\n      // Default: follow path\n      var next = this.path[this.pathStep];\n      if (!next) return;\n      if (this.col === next.col && this.row === next.row) {\n        this.lastPosition = {\n          col: this.col,\n          row: this.row\n        };\n      }\n      if (next.col > this.col) this.setDirection('right');else if (next.col < this.col) this.setDirection('left');else if (next.row > this.row) this.setDirection('down');else if (next.row < this.row) this.setDirection('up');\n      this.move();\n      if (this.col === next.col && this.row === next.row) this.pathStep++;\n    }\n  }, {\n    key: \"atDestination\",\n    value: function atDestination() {\n      return this.destination && this.col === this.destination.col && this.row === this.destination.row;\n    }\n  }], [{\n    key: \"directionDelta\",\n    value: function directionDelta(dir) {\n      switch (dir) {\n        case 'left':\n          return [-1, 0];\n        case 'right':\n          return [1, 0];\n        case 'up':\n          return [0, -1];\n        case 'down':\n          return [0, 1];\n        default:\n          return [0, 0];\n      }\n    }\n  }, {\n    key: \"bfsPath\",\n    value: function bfsPath(mapData, start, goal) {\n      var walkableTiles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0, 1, 3, 5];\n      var queue = [[start]];\n      var visited = new Set();\n      var key = function key(c, r) {\n        return \"\".concat(c, \",\").concat(r);\n      };\n      visited.add(key(start.col, start.row));\n      var height = mapData.length;\n      var width = mapData[0].length;\n      while (queue.length) {\n        var path = queue.shift();\n        var _path = path[path.length - 1],\n          col = _path.col,\n          row = _path.row;\n        if (col === goal.col && row === goal.row) return path;\n        for (var _i = 0, _arr = [[0, 1], [1, 0], [0, -1], [-1, 0]]; _i < _arr.length; _i++) {\n          var _arr$_i = _slicedToArray(_arr[_i], 2),\n            dc = _arr$_i[0],\n            dr = _arr$_i[1];\n          var nc = col + dc,\n            nr = row + dr;\n          if (nc < 0 || nr < 0 || nc >= width || nr >= height) continue;\n          if (!walkableTiles.includes(mapData[nr][nc])) continue;\n          var k = key(nc, nr);\n          if (visited.has(k)) continue;\n          visited.add(k);\n          queue.push([].concat(_toConsumableArray(path), [{\n            col: nc,\n            row: nr\n          }]));\n        }\n      }\n      return null;\n    }\n  }]);\n}();\n\nfunction makePFGrid(mapData, walkableTiles) {\n  var grid = [];\n  for (var r = 0; r < mapData.length; r++) {\n    var row = [];\n    for (var c = 0; c < mapData[0].length; c++) {\n      row.push(walkableTiles.includes(mapData[r][c]) ? 0 : 1);\n    }\n    grid.push(row);\n  }\n  return new (pathfinding__WEBPACK_IMPORTED_MODULE_0___default().Grid)(grid);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/ghost-entity.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/input-handler.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/input-handler.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// Modern ES6 InputHandler module for laraconman\nvar InputHandler = /*#__PURE__*/function () {\n  function InputHandler() {\n    _classCallCheck(this, InputHandler);\n    this.keys = {};\n    this.currentDirection = null;\n    this.queuedDirection = null;\n\n    // Direction constants\n    this.DIRECTIONS = {\n      UP: 'up',\n      DOWN: 'down',\n      LEFT: 'left',\n      RIGHT: 'right'\n    };\n\n    // Key mapping for navigation\n    this.keyMap = {\n      'arrowup': this.DIRECTIONS.UP,\n      'keyw': this.DIRECTIONS.UP,\n      'arrowdown': this.DIRECTIONS.DOWN,\n      'keys': this.DIRECTIONS.DOWN,\n      'arrowleft': this.DIRECTIONS.LEFT,\n      'keya': this.DIRECTIONS.LEFT,\n      'arrowright': this.DIRECTIONS.RIGHT,\n      'keyd': this.DIRECTIONS.RIGHT\n    };\n    this.callbacks = {\n      onDirectionChange: null,\n      onKeyPress: null,\n      onPause: null,\n      onReset: null\n    };\n    this.setupEventListeners();\n  }\n  return _createClass(InputHandler, [{\n    key: \"setCallbacks\",\n    value: function setCallbacks(callbacks) {\n      this.callbacks = _objectSpread(_objectSpread({}, this.callbacks), callbacks);\n    }\n  }, {\n    key: \"getCurrentDirection\",\n    value: function getCurrentDirection() {\n      return this.currentDirection;\n    }\n  }, {\n    key: \"getQueuedDirection\",\n    value: function getQueuedDirection() {\n      return this.queuedDirection;\n    }\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n      document.addEventListener('keydown', function (e) {\n        // Prevent browser scroll for arrow keys\n        if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key)) {\n          e.preventDefault();\n        }\n        var code = e.code.toLowerCase();\n        // Navigation keys\n        if (_this.keyMap[code]) {\n          _this.handleDirectionInput(code);\n        }\n        // Pause (Escape)\n        else if (code === 'keyp' && _this.callbacks.onPause) {\n          _this.callbacks.onPause();\n        } else if ((code === 'keyr' || code === 'f5') && _this.callbacks.onReset) {\n          _this.callbacks.onReset();\n        }\n        // Enter/Return\n        else if ((code === 'enter' || code === 'numpadenter' || code === 'return') && _this.callbacks.onEnter) {\n          _this.callbacks.onEnter();\n        }\n        // Any other key\n        else if (_this.callbacks.onKeyPress) {\n          _this.callbacks.onKeyPress(e.code, e);\n        }\n      }, {\n        passive: false\n      });\n    }\n  }, {\n    key: \"handleDirectionInput\",\n    value: function handleDirectionInput(code) {\n      console.log(code);\n      var direction = this.keyMap[code];\n      if (direction && direction !== this.currentDirection) {\n        this.queuedDirection = direction;\n        this.currentDirection = direction;\n        if (this.callbacks.onDirectionChange) {\n          this.callbacks.onDirectionChange(direction);\n        }\n      }\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InputHandler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/input-handler.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/map-renderer.js":
/*!*********************************************!*\
  !*** ./resources/assets/js/map-renderer.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar MapRenderer = /*#__PURE__*/function () {\n  function MapRenderer(canvas) {\n    var tileSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, MapRenderer);\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.tileSize = tileSize;\n    this.mapData = null;\n    this.rawMapData = null; // Store the original map data before border enforcement\n    this.width = 0;\n    this.height = 0;\n\n    // Tile type constants (matching your factory)\n    this.TILES = {\n      EMPTY: 0,\n      WALL: 1,\n      DOT: 2,\n      GHOST_DOOR: 3,\n      TUNNEL: 4,\n      CORNER: 6,\n      GHOST_SPAWN: 7,\n      PORTAL: 8,\n      SUPER_DOT: 9,\n      PORTAL_BLOCKER: 10,\n      FRUIT: 11\n    };\n\n    // Colors for different tile types\n    this.colors = {\n      wall: '#0031FF',\n      // Pac-Man blue\n      dot: '#FFFFB8',\n      // Pac-Man dot yellow\n      ghostDoor: '#FF69B4',\n      tunnel: '#000000',\n      // tunnel is background color\n      background: '#000000',\n      path: '#000080',\n      corner: '#FF0000',\n      ghostSpawn: '#000080',\n      // Match path/tunnel background\n      portal: '#0000FF',\n      superDot: '#FFFF00'\n    };\n    this.applyConfig(config);\n  }\n\n  /**\n   * Accepts a config object to override colors.\n   * @param {object} config - Optional config object with color overrides\n   */\n  return _createClass(MapRenderer, [{\n    key: \"applyConfig\",\n    value: function applyConfig() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (config.colors) {\n        this.colors = _objectSpread(_objectSpread({}, this.colors), config.colors);\n      }\n    }\n\n    /**\n     * Load map data from CSV string format\n     * @param {string} csvData - CSV formatted map data\n     * @param {number} width - Map width in tiles\n     * @param {number} height - Map height in tiles\n     */\n  }, {\n    key: \"loadMap\",\n    value: function loadMap(csvData, width, height) {\n      var _this = this;\n      this.width = width + 2;\n      this.height = height + 2;\n      var rows = csvData.trim().split('\\n');\n      var raw = rows.map(function (row) {\n        return row.split(',').map(function (cell) {\n          return _this.mapTileCode(parseInt(cell.trim(), 10));\n        });\n      });\n      // Find portal columns/rows on edges\n      var portalColsTop = [];\n      var portalColsBottom = [];\n      var portalRowsLeft = [];\n      var portalRowsRight = [];\n      for (var c = 0; c < width; c++) {\n        if (raw[0][c] === this.TILES.PORTAL) portalColsTop.push(c);\n        if (raw[height - 1][c] === this.TILES.PORTAL) portalColsBottom.push(c);\n      }\n      for (var r = 0; r < height; r++) {\n        if (raw[r][0] === this.TILES.PORTAL) portalRowsLeft.push(r);\n        if (raw[r][width - 1] === this.TILES.PORTAL) portalRowsRight.push(r);\n      }\n      // Build bordered map\n      this.mapData = [];\n      // Top border\n      var topRow = [];\n      for (var _c = 0; _c < width + 2; _c++) {\n        if (_c > 0 && _c < width + 1 && portalColsTop.includes(_c - 1)) topRow.push(this.TILES.PORTAL_BLOCKER);else topRow.push(this.TILES.WALL);\n      }\n      this.mapData.push(topRow);\n      // Middle rows\n      for (var _r = 0; _r < height; _r++) {\n        var row = [];\n        // Left border\n        if (portalRowsLeft.includes(_r)) row.push(this.TILES.PORTAL_BLOCKER);else row.push(this.TILES.WALL);\n        // Original row\n        for (var _c2 = 0; _c2 < width; _c2++) row.push(raw[_r][_c2]);\n        // Right border\n        if (portalRowsRight.includes(_r)) row.push(this.TILES.PORTAL_BLOCKER);else row.push(this.TILES.WALL);\n        this.mapData.push(row);\n      }\n      // Bottom border\n      var bottomRow = [];\n      for (var _c3 = 0; _c3 < width + 2; _c3++) {\n        if (_c3 > 0 && _c3 < width + 1 && portalColsBottom.includes(_c3 - 1)) bottomRow.push(this.TILES.PORTAL_BLOCKER);else bottomRow.push(this.TILES.WALL);\n      }\n      this.mapData.push(bottomRow);\n\n      // --- Add PORTAL_BLOCKER behind each portal ---\n      // Only place blocker if the tile is truly EMPTY (do not overwrite super dots, dots, fruit, etc)\n      var blockableTiles = [this.TILES.EMPTY];\n      // Top portals: place blocker below\n      for (var _i = 0, _portalColsTop = portalColsTop; _i < _portalColsTop.length; _i++) {\n        var _c4 = _portalColsTop[_i];\n        if (blockableTiles.includes(this.mapData[1][_c4 + 1])) {\n          this.mapData[1][_c4 + 1] = this.TILES.PORTAL_BLOCKER;\n        }\n      }\n      // Bottom portals: place blocker above\n      for (var _i2 = 0, _portalColsBottom = portalColsBottom; _i2 < _portalColsBottom.length; _i2++) {\n        var _c5 = _portalColsBottom[_i2];\n        if (blockableTiles.includes(this.mapData[this.mapData.length - 2][_c5 + 1])) {\n          this.mapData[this.mapData.length - 2][_c5 + 1] = this.TILES.PORTAL_BLOCKER;\n        }\n      }\n      // Left portals: place blocker right\n      for (var _i3 = 0, _portalRowsLeft = portalRowsLeft; _i3 < _portalRowsLeft.length; _i3++) {\n        var _r2 = _portalRowsLeft[_i3];\n        if (blockableTiles.includes(this.mapData[_r2 + 1][1])) {\n          this.mapData[_r2 + 1][1] = this.TILES.PORTAL_BLOCKER;\n        }\n      }\n      // Right portals: place blocker left\n      for (var _i4 = 0, _portalRowsRight = portalRowsRight; _i4 < _portalRowsRight.length; _i4++) {\n        var _r3 = _portalRowsRight[_i4];\n        if (blockableTiles.includes(this.mapData[_r3 + 1][this.mapData[0].length - 2])) {\n          this.mapData[_r3 + 1][this.mapData[0].length - 2] = this.TILES.PORTAL_BLOCKER;\n        }\n      }\n      this.canvas.width = this.width * this.tileSize;\n      this.canvas.height = this.height * this.tileSize;\n      console.log(\"Map loaded with border: \".concat(this.width, \"x\").concat(this.height), this.mapData);\n    }\n\n    /**\n     * Map legacy/demo tile codes to internal tile types\n     * @param {number} code - raw tile code from CSV\n     * @returns {number} mapped tile code\n     */\n  }, {\n    key: \"mapTileCode\",\n    value: function mapTileCode(code) {\n      // Tile code meanings:\n      // 0 = wall, 1 = empty/path, 2 = super dot (corners), 3 = ghost spawn, 4 = portal, 5 = ghost door\n      switch (code) {\n        case 0:\n          return this.TILES.WALL;\n        case 1:\n          return this.TILES.EMPTY;\n        case 2:\n          return this.TILES.SUPER_DOT;\n        case 3:\n          return this.TILES.GHOST_SPAWN;\n        case 4:\n          return this.TILES.PORTAL;\n        case 5:\n          return this.TILES.GHOST_DOOR;\n        default:\n          return this.TILES.EMPTY;\n      }\n    }\n\n    /**\n     * Ensure there is always a border of walls around the map,\n     * except for tunnel/portal tiles (TUNNEL) at the border.\n     * This modifies mapData in-place after loading.\n     */\n  }, {\n    key: \"ensureWallBorder\",\n    value: function ensureWallBorder() {\n      if (!this.mapData) return;\n      var h = this.mapData.length;\n      var w = this.mapData[0].length;\n      for (var r = 0; r < h; r++) {\n        for (var c = 0; c < w; c++) {\n          var isEdge = r === 0 || r === h - 1 || c === 0 || c === w - 1;\n          if (isEdge) {\n            // If this is a tunnel/portal, preserve it\n            if (this.mapData[r][c] === this.TILES.TUNNEL) continue;\n            // Otherwise, enforce wall\n            this.mapData[r][c] = this.TILES.WALL;\n          }\n        }\n      }\n    }\n\n    /**\n     * Render the entire map to canvas\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.mapData) {\n        console.error('No map data loaded');\n        return;\n      }\n\n      // Clear canvas\n      this.ctx.fillStyle = this.colors.background;\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // Render each tile\n      for (var row = 0; row < this.height; row++) {\n        for (var col = 0; col < this.width; col++) {\n          var tileType = this.mapData[row][col];\n          this.renderTile(col, row, tileType);\n        }\n      }\n    }\n\n    /**\n     * Render a single tile at the specified position\n     * @param {number} col - Column position\n     * @param {number} row - Row position  \n     * @param {number} tileType - Type of tile to render\n     */\n  }, {\n    key: \"renderTile\",\n    value: function renderTile(col, row, tileType) {\n      var x = col * this.tileSize;\n      var y = row * this.tileSize;\n\n      // If this is a wall at the border and the *original* tile was a tunnel, skip rendering (transparent)\n      var isEdge = row === 0 || row === this.height - 1 || col === 0 || col === this.width - 1;\n      // Use the raw map data (before wall border enforcement) to check for tunnel\n      if (tileType === this.TILES.WALL && isEdge && this.rawMapData && this.rawMapData[row][col] === this.TILES.TUNNEL) {\n        return; // Don't render wall at tunnel/portal\n      }\n      if (tileType === this.TILES.WALL) {\n        this.renderWall(x, y);\n      } else switch (tileType) {\n        case this.TILES.DOT:\n          this.renderPath(x, y);\n          this.renderDot(x, y);\n          break;\n        case this.TILES.GHOST_DOOR:\n          this.renderPath(x, y);\n          this.renderGhostDoor(x, y);\n          break;\n        case this.TILES.TUNNEL:\n          this.renderPath(x, y);\n          break;\n        case this.TILES.CORNER:\n          this.renderPath(x, y);\n          this.renderCorner(x, y);\n          break;\n        case this.TILES.GHOST_SPAWN:\n          this.renderPath(x, y);\n          this.renderGhostSpawn(x, y);\n          break;\n        case this.TILES.PORTAL:\n          this.renderPath(x, y);\n          this.renderPortal(x, y);\n          break;\n        case this.TILES.SUPER_DOT:\n          this.renderPath(x, y);\n          this.renderSuperDot(x, y);\n          break;\n        default:\n          this.renderPath(x, y);\n      }\n    }\n\n    /**\n     * Render a wall tile\n     */\n  }, {\n    key: \"renderWall\",\n    value: function renderWall(x, y) {\n      this.ctx.fillStyle = this.colors.wall;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n\n      // Add wall border for definition\n      this.ctx.strokeStyle = '#4444FF';\n      this.ctx.lineWidth = 1;\n      this.ctx.strokeRect(x, y, this.tileSize, this.tileSize);\n    }\n\n    /**\n     * Render a path/corridor background\n     */\n  }, {\n    key: \"renderPath\",\n    value: function renderPath(x, y) {\n      this.ctx.fillStyle = this.colors.path;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n    }\n\n    /**\n     * Render a dot (pellet)\n     */\n  }, {\n    key: \"renderDot\",\n    value: function renderDot(x, y) {\n      var centerX = x + this.tileSize / 2;\n      var centerY = y + this.tileSize / 2;\n      var radius = Math.max(2, this.tileSize / 8);\n      this.ctx.fillStyle = this.colors.dot;\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n\n    /**\n     * Render a ghost door (special gate)\n     */\n  }, {\n    key: \"renderGhostDoor\",\n    value: function renderGhostDoor(x, y) {\n      // Horizontal line across the middle\n      this.ctx.strokeStyle = this.colors.ghostDoor;\n      this.ctx.lineWidth = 3;\n      this.ctx.beginPath();\n      this.ctx.moveTo(x, y + this.tileSize / 2);\n      this.ctx.lineTo(x + this.tileSize, y + this.tileSize / 2);\n      this.ctx.stroke();\n    }\n\n    /**\n     * Render a tunnel entrance\n     */\n  }, {\n    key: \"renderTunnel\",\n    value: function renderTunnel(x, y) {\n      this.ctx.fillStyle = this.colors.tunnel;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n\n      // Add some tunnel indicators\n      this.ctx.fillStyle = '#008888';\n      this.ctx.fillRect(x + 2, y + 2, this.tileSize - 4, this.tileSize - 4);\n    }\n\n    /**\n     * Render a corner\n     */\n  }, {\n    key: \"renderCorner\",\n    value: function renderCorner(x, y) {\n      this.ctx.fillStyle = this.colors.corner;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n    }\n\n    /**\n     * Render a ghost spawn\n     */\n  }, {\n    key: \"renderGhostSpawn\",\n    value: function renderGhostSpawn(x, y) {\n      this.ctx.fillStyle = this.colors.ghostSpawn;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n    }\n\n    /**\n     * Render a portal\n     */\n  }, {\n    key: \"renderPortal\",\n    value: function renderPortal(x, y) {\n      this.ctx.fillStyle = this.colors.portal;\n      this.ctx.fillRect(x, y, this.tileSize, this.tileSize);\n    }\n\n    /**\n     * Render a super dot\n     */\n  }, {\n    key: \"renderSuperDot\",\n    value: function renderSuperDot(x, y) {\n      var centerX = x + this.tileSize / 2;\n      var centerY = y + this.tileSize / 2;\n      var radius = Math.max(4, this.tileSize / 4);\n      this.ctx.fillStyle = this.colors.superDot;\n      this.ctx.beginPath();\n      this.ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      this.ctx.fill();\n    }\n\n    /**\n     * Get tile type at world coordinates\n     * @param {number} worldX - X coordinate in pixels\n     * @param {number} worldY - Y coordinate in pixels\n     * @returns {number} Tile type\n     */\n  }, {\n    key: \"getTileAt\",\n    value: function getTileAt(worldX, worldY) {\n      var col = Math.floor(worldX / this.tileSize);\n      var row = Math.floor(worldY / this.tileSize);\n      if (row < 0 || row >= this.height || col < 0 || col >= this.width) {\n        return this.TILES.WALL; // Treat out-of-bounds as walls\n      }\n      return this.mapData[row][col];\n    }\n\n    /**\n     * Convert grid coordinates to world coordinates\n     * @param {number} col - Column\n     * @param {number} row - Row\n     * @returns {object} World coordinates {x, y}\n     */\n  }, {\n    key: \"gridToWorld\",\n    value: function gridToWorld(col, row) {\n      return {\n        x: col * this.tileSize + this.tileSize / 2,\n        y: row * this.tileSize + this.tileSize / 2\n      };\n    }\n\n    /**\n     * Convert world coordinates to grid coordinates\n     * @param {number} worldX - World X coordinate\n     * @param {number} worldY - World Y coordinate\n     * @returns {object} Grid coordinates {col, row}\n     */\n  }, {\n    key: \"worldToGrid\",\n    value: function worldToGrid(worldX, worldY) {\n      return {\n        col: Math.floor(worldX / this.tileSize),\n        row: Math.floor(worldY / this.tileSize)\n      };\n    }\n\n    /**\n     * Find all tiles of a specific type\n     * @param {number} tileType - Type to search for\n     * @returns {Array} Array of {col, row} positions\n     */\n  }, {\n    key: \"findTiles\",\n    value: function findTiles(tileType) {\n      var positions = [];\n      for (var row = 0; row < this.height; row++) {\n        for (var col = 0; col < this.width; col++) {\n          if (this.mapData[row][col] === tileType) {\n            positions.push({\n              col: col,\n              row: row\n            });\n          }\n        }\n      }\n      return positions;\n    }\n  }]);\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/map-renderer.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/player-entity.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/player-entity.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PlayerEntity)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// player-entity.js\n// KISS: minimal, extensible player entity for movement/collision, future-proof for ghosts\nvar PlayerEntity = /*#__PURE__*/function () {\n  function PlayerEntity(startCol, startRow, tileSize, mapData, settings) {\n    var speed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 4;\n    _classCallCheck(this, PlayerEntity);\n    this.col = startCol;\n    this.row = startRow;\n    this.tileSize = tileSize;\n    this.mapData = mapData; // reference to current map\n    this.direction = null; // default: no movement until input\n    this.nextDirection = null;\n    this.state = 'normal'; // 'normal' or 'super'\n    this.defaultSpeed = settings.playerSpeed || 2;\n    this.superSpeed = settings.playerSuperSpeed || 4;\n    this.speed = this.defaultSpeed;\n    // tileSize is fixed for logic; visual scale only\n    this.x = this.col * this.tileSize;\n    this.y = this.row * this.tileSize;\n    this.targetX = this.x;\n    this.targetY = this.y;\n    this.moving = false;\n    this.type = 'player'; // added type property\n    this.spawnCol = startCol; // track spawn position\n    this.spawnRow = startRow;\n    this.hasMovedFromSpawn = false; // track if player has moved from spawn\n\n    // Animation properties for mouth movement\n    this.animationFrame = 0;\n    this.animationSpeed = 8; // Change animation every 8 frames\n    this.showMouthClosed = false;\n  }\n  return _createClass(PlayerEntity, [{\n    key: \"setDirection\",\n    value: function setDirection(dir) {\n      this.nextDirection = dir;\n    }\n\n    // Check if a direction is walkable (not a wall or ghost door for player)\n  }, {\n    key: \"canMove\",\n    value: function canMove(dir) {\n      var _PlayerEntity$directi = PlayerEntity.directionDelta(dir),\n        _PlayerEntity$directi2 = _slicedToArray(_PlayerEntity$directi, 2),\n        dCol = _PlayerEntity$directi2[0],\n        dRow = _PlayerEntity$directi2[1];\n      var nCol = this.col + dCol;\n      var nRow = this.row + dRow;\n      if (nCol < 0 || nRow < 0 || nRow >= this.mapData.length || nCol >= this.mapData[0].length) return false;\n      var nextTile = this.mapData[nRow][nCol];\n\n      /**\n       *  Block movement into custom portal-blocker tile (e.g., 10 = PORTAL_BLOCKER)\n       *  We also check siblings for out of bounds.\n       */\n      if (nextTile === 10) {\n        return false;\n      }\n      if (nextTile === 8 &&\n      // 8 = PORTAL\n      this.mapData[this.row][this.col] === 8) {\n        return false;\n      }\n      // Prevent player from entering ghost door\n      if (nextTile === 1 ||\n      // wall\n      nextTile === 3 && this.type === 'player' // 3 = GHOST_DOOR\n      ) {\n        return false;\n      }\n      return true;\n    }\n\n    // Move one step if possible, handle direction changes\n  }, {\n    key: \"move\",\n    value: function move() {\n      // If not moving, check for direction and set target\n      if (!this.moving) {\n        if (this.nextDirection && this.canMove(this.nextDirection)) {\n          this.direction = this.nextDirection;\n          this.nextDirection = null;\n        }\n        if (this.canMove(this.direction)) {\n          var _PlayerEntity$directi3 = PlayerEntity.directionDelta(this.direction),\n            _PlayerEntity$directi4 = _slicedToArray(_PlayerEntity$directi3, 2),\n            dCol = _PlayerEntity$directi4[0],\n            dRow = _PlayerEntity$directi4[1];\n          // Prevent moving out of bounds\n          var nextCol = this.col + dCol;\n          var nextRow = this.row + dRow;\n          if (nextCol < 0 || nextRow < 0 || nextRow >= this.mapData.length || nextCol >= this.mapData[0].length || this.mapData[nextRow][nextCol] === 1 // wall\n          ) {\n            this.moving = false;\n            return;\n          }\n          this.targetX = nextCol * this.tileSize;\n          this.targetY = nextRow * this.tileSize;\n          this.moving = true;\n        }\n      }\n      // If moving, interpolate toward target\n      if (this.moving) {\n        var dx = this.targetX - this.x;\n        var dy = this.targetY - this.y;\n        var dist = Math.sqrt(dx * dx + dy * dy);\n        if (dist <= this.speed) {\n          // Snap to target\n          this.x = this.targetX;\n          this.y = this.targetY;\n          var _PlayerEntity$directi5 = PlayerEntity.directionDelta(this.direction),\n            _PlayerEntity$directi6 = _slicedToArray(_PlayerEntity$directi5, 2),\n            _dCol = _PlayerEntity$directi6[0],\n            _dRow = _PlayerEntity$directi6[1];\n          this.col += _dCol;\n          this.row += _dRow;\n          this.moving = false;\n\n          // Check if player has moved from spawn position\n          if (!this.hasMovedFromSpawn && (this.col !== this.spawnCol || this.row !== this.spawnRow)) {\n            this.hasMovedFromSpawn = true;\n          }\n        } else {\n          // Move toward target\n          var angle = Math.atan2(dy, dx);\n          this.x += this.speed * Math.cos(angle);\n          this.y += this.speed * Math.sin(angle);\n        }\n      }\n\n      // Update animation frame when moving (works in both normal and super state)\n      if (this.moving) {\n        this.animationFrame++;\n        if (this.animationFrame >= this.animationSpeed) {\n          this.showMouthClosed = !this.showMouthClosed;\n          this.animationFrame = 0;\n        }\n      } else {\n        // Reset animation when not moving - show mouth open\n        this.showMouthClosed = false;\n        this.animationFrame = 0;\n      }\n    }\n  }, {\n    key: \"setSuperState\",\n    value: function setSuperState(isSuper) {\n      if (isSuper) {\n        this.state = 'super';\n        this.speed = this.superSpeed;\n      } else {\n        this.state = 'normal';\n        this.speed = this.defaultSpeed;\n      }\n    }\n\n    // Utility: direction string to delta\n  }, {\n    key: \"isAt\",\n    value:\n    // For collision with ghosts or dots\n    function isAt(col, row) {\n      return this.col === col && this.row === row;\n    }\n\n    // Render Player using SVG image\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      var _this = this;\n      var entityArt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      ctx.save();\n      var scale = this.state === 'super' ? 1.2 : 1;\n      var centerX = this.x + this.tileSize / 2;\n      var centerY = this.y + this.tileSize / 2;\n      ctx.translate(centerX, centerY);\n      ctx.scale(scale, scale);\n      ctx.translate(-centerX, -centerY);\n\n      // Use animation state to determine what to show (works in both normal and super state)\n      var shouldShowClosed = this.moving && this.showMouthClosed;\n      if (!shouldShowClosed && entityArt && entityArt.player && entityArt.player.image) {\n        // Show pacman image (mouth open)\n        var img = new window.Image();\n        img.src = entityArt.player.image;\n        var draw = function draw() {\n          // Check if we need to flip horizontally for left movement\n          var shouldFlip = _this.direction === 'left';\n          if (shouldFlip) {\n            // Save context and flip horizontally\n            ctx.save();\n            ctx.translate(_this.x + _this.tileSize, _this.y);\n            ctx.scale(-1, 1);\n            ctx.drawImage(img, 0, 0, _this.tileSize, _this.tileSize);\n            ctx.restore();\n          } else {\n            // Normal rendering for right, up, down, or no direction\n            ctx.drawImage(img, _this.x, _this.y, _this.tileSize, _this.tileSize);\n          }\n        };\n        img.onload = draw;\n        if (img.complete) draw();\n      } else {\n        // Show yellow circle (mouth closed or fallback)\n        // The circle will automatically scale with the context transformation\n        ctx.fillStyle = '#FFFF00';\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, this.tileSize / 2 - 2, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n      ctx.restore();\n    }\n  }], [{\n    key: \"directionDelta\",\n    value: function directionDelta(dir) {\n      switch (dir) {\n        case 'left':\n          return [-1, 0];\n        case 'right':\n          return [1, 0];\n        case 'up':\n          return [0, -1];\n        case 'down':\n          return [0, 1];\n        default:\n          return [0, 0];\n      }\n    }\n  }]);\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/player-entity.js\n\n}");

/***/ }),

/***/ "./resources/assets/js/settings.js":
/*!*****************************************!*\
  !*** ./resources/assets/js/settings.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Modern ES6 settings module for laraconman Pac-Man clone\n// Export a plain object with all settings, no globals or sessionStorage side-effects\n\nvar settings = {\n  score: 0,\n  lives: 3,\n  level: 1,\n  moveInc: 2,\n  // must divide 10 evenly: 1,2,5,10\n  speed: 10,\n  // see comments in legacy for tuning\n  gameTime: 10000,\n  // ms\n  mazeSource: 'designed',\n  basicVision: false,\n  resetModeOnResetGame: true,\n  excludeReverseDirectionInRandomMode: true,\n  fx: true,\n  extras: false,\n  ghostPenTimeout: 2,\n  // seconds ghosts wait in pen before forced exit (change as needed)\n  megaPelletDuration: 5,\n  // seconds Pac-Man stays enhanced after mega pellet\n  maxGhosts: 6,\n  // maximum number of ghosts in play\n  playerSpeed: 2,\n  // normal speed\n  playerSize: 24,\n  // normal size (px)\n  playerSuperSpeed: 4,\n  // speed during super state\n  playerSuperSize: 32,\n  // size during super state (px)\n  dotPoints: 10,\n  superDotPoints: 50,\n  fruitTypes: [{\n    type: 'cherry',\n    points: 100,\n    image: '/vendor/laraconman/images/fruit-cherry.svg'\n  }, {\n    type: 'strawberry',\n    points: 300,\n    image: '/vendor/laraconman/images/fruit-strawberry.svg'\n  }, {\n    type: 'orange',\n    points: 500,\n    image: '/vendor/laraconman/images/fruit-orange.svg'\n  }, {\n    type: 'apple',\n    points: 700,\n    image: '/vendor/laraconman/images/fruit-apple.svg'\n  }\n  // Add more as desired\n  ]\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (settings);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3NldHRpbmdzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBOztBQUVBLElBQU1BLFFBQVEsR0FBRztFQUNmQyxLQUFLLEVBQUUsQ0FBQztFQUNSQyxLQUFLLEVBQUUsQ0FBQztFQUNSQyxLQUFLLEVBQUUsQ0FBQztFQUNSQyxPQUFPLEVBQUUsQ0FBQztFQUFFO0VBQ1pDLEtBQUssRUFBRSxFQUFFO0VBQUU7RUFDWEMsUUFBUSxFQUFFLEtBQUs7RUFBRTtFQUNqQkMsVUFBVSxFQUFFLFVBQVU7RUFDdEJDLFdBQVcsRUFBRSxLQUFLO0VBQ2xCQyxvQkFBb0IsRUFBRSxJQUFJO0VBQzFCQyxtQ0FBbUMsRUFBRSxJQUFJO0VBQ3pDQyxFQUFFLEVBQUUsSUFBSTtFQUNSQyxNQUFNLEVBQUUsS0FBSztFQUNiQyxlQUFlLEVBQUUsQ0FBQztFQUFFO0VBQ3BCQyxrQkFBa0IsRUFBRSxDQUFDO0VBQUU7RUFDdkJDLFNBQVMsRUFBRSxDQUFDO0VBQUU7RUFDZEMsV0FBVyxFQUFFLENBQUM7RUFBRTtFQUNoQkMsVUFBVSxFQUFFLEVBQUU7RUFBRTtFQUNoQkMsZ0JBQWdCLEVBQUUsQ0FBQztFQUFFO0VBQ3JCQyxlQUFlLEVBQUUsRUFBRTtFQUFFO0VBQ3JCQyxTQUFTLEVBQUUsRUFBRTtFQUNiQyxjQUFjLEVBQUUsRUFBRTtFQUNsQkMsVUFBVSxFQUFFLENBQ1Y7SUFBRUMsSUFBSSxFQUFFLFFBQVE7SUFBRUMsTUFBTSxFQUFFLEdBQUc7SUFBRUMsS0FBSyxFQUFFO0VBQTZDLENBQUMsRUFDcEY7SUFBRUYsSUFBSSxFQUFFLFlBQVk7SUFBRUMsTUFBTSxFQUFFLEdBQUc7SUFBRUMsS0FBSyxFQUFFO0VBQWlELENBQUMsRUFDNUY7SUFBRUYsSUFBSSxFQUFFLFFBQVE7SUFBRUMsTUFBTSxFQUFFLEdBQUc7SUFBRUMsS0FBSyxFQUFFO0VBQTZDLENBQUMsRUFDcEY7SUFBRUYsSUFBSSxFQUFFLE9BQU87SUFBRUMsTUFBTSxFQUFFLEdBQUc7SUFBRUMsS0FBSyxFQUFFO0VBQTRDO0VBQ2pGO0VBQUE7QUFFSixDQUFDO0FBRUQsaUVBQWV6QixRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFyYWNvbm1hbi8uL3Jlc291cmNlcy9hc3NldHMvanMvc2V0dGluZ3MuanM/Mzc3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2Rlcm4gRVM2IHNldHRpbmdzIG1vZHVsZSBmb3IgbGFyYWNvbm1hbiBQYWMtTWFuIGNsb25lXG4vLyBFeHBvcnQgYSBwbGFpbiBvYmplY3Qgd2l0aCBhbGwgc2V0dGluZ3MsIG5vIGdsb2JhbHMgb3Igc2Vzc2lvblN0b3JhZ2Ugc2lkZS1lZmZlY3RzXG5cbmNvbnN0IHNldHRpbmdzID0ge1xuICBzY29yZTogMCxcbiAgbGl2ZXM6IDMsXG4gIGxldmVsOiAxLFxuICBtb3ZlSW5jOiAyLCAvLyBtdXN0IGRpdmlkZSAxMCBldmVubHk6IDEsMiw1LDEwXG4gIHNwZWVkOiAxMCwgLy8gc2VlIGNvbW1lbnRzIGluIGxlZ2FjeSBmb3IgdHVuaW5nXG4gIGdhbWVUaW1lOiAxMDAwMCwgLy8gbXNcbiAgbWF6ZVNvdXJjZTogJ2Rlc2lnbmVkJyxcbiAgYmFzaWNWaXNpb246IGZhbHNlLFxuICByZXNldE1vZGVPblJlc2V0R2FtZTogdHJ1ZSxcbiAgZXhjbHVkZVJldmVyc2VEaXJlY3Rpb25JblJhbmRvbU1vZGU6IHRydWUsXG4gIGZ4OiB0cnVlLFxuICBleHRyYXM6IGZhbHNlLFxuICBnaG9zdFBlblRpbWVvdXQ6IDIsIC8vIHNlY29uZHMgZ2hvc3RzIHdhaXQgaW4gcGVuIGJlZm9yZSBmb3JjZWQgZXhpdCAoY2hhbmdlIGFzIG5lZWRlZClcbiAgbWVnYVBlbGxldER1cmF0aW9uOiA1LCAvLyBzZWNvbmRzIFBhYy1NYW4gc3RheXMgZW5oYW5jZWQgYWZ0ZXIgbWVnYSBwZWxsZXRcbiAgbWF4R2hvc3RzOiA2LCAvLyBtYXhpbXVtIG51bWJlciBvZiBnaG9zdHMgaW4gcGxheVxuICBwbGF5ZXJTcGVlZDogMiwgLy8gbm9ybWFsIHNwZWVkXG4gIHBsYXllclNpemU6IDI0LCAvLyBub3JtYWwgc2l6ZSAocHgpXG4gIHBsYXllclN1cGVyU3BlZWQ6IDQsIC8vIHNwZWVkIGR1cmluZyBzdXBlciBzdGF0ZVxuICBwbGF5ZXJTdXBlclNpemU6IDMyLCAvLyBzaXplIGR1cmluZyBzdXBlciBzdGF0ZSAocHgpXG4gIGRvdFBvaW50czogMTAsXG4gIHN1cGVyRG90UG9pbnRzOiA1MCxcbiAgZnJ1aXRUeXBlczogW1xuICAgIHsgdHlwZTogJ2NoZXJyeScsIHBvaW50czogMTAwLCBpbWFnZTogJy92ZW5kb3IvbGFyYWNvbm1hbi9pbWFnZXMvZnJ1aXQtY2hlcnJ5LnN2ZycgfSxcbiAgICB7IHR5cGU6ICdzdHJhd2JlcnJ5JywgcG9pbnRzOiAzMDAsIGltYWdlOiAnL3ZlbmRvci9sYXJhY29ubWFuL2ltYWdlcy9mcnVpdC1zdHJhd2JlcnJ5LnN2ZycgfSxcbiAgICB7IHR5cGU6ICdvcmFuZ2UnLCBwb2ludHM6IDUwMCwgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2ZydWl0LW9yYW5nZS5zdmcnIH0sXG4gICAgeyB0eXBlOiAnYXBwbGUnLCBwb2ludHM6IDcwMCwgaW1hZ2U6ICcvdmVuZG9yL2xhcmFjb25tYW4vaW1hZ2VzL2ZydWl0LWFwcGxlLnN2ZycgfSxcbiAgICAvLyBBZGQgbW9yZSBhcyBkZXNpcmVkXG4gIF0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZXR0aW5nczsiXSwibmFtZXMiOlsic2V0dGluZ3MiLCJzY29yZSIsImxpdmVzIiwibGV2ZWwiLCJtb3ZlSW5jIiwic3BlZWQiLCJnYW1lVGltZSIsIm1hemVTb3VyY2UiLCJiYXNpY1Zpc2lvbiIsInJlc2V0TW9kZU9uUmVzZXRHYW1lIiwiZXhjbHVkZVJldmVyc2VEaXJlY3Rpb25JblJhbmRvbU1vZGUiLCJmeCIsImV4dHJhcyIsImdob3N0UGVuVGltZW91dCIsIm1lZ2FQZWxsZXREdXJhdGlvbiIsIm1heEdob3N0cyIsInBsYXllclNwZWVkIiwicGxheWVyU2l6ZSIsInBsYXllclN1cGVyU3BlZWQiLCJwbGF5ZXJTdXBlclNpemUiLCJkb3RQb2ludHMiLCJzdXBlckRvdFBvaW50cyIsImZydWl0VHlwZXMiLCJ0eXBlIiwicG9pbnRzIiwiaW1hZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/js/settings.js\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/laraconman": 0,
/******/ 			"css/laraconman": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunklaraconman"] = self["webpackChunklaraconman"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/laraconman"], () => (__webpack_require__("./resources/assets/js/game.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/laraconman"], () => (__webpack_require__("./resources/assets/css/game.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;